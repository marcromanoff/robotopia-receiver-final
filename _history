{"entries":[{"timestamp":1732303387798,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"let currentNumber = 1\n\nradio.setGroup(1) // Set radio channel to 1\n\ninput.onButtonPressed(Button.A, function () {\n    if (currentNumber <= 5) {\n        basic.showNumber(currentNumber) // Display the number on the controller\n        radio.sendValue(\"number\", currentNumber) // Send the number to all receivers\n        currentNumber += 1\n    }\n})\n\ninput.onButtonPressed(Button.B, function () {\n    basic.showIcon(IconNames.Happy) // Show a thumbs-up symbol\n    radio.sendValue(\"startCountdown\", 1) // Send a signal to start the countdown\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":539,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":251,"start2":251,"length1":32,"length2":31}]}]},{"timestamp":1732303393984,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"let currentNumber = 1\n\n"],[0,"radio.setGroup(1"]],"start1":0,"start2":0,"length1":16,"length2":39},{"diffs":[[0,"Set "],[-1,"the "],[0,"radio "],[-1,"group to 1 (both Micro:bits must match)\n\nbasic.forever(function () {\n    // Read joystick values\n    let x = pins.analogReadPin(AnalogPin.P1) // X-axis\n    let y = pins.analogReadPin(AnalogPin.P2) // Y-axis\n\n    // Map joystick values to movement commands\n    if (y < 400) {\n        radio.sendString(\"forward\") // Joystick pushed forward\n    } else if (y > 600) {\n        radio.sendString(\"backward\") // Joystick pulled backward\n    } else if (x < 400) {\n        radio.sendString(\"left\") // Joystick pushed left\n    } else if (x > 600) {\n        radio.sendString(\"right\") // Joystick pushed right\n    } else {\n        radio.sendString(\"stop\") // Neutral position\n    }\n\n    // Handle b"],[1,"channel to 1\n\ninput.onButtonPressed(Button.A, function () {\n    if (currentNumber <= 5) {\n        basic.showNumber(currentNumber) // Display the number on the controller\n        radio.sendValue(\"number\", currentNumber) // Send the number to all receivers\n        currentNumber += 1\n    }\n})\n\ninput.onB"],[0,"utton"],[-1," p"],[1,"P"],[0,"resse"],[-1,"s\n    if (pins.digitalReadPin(DigitalPin.P8) == 0) {\n        radio.sendString(\"buttonA\") // Button A pressed\n    } else if (pins.digitalReadPin(DigitalPin.P12) == 0) {\n        radio.sendString(\"buttonB\") // Button B pressed\n    }\n\n    basic.pause(100) // Small delay to avoid flooding wi"],[1,"d(Button.B, function () {\n    basic.showIcon(IconNames.Happy) // Show a thumbs-up symbol\n    radio.sendValue(\"startCountdown\", 1) // Send a signal to start "],[0,"th"],[1,"e"],[0," co"],[-1,"mmands"],[1,"untdown"],[0,"\n})\n"]],"start1":44,"start2":44,"length1":1013,"length2":495}]}]},{"timestamp":1732464985309,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"radio.setGroup(1) // Set the radio group to 1 (both Micro:bits must match)\n\nbasic.forever(function () {\n    // Read joystick values\n    let x = pins.analogReadPin(AnalogPin.P1) // X-axis\n    let y = pins.analogReadPin(AnalogPin.P2) // Y-axis\n\n    // Map joystick values to movement commands\n    if (y < 400) {\n        radio.sendString(\"forward\") // Joystick pushed forward\n    } else if (y > 600) {\n        radio.sendString(\"backward\") // Joystick pulled backward\n    } else if (x < 400) {\n        radio.sendString(\"left\") // Joystick pushed left\n    } else if (x > 600) {\n        radio.sendString(\"right\") // Joystick pushed right\n    } else {\n        radio.sendString(\"stop\") // Neutral position\n    }\n\n    // Handle button presses\n    if (pins.digitalReadPin(DigitalPin.P8) == 0) {\n        radio.sendString(\"buttonA\") // Button A pressed\n    } else if (pins.digitalReadPin(DigitalPin.P12) == 0) {\n        radio.sendString(\"buttonB\") // Button B pressed\n    }\n\n    basic.pause(100) // Small delay to avoid flooding with commands\n})\n"]],"start1":0,"start2":0,"length1":0,"length2":1034}]}]},{"timestamp":1732469714445,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"radio.setGroup(1) // Ensure both micro:bits use the same group\nlet vibrationPin = DigitalPin.P16 // Vibration motor connected to P16\nlet selectedMinutes = 0 // Tracks the currently selected minutes\n\n// Display happy face on startup\nbasic.showIcon(IconNames.Happy)\n\n// Function to activate vibration motor briefly\nfunction vibrate() {\n    pins.digitalWritePin(vibrationPin, 1) // Turn on vibration\n    basic.pause(100) // Vibrate for 100ms\n    pins.digitalWritePin(vibrationPin, 0) // Turn off vibration\n}\n\n// Function to handle minute selection\nfunction setMinutes(minutes: number) {\n    selectedMinutes = minutes\n    basic.showNumber(minutes) // Show the selected number on the LED grid\n    vibrate() // Trigger vibration feedback\n    // Send the corresponding string to the receiver micro:bit\n    if (minutes === 1) {\n        radio.sendString(\"one\")\n    } else if (minutes === 2) {\n        radio.sendString(\"two\")\n    } else if (minutes === 3) {\n        radio.sendString(\"three\")\n    } else if (minutes === 4) {\n        radio.sendString(\"four\")\n    }\n}\n\n// Monitor joystick:bit buttons for minute selection\ninput.onPinPressed(TouchPin.P12, function () {\n    setMinutes(1) // Button C\n})\ninput.onPinPressed(TouchPin.P13, function () {\n    setMinutes(2) // Button D\n})\ninput.onPinPressed(TouchPin.P14, function () {\n    setMinutes(3) // Button E\n})\ninput.onPinPressed(TouchPin.P15, function () {\n    setMinutes(4) // Button F\n})\n\n// Monitor Button B for \"Start\"\ninput.onButtonPressed(Button.B, function () {\n    if (selectedMinutes > 0) {\n        radio.sendString(\"Start\") // Send \"Start\" string\n        basic.showString(\"S\") // Show \"S\" on the LED grid\n        vibrate() // Trigger vibration feedback\n    }\n})\n\n// Monitor Button A for \"Reset\"\ninput.onButtonPressed(Button.A, function () {\n    radio.sendString(\"Reset\") // Send \"Reset\" string\n    basic.showString(\"R\") // Show \"R\" on the LED grid\n    vibrate() // Trigger vibration feedback\n})\n\n// Display happy face on reset or restart\ninput.onLogoEvent(TouchButtonEvent.Pressed, function () {\n    basic.showIcon(IconNames.Happy)\n})\n"]],"start1":0,"start2":0,"length1":2084,"length2":0}]}]},{"timestamp":1732469714911,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ause(100"],[-1,"0"],[0,") // Vib"]],"start1":408,"start2":408,"length1":17,"length2":16},{"diffs":[[0,"or 1"],[-1," second"],[1,"00ms"],[0,"\n   "]],"start1":430,"start2":430,"length1":15,"length2":12},{"diffs":[[0,"e\")\n"],[-1,"        serial.writeLine(\"Sent: one\") // Debugging\n"],[0,"    "]],"start1":848,"start2":848,"length1":59,"length2":8},{"diffs":[[0,"o\")\n"],[-1,"        serial.writeLine(\"Sent: two\") // Debugging\n"],[0,"    "]],"start1":912,"start2":912,"length1":59,"length2":8},{"diffs":[[0,"e\")\n"],[-1,"        serial.writeLine(\"Sent: three\") // Debugging\n"],[0,"    "]],"start1":978,"start2":978,"length1":61,"length2":8},{"diffs":[[0,"r\")\n"],[-1,"        serial.writeLine(\"Sent: four\") // Debugging\n"],[0,"    "]],"start1":1043,"start2":1043,"length1":60,"length2":8},{"diffs":[[0,"ion\n"],[-1,"p"],[0,"in"],[-1,"s"],[1,"put"],[0,".onP"],[-1,"ulsed(DigitalPin.P12, PulseValue.Low"],[1,"inPressed(TouchPin.P12"],[0,", fu"]],"start1":1105,"start2":1105,"length1":52,"length2":39},{"diffs":[[0,"n C\n"],[-1,"    serial.writeLine(\"Button C p"],[1,"})\ninput.onPinP"],[0,"ressed"],[-1,"\") // Debugging\n})\npins.onPulsed(DigitalPin.P13, PulseValue.Low"],[1,"(TouchPin.P13"],[0,", fu"]],"start1":1182,"start2":1182,"length1":109,"length2":42},{"diffs":[[0,"n D\n"],[-1,"    serial.writeLine(\"Button D p"],[1,"})\ninput.onPinP"],[0,"ressed"],[-1,"\") // Debugging\n})\npins.onPulsed(DigitalPin.P14, PulseValue.Low"],[1,"(TouchPin.P14"],[0,", fu"]],"start1":1262,"start2":1262,"length1":109,"length2":42},{"diffs":[[0,"n E\n"],[-1,"    serial.writeLine(\"Button E p"],[1,"})\ninput.onPinP"],[0,"ressed"],[-1,"\") // Debugging\n})\npins.onPulsed(DigitalPin.P15, PulseValue.Low, function () {\n    setMinutes(4) // Button F\n    serial.writeLine(\"Button F pressed\") // Debugging"],[1,"(TouchPin.P15, function () {\n    setMinutes(4) // Button F"],[0,"\n})\n"]],"start1":1342,"start2":1342,"length1":208,"length2":87},{"diffs":[[0,"ack\n"],[-1,"        serial.writeLine(\"Button B pressed - Sent Start\") // Debugging\n    } else {\n        serial.writeLine(\"Button B pressed - No minutes selected\") // Debugging\n"],[0,"    "]],"start1":1698,"start2":1698,"length1":172,"length2":8},{"diffs":[[0,"ack\n"],[-1,"    serial.writeLine(\"Button A pressed - Sent Reset\") // Debugging\n"],[0,"})\n\n"]],"start1":1937,"start2":1937,"length1":75,"length2":8}]}]},{"timestamp":1732469958587,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"e group\n"],[1,"let vibrationPin = DigitalPin.P16 // Vibration motor connected to P16\n"],[0,"let sele"]],"start1":55,"start2":55,"length1":16,"length2":86},{"diffs":[[0," to "],[-1,"display a character on the LED grid\nfunction displayCha"],[1,"activate vibration motor briefly\nfunction vib"],[0,"ra"],[-1,"c"],[0,"te"],[-1,"r(char: string) {\n    basic.clearScreen()\n    basic.showString(char) // Show the character\n}\n\n// Monitor Button A for \"Reset\"\n"],[1,"() {\n    pins.digitalWritePin(vibrationPin, 1) // Turn on vibration\n    basic.pause(1000) // Vibrate for 1 second\n    pins.digitalWritePin(vibrationPin, 0) // Turn off vibration\n}\n\n// Function to handle m"],[0,"in"],[-1,"p"],[0,"ut"],[-1,".onButtonPressed(Button.A, function () {\n    displayCharacter(\"R\") // Display \"R\" on the LED grid\n    radio.sendString(\"Reset\") // Send \"Reset\" string\n})\n\n// Monitor Button B for \"Start\"\ninput.onButtonPressed(Button.B, function () {\n    if (selectedM"],[1,"e selection\nfunction setMinutes(minutes: number) {\n    selectedMinutes = minutes\n    basic.showNumber(minutes) // Show the selected number on the LED grid\n    vibrate() // Trigger vibration feedback\n    // Send the corresponding string to the receiver micro:bit\n    if (minutes === 1) {\n        radio.sendString(\"one\")\n        serial.writeLine(\"Sent: one\") // Debugging\n    } else if (minutes === 2) {\n        radio.sendString(\"two\")\n        serial.writeLine(\"Sent: two\") // Debugging\n    } else if (m"],[0,"inutes "],[-1,"> 0"],[1,"=== 3"],[0,") {\n"]],"start1":276,"start2":276,"length1":459,"length2":778},{"diffs":[[0,"    "],[-1,"displayCharacter(\"S\") // Display \"S\" on the LED grid\n        radio.sendString(\"Start\") // Send \"Start\" str"],[1,"radio.sendString(\"three\")\n        serial.writeLine(\"Sent: three\") // Debugging\n    } else if (minutes === 4) {\n        radio.sendString(\"four\")\n        serial.writeLine(\"Sent: four\") // Debugg"],[0,"ing\n"]],"start1":1058,"start2":1058,"length1":114,"length2":200},{"diffs":[[0,"\n    }\n}"],[-1,")"],[0,"\n\n// Mon"]],"start1":1257,"start2":1257,"length1":17,"length2":16},{"diffs":[[0,"  se"],[-1,"lected"],[1,"t"],[0,"Minutes"],[-1," = 1 // Set minutes to 1\n    displayCharacter(\"1\") // Display \"1\" on the LED grid\n    radio.sendString(\"one\") // Send \"one\" str"],[1,"(1) // Button C\n    serial.writeLine(\"Button C pressed\") // Debugging\n})\npins.onPulsed(DigitalPin.P13, PulseValue.Low, function () {\n    setMinutes(2) // Button D\n    serial.writeLine(\"Button D pressed\") // Debugg"],[0,"ing\n"]],"start1":1382,"start2":1382,"length1":148,"length2":229},{"diffs":[[0,"ed(DigitalPin.P1"],[-1,"3"],[1,"4"],[0,", PulseValue.Low"]],"start1":1625,"start2":1625,"length1":33,"length2":33},{"diffs":[[0,"  se"],[-1,"lected"],[1,"t"],[0,"Minutes"],[-1," = 2 // Set minutes to 2\n    displayCharacter(\"2\") // Display \"2\" on the LED grid\n    radio.sendString(\"two\") // Send \"two\" str"],[1,"(3) // Button E\n    serial.writeLine(\"Button E pressed\") // Debugg"],[0,"ing\n"]],"start1":1676,"start2":1676,"length1":148,"length2":82},{"diffs":[[0,"ed(DigitalPin.P1"],[-1,"4"],[1,"5"],[0,", PulseValue.Low"]],"start1":1772,"start2":1772,"length1":33,"length2":33},{"diffs":[[0,"  se"],[-1,"lected"],[1,"t"],[0,"Minutes"],[-1," = 3 // Set m"],[1,"(4) // Button F\n    serial.writeLine(\"Button F pressed\") // Debugging\n})\n\n// Monitor Button B for \"Start\"\n"],[0,"in"],[1,"p"],[0,"ut"],[-1,"es to 3\n    displayCharacter(\"3"],[1,".onButtonPressed(Button.B, function () {\n    if (selectedMinutes > 0) {\n        radio.sendString(\"Start\") // Send \"Start\" string\n        basic.showString(\"S"],[0,"\") // "],[-1,"Display \"3"],[1,"Show \"S"],[0,"\" on"]],"start1":1823,"start2":1823,"length1":85,"length2":296},{"diffs":[[0,"    "],[-1,"radio.sendString(\"three\") // Send \"three\" string\n})\npins.onPulsed(DigitalPin.P15, PulseValue.Low, function () {\n    selectedMinutes = 4 // Set minutes to 4\n    displayCharacter(\"4"],[1,"    vibrate() // Trigger vibration feedback\n        serial.writeLine(\"Button B pressed - Sent Start\") // Debugging\n    } else {\n        serial.writeLine(\"Button B pressed - No minutes selected\") // Debugging\n    }\n})\n\n// Monitor Button A for \"Reset\"\ninput.onButtonPressed(Button.A, function () {\n    radio.sendString(\"Reset\") // Send \"Reset\" string\n    basic.showString(\"R"],[0,"\") // "],[-1,"Display \"4"],[1,"Show \"R"],[0,"\" on"]],"start1":2133,"start2":2133,"length1":203,"length2":393},{"diffs":[[0,"    "],[-1,"radio.sendString(\"four\") // Send \"four\" str"],[1,"vibrate() // Trigger vibration feedback\n    serial.writeLine(\"Button A pressed - Sent Reset\") // Debugg"],[0,"ing\n"]],"start1":2540,"start2":2540,"length1":51,"length2":111}]}]},{"timestamp":1732470433710,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"es\n\n"],[-1,"// Button state tracking\nlet wasCPressed = false\nlet wasDPressed = false\nlet wasEPressed = false\nlet wasFPressed = false\n\n// Enable pull-up resistors for side buttons\npins.setPull(DigitalPin.P12, PinPullMode.PullUp)\npins.setPull(DigitalPin.P13, PinPullMode.PullUp)\npins.setPull(DigitalPin.P14, PinPullMode.PullUp)\npins.setPull(DigitalPin.P15, PinPullMode.PullUp)\n\n"],[0,"// D"]],"start1":125,"start2":125,"length1":372,"length2":8},{"diffs":[[0,"startup\n"],[1,""],[0,"basic.sh"]],"start1":154,"start2":154,"length1":16,"length2":16},{"diffs":[[0,"\n// "],[-1,"Continuously monitor side buttons for state changes\nbasic.forever(function () {\n    // Check Button C (P12)\n    if (pins.digitalReadPin(DigitalPin.P12) == 0) {\n        if (!wasCPressed) {\n            // Button was not previously pressed\n        "],[1,"Monitor joystick:bit buttons for minute selection\npins.onPulsed(DigitalPin.P12, PulseValue.Low, function () {\n"],[0,"    "]],"start1":792,"start2":792,"length1":253,"length2":118},{"diffs":[[0,"es to 1\n"],[-1,"        "],[0,"    disp"]],"start1":942,"start2":942,"length1":24,"length2":16},{"diffs":[[0,"he LED grid\n"],[-1,"        "],[0,"    radio.se"]],"start1":995,"start2":995,"length1":32,"length2":24},{"diffs":[[0,"ing\n"],[-1,"            wasCPressed = true // Mark as pressed\n        }\n    } else {\n        wasCPressed = false // Reset state when button is released\n    }\n\n    // Check Button D (P13)\n    if (pins.digitalReadPin(DigitalPin.P13) == 0) {\n        if (!wasDPressed) {\n        "],[1,"})\npins.onPulsed(DigitalPin.P13, PulseValue.Low, function () {\n"],[0,"    "]],"start1":1052,"start2":1052,"length1":271,"length2":71},{"diffs":[[0,"es to 2\n"],[-1,"        "],[0,"    disp"]],"start1":1155,"start2":1155,"length1":24,"length2":16},{"diffs":[[0,"he LED grid\n"],[-1,"        "],[0,"    radio.se"]],"start1":1208,"start2":1208,"length1":32,"length2":24},{"diffs":[[0,"ing\n"],[-1,"            wasDPressed = true\n        }\n    } else {\n        wasDPressed = false // Reset state when button is released\n    }\n\n    // Check Button E (P14)\n    if (pins.digitalReadPin(DigitalPin.P14) == 0) {\n        if (!wasEPressed) {\n        "],[1,"})\npins.onPulsed(DigitalPin.P14, PulseValue.Low, function () {\n"],[0,"    "]],"start1":1265,"start2":1265,"length1":252,"length2":71},{"diffs":[[0,"es to 3\n"],[-1,"        "],[0,"    disp"]],"start1":1368,"start2":1368,"length1":24,"length2":16},{"diffs":[[0,"he LED grid\n"],[-1,"        "],[0,"    radio.se"]],"start1":1421,"start2":1421,"length1":32,"length2":24},{"diffs":[[0,"ing\n"],[-1,"            wasEPressed = true\n        }\n    } else {\n        wasEPressed = false // Reset state when button is released\n    }\n\n    // Check Button F (P15)\n    if (pins.digitalReadPin(DigitalPin.P15) == 0) {\n        if (!wasFPressed) {\n        "],[1,"})\npins.onPulsed(DigitalPin.P15, PulseValue.Low, function () {\n"],[0,"    "]],"start1":1482,"start2":1482,"length1":252,"length2":71},{"diffs":[[0,"es to 4\n"],[-1,"        "],[0,"    disp"]],"start1":1585,"start2":1585,"length1":24,"length2":16},{"diffs":[[0,"ED grid\n"],[-1,"        "],[0,"    radi"]],"start1":1642,"start2":1642,"length1":24,"length2":16},{"diffs":[[0,"ing\n"],[-1,"            wasFPressed = true\n        }\n    } else {\n        wasFPressed = false // Reset state when button is released\n    }\n"],[0,"})\n\n"]],"start1":1697,"start2":1697,"length1":135,"length2":8}]}]},{"timestamp":1732470903717,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"nutes = "],[-1,"4"],[1,"2"],[0," // Set "]],"start1":1848,"start2":1848,"length1":17,"length2":17},{"diffs":[[0," to "],[-1,"4 (swapped)"],[1,"2"],[0,"\n   "]],"start1":1872,"start2":1872,"length1":19,"length2":9},{"diffs":[[0,"racter(\""],[-1,"4"],[1,"2"],[0,"\") // Di"]],"start1":1900,"start2":1900,"length1":17,"length2":17},{"diffs":[[0,"isplay \""],[-1,"4"],[1,"2"],[0,"\" on the"]],"start1":1916,"start2":1916,"length1":17,"length2":17},{"diffs":[[0,"String(\""],[-1,"four"],[1,"two"],[0,"\") // Se"]],"start1":1965,"start2":1965,"length1":20,"length2":19},{"diffs":[[0,"nd \""],[-1,"four"],[1,"two"],[0,"\" st"]],"start1":1984,"start2":1984,"length1":12,"length2":11},{"diffs":[[0,"to 3"],[-1," (swapped)"],[0,"\n   "]],"start1":2283,"start2":2283,"length1":18,"length2":8},{"diffs":[[0,"lectedMinutes = "],[-1,"2"],[1,"4"],[0," // Set minutes "]],"start1":2664,"start2":2664,"length1":33,"length2":33},{"diffs":[[0," Set minutes to "],[-1,"2"],[1,"4"],[0,"\n            dis"]],"start1":2684,"start2":2684,"length1":33,"length2":33},{"diffs":[[0,"splayCharacter(\""],[-1,"2"],[1,"4"],[0,"\") // Display \"2"]],"start1":2716,"start2":2716,"length1":33,"length2":33},{"diffs":[[0,"4\") // Display \""],[-1,"2"],[1,"4"],[0,"\" on the LED gri"]],"start1":2732,"start2":2732,"length1":33,"length2":33},{"diffs":[[0,"dio.sendString(\""],[-1,"two"],[1,"four"],[0,"\") // Send \"two\""]],"start1":2781,"start2":2781,"length1":35,"length2":36},{"diffs":[[0,"four\") // Send \""],[-1,"two"],[1,"four"],[0,"\" string\n       "]],"start1":2797,"start2":2797,"length1":35,"length2":36}]}]},{"timestamp":1732471467467,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"utes"],[-1,"\nlet vibrationPin = DigitalPin.P16 // Vibration motor connected to P16"],[0,"\n\n//"]],"start1":123,"start2":123,"length1":78,"length2":8},{"diffs":[[0,"\n}\n\n"],[-1,"// Function to activate vibration motor briefly\nfunction vibrate() {\n    pins.digitalWritePin(vibrationPin, 1) // Turn on vibration\n    basic.pause(100) // Vibrate for 100ms\n    pins.digitalWritePin(vibrationPin, 0) // Turn off vibration\n}\n\n"],[0,"// M"]],"start1":724,"start2":724,"length1":249,"length2":8},{"diffs":[[0,"ing\n"],[-1,"    vibrate() // Trigger vibration\n"],[0,"})\n\n"]],"start1":912,"start2":912,"length1":43,"length2":8},{"diffs":[[0,"ing\n"],[-1,"        vibrate() // Trigger vibration\n"],[0,"    "]],"start1":1143,"start2":1143,"length1":47,"length2":8},{"diffs":[[0,"== 0"],[-1," && !wasCPressed) {\n"],[1,") {\n        if (!wasCPressed) {\n            // Button was not previously pressed\n    "],[0,"    "]],"start1":1312,"start2":1312,"length1":28,"length2":93},{"diffs":[[0,"nutes = "],[-1,"4"],[1,"1"],[0," // Set "]],"start1":1419,"start2":1419,"length1":17,"length2":17},{"diffs":[[0," to "],[-1,"4\n"],[1,"1\n    "],[0,"    "]],"start1":1443,"start2":1443,"length1":10,"length2":14},{"diffs":[[0,"racter(\""],[-1,"4"],[1,"1"],[0,"\") // Di"]],"start1":1471,"start2":1471,"length1":17,"length2":17},{"diffs":[[0,"isplay \""],[-1,"4"],[1,"1"],[0,"\" on the"]],"start1":1487,"start2":1487,"length1":17,"length2":17},{"diffs":[[0,"ED grid\n        "],[1,"  "],[1,"  "],[0,"radio.sendString"]],"start1":1506,"start2":1506,"length1":32,"length2":36},{"diffs":[[0,"String(\""],[-1,"four"],[1,"one"],[0,"\") // Se"]],"start1":1536,"start2":1536,"length1":20,"length2":19},{"diffs":[[0,"nd \""],[-1,"four"],[1,"one"],[0,"\" st"]],"start1":1555,"start2":1555,"length1":12,"length2":11},{"diffs":[[0,"    "],[-1,"    vibrate() // Trigger vibration\n"],[0,"    "]],"start1":1571,"start2":1571,"length1":43,"length2":8},{"diffs":[[0,"    "],[-1,"} else if (pins.digitalReadPin(DigitalPin.P12) == 1)"],[1,"    }\n    } else"],[0," {\n "]],"start1":1621,"start2":1621,"length1":60,"length2":24},{"diffs":[[0,"ton "],[-1,"F"],[1,"D"],[0," (P1"],[-1,"5"],[1,"3"],[0,")\n  "]],"start1":1734,"start2":1734,"length1":14,"length2":14},{"diffs":[[0,"n.P1"],[-1,"5"],[1,"3"],[0,") == 0"],[-1," && "],[1,") {\n        if ("],[0,"!was"],[-1,"F"],[1,"D"],[0,"Pres"]],"start1":1783,"start2":1783,"length1":24,"length2":36},{"diffs":[[0,"!wasDPressed) {\n"],[1,"    "],[0,"        selected"]],"start1":1810,"start2":1810,"length1":32,"length2":36},{"diffs":[[0,"nutes = "],[-1,"2"],[1,"4"],[0," // Set "]],"start1":1848,"start2":1848,"length1":17,"length2":17},{"diffs":[[0," to "],[-1,"2\n"],[1,"4 (swapped)\n    "],[0,"    "]],"start1":1872,"start2":1872,"length1":10,"length2":24},{"diffs":[[0,"racter(\""],[-1,"2"],[1,"4"],[0,"\") // Di"]],"start1":1910,"start2":1910,"length1":17,"length2":17},{"diffs":[[0,"isplay \""],[-1,"2"],[1,"4"],[0,"\" on the"]],"start1":1926,"start2":1926,"length1":17,"length2":17},{"diffs":[[0,"on the LED grid\n"],[1,"    "],[0,"        radio.se"]],"start1":1937,"start2":1937,"length1":32,"length2":36},{"diffs":[[0,"String(\""],[-1,"two"],[1,"four"],[0,"\") // Se"]],"start1":1975,"start2":1975,"length1":19,"length2":20},{"diffs":[[0,"nd \""],[-1,"two"],[1,"four"],[0,"\" st"]],"start1":1995,"start2":1995,"length1":11,"length2":12},{"diffs":[[0,"    "],[-1,"    vibrate() // Trigger vibration\n"],[0,"    "]],"start1":2012,"start2":2012,"length1":43,"length2":8},{"diffs":[[0,"\n            was"],[-1,"F"],[1,"D"],[0,"Pressed = true\n "]],"start1":2011,"start2":2011,"length1":33,"length2":33},{"diffs":[[0,"    "],[-1,"} else if (pins.digitalReadPin(DigitalPin.P15) == 1)"],[1,"    }\n    } else"],[0," {\n "]],"start1":2043,"start2":2043,"length1":60,"length2":24},{"diffs":[[0,"\n        was"],[-1,"F"],[1,"D"],[0,"Pressed = fa"]],"start1":2065,"start2":2065,"length1":25,"length2":25},{"diffs":[[0,"in.P14) == 0"],[-1," && "],[1,") {\n        if ("],[0,"!wasEPressed"]],"start1":2204,"start2":2204,"length1":28,"length2":40},{"diffs":[[0,"!wasEPressed) {\n"],[1,"    "],[0,"        selected"]],"start1":2232,"start2":2232,"length1":32,"length2":36},{"diffs":[[0,"tes to 3"],[-1,"\n"],[1," (swapped)\n    "],[0,"        "]],"start1":2291,"start2":2291,"length1":17,"length2":31},{"diffs":[[0,"ED grid\n        "],[1," "],[1,"   "],[0,"radio.sendString"]],"start1":2367,"start2":2367,"length1":32,"length2":36},{"diffs":[[0,"    "],[-1,"vibrate() // Trigger vibration\n        wasEPressed = true\n    } else if (pins.digitalReadPin(DigitalPin.P14) == 1)"],[1,"    wasEPressed = true\n        }\n    } else"],[0," {\n "]],"start1":2440,"start2":2440,"length1":122,"length2":51},{"diffs":[[0,"// Check Button "],[-1,"D"],[1,"F"],[0," (P1"],[-1,"3"],[1,"5"],[0,")\n    if (pins.d"]],"start1":2568,"start2":2568,"length1":38,"length2":38},{"diffs":[[0,"n.P1"],[-1,"3"],[1,"5"],[0,") == 0"],[-1," && "],[1,") {\n        if ("],[0,"!was"],[-1,"D"],[1,"F"],[0,"Pres"]],"start1":2629,"start2":2629,"length1":24,"length2":36},{"diffs":[[0,"ssed) {\n        "],[1,"   "],[1," "],[0,"selectedMinutes "]],"start1":2664,"start2":2664,"length1":32,"length2":36},{"diffs":[[0,"lectedMinutes = "],[-1,"1"],[1,"2"],[0," // Set minutes "]],"start1":2686,"start2":2686,"length1":33,"length2":33},{"diffs":[[0," Set minutes to "],[-1,"1\n"],[1,"2\n    "],[0,"        displayC"]],"start1":2706,"start2":2706,"length1":34,"length2":38},{"diffs":[[0,"splayCharacter(\""],[-1,"1"],[1,"2"],[0,"\") // Display \"1"]],"start1":2738,"start2":2738,"length1":33,"length2":33},{"diffs":[[0,"2\") // Display \""],[-1,"1"],[1,"2"],[0,"\" on the LED gri"]],"start1":2754,"start2":2754,"length1":33,"length2":33},{"diffs":[[0,"ED grid\n        "],[1," "],[1,"   "],[0,"radio.sendString"]],"start1":2781,"start2":2781,"length1":32,"length2":36},{"diffs":[[0,"dio.sendString(\""],[-1,"one"],[1,"two"],[0,"\") // Send \"one\""]],"start1":2803,"start2":2803,"length1":35,"length2":35},{"diffs":[[0,"\"two\") // Send \""],[-1,"one"],[1,"two"],[0,"\" string\n       "]],"start1":2818,"start2":2818,"length1":35,"length2":35},{"diffs":[[0,"    "],[-1,"    vibrate() // Trigger vibration\n"],[0,"    "]],"start1":2846,"start2":2846,"length1":43,"length2":8},{"diffs":[[0,"\n            was"],[-1,"D"],[1,"F"],[0,"Pressed = true\n "]],"start1":2845,"start2":2845,"length1":33,"length2":33},{"diffs":[[0,"ssed = true\n"],[1,"        }\n"],[0,"    } else i"]],"start1":2865,"start2":2865,"length1":24,"length2":34},{"diffs":[[0,"else"],[-1," if (pins.digitalReadPin(DigitalPin.P13) == 1)"],[0," {\n "]],"start1":2893,"start2":2893,"length1":54,"length2":8},{"diffs":[[0,"se {\n        was"],[-1,"D"],[1,"F"],[0,"Pressed = false "]],"start1":2895,"start2":2895,"length1":33,"length2":33}]}]},{"timestamp":1732471966803,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"to P16\n\n"],[1,"// Button state tracking\nlet wasCPressed = false\nlet wasDPressed = false\nlet wasEPressed = false\nlet wasFPressed = false\n\n"],[0,"// Enabl"]],"start1":191,"start2":191,"length1":16,"length2":138},{"diffs":[[0,"tion to "],[-1,"handl"],[1,"display a character on the LED grid\nfunction displayCharacter(char: string) {\n    basic.clearScreen()\n    basic.showString(char) // Show the character\n}\n\n// Function to activat"],[0,"e vibrat"]],"start1":636,"start2":636,"length1":21,"length2":192},{"diffs":[[0,"on motor"],[1," briefly"],[0,"\nfunctio"]],"start1":829,"start2":829,"length1":16,"length2":24},{"diffs":[[0,"ion\n"],[-1,"    control.inBackground(function () {\n    "],[0,"    "]],"start1":926,"start2":926,"length1":51,"length2":8},{"diffs":[[0,"e for 100ms\n"],[-1,"    "],[0,"    pins.dig"]],"start1":960,"start2":960,"length1":28,"length2":24},{"diffs":[[0,"ion\n"],[-1,"    })\n}\n\n// Function to handle button presses\nfunction handleButton(pin: DigitalPin, minutes: number, label: string) {\n    if (pins.digitalReadPin(pin) == 0"],[1,"}\n\n// Monitor Button A for \"Reset\"\ninput.onButtonPressed(Button.A, function () {\n    displayCharacter(\"R\") // Display \"R\" on the LED grid\n    radio.sendString(\"Reset\") // Send \"Reset\" string\n    vibrate() // Trigger vibration\n})\n\n// Monitor Button B for \"Start\"\ninput.onButtonPressed(Button.B, function () {\n    if (selectedMinutes > 0) {\n        displayCharacter(\"S\") // Display \"S\" on the LED grid\n        radio.sendString(\"Start\") // Send \"Start\" string\n        vibrate() // Trigger vibration\n    }\n})\n\n// Continuously monitor side buttons for state changes\nbasic.forever(function () {\n    // Check Button C (P12)\n    if (pins.digitalReadPin(DigitalPin.P12) == 0 && !wasCPressed"],[0,") {\n"]],"start1":1032,"start2":1032,"length1":165,"length2":689},{"diffs":[[0,"nutes = "],[-1,"minutes"],[1,"4"],[0," // Set "]],"start1":1739,"start2":1739,"length1":23,"length2":17},{"diffs":[[0," minutes"],[1," to 4"],[0,"\n       "]],"start1":1755,"start2":1755,"length1":16,"length2":21},{"diffs":[[0,"aracter("],[-1,"label"],[1,"\"4\""],[0,") // Dis"]],"start1":1786,"start2":1786,"length1":21,"length2":19},{"diffs":[[0,"lay "],[-1,"the label"],[1,"\"4\" on the LED grid"],[0,"\n   "]],"start1":1806,"start2":1806,"length1":17,"length2":27},{"diffs":[[0,"ing("],[-1,"label.toLowerCase()) // Send the corresponding"],[1,"\"four\") // Send \"four\""],[0," str"]],"start1":1851,"start2":1851,"length1":54,"length2":30},{"diffs":[[0,"    "],[-1,"basic.pause(300) // Debounce delay\n        while"],[1,"wasCPressed = true // Mark as pressed\n    } else if"],[0," (pi"]],"start1":1928,"start2":1928,"length1":56,"length2":59},{"diffs":[[0,"Pin("],[-1,"pin"],[1,"DigitalPin.P12"],[0,") == "],[-1,"0"],[1,"1"],[0,") {\n"]],"start1":2001,"start2":2001,"length1":17,"length2":28},{"diffs":[[0,"    "],[-1,"    // Wait for"],[1,"wasCPressed = false // Reset state when"],[0," button "],[1,"is "],[0,"release"],[1,"d"],[0,"\n    "],[-1,"    }\n    }\n}\n\n// Function to display a character on the LED grid\nfunction displayCharacter(char: string) {\n    basic.clearScreen()\n    basic.showString(char) // Show the character\n}\n\n// Monitor Button A for \"Reset\"\ninput.onButtonPressed(Button.A, function () {\n"],[1,"}\n\n    // Check Button F (P15)\n    if (pins.digitalReadPin(DigitalPin.P15) == 0 && !wasFPressed) {\n        selectedMinutes = 2 // Set minutes to 2\n    "],[0,"    "]],"start1":2033,"start2":2033,"length1":305,"length2":222},{"diffs":[[0,"splayCharacter(\""],[-1,"R"],[1,"2"],[0,"\") // Display \"R"]],"start1":2257,"start2":2257,"length1":33,"length2":33},{"diffs":[[0,"2\") // Display \""],[-1,"R"],[1,"2"],[0,"\" on the LED gri"]],"start1":2273,"start2":2273,"length1":33,"length2":33},{"diffs":[[0,"he LED grid\n    "],[1,"    "],[0,"radio.sendString"]],"start1":2296,"start2":2296,"length1":32,"length2":36},{"diffs":[[0,"dio.sendString(\""],[-1,"Reset"],[1,"two"],[0,"\") // Send \"Rese"]],"start1":2318,"start2":2318,"length1":37,"length2":35},{"diffs":[[0,"\"two\") // Send \""],[-1,"Reset"],[1,"two"],[0,"\" string\n    vib"]],"start1":2333,"start2":2333,"length1":37,"length2":35},{"diffs":[[0,"nd \"two\" string\n"],[1,"    "],[0,"    vibrate() //"]],"start1":2345,"start2":2345,"length1":32,"length2":36},{"diffs":[[0,"ion\n"],[-1,"})\n\n// Monitor Button B for \"Start\"\ninput.onButtonPressed(Button.B, function ("],[1,"        wasFPressed = true\n    } else if (pins.digitalReadPin(DigitalPin.P15) == 1) {\n        wasFPressed = false // Reset state when button is released\n    }\n\n    // Check Button E (P14)\n    if (pins.digitalReadPin(DigitalPin.P14) == 0 && !wasEPressed"],[0,") {\n    "],[-1,"if ("],[1,"    "],[0,"sele"]],"start1":2396,"start2":2396,"length1":98,"length2":272},{"diffs":[[0,"selectedMinutes "],[-1,"> 0) {"],[1,"= 3 // Set minutes to 3"],[0,"\n        display"]],"start1":2664,"start2":2664,"length1":38,"length2":55},{"diffs":[[0,"splayCharacter(\""],[-1,"S"],[1,"3"],[0,"\") // Display \"S"]],"start1":2714,"start2":2714,"length1":33,"length2":33},{"diffs":[[0,"3\") // Display \""],[-1,"S"],[1,"3"],[0,"\" on the LED gri"]],"start1":2730,"start2":2730,"length1":33,"length2":33},{"diffs":[[0,"dio.sendString(\""],[-1,"Start"],[1,"three"],[0,"\") // Send \"Star"]],"start1":2775,"start2":2775,"length1":37,"length2":37},{"diffs":[[0,"hree\") // Send \""],[-1,"Start"],[1,"three"],[0,"\" string\n       "]],"start1":2792,"start2":2792,"length1":37,"length2":37},{"diffs":[[0,"    "],[-1,"}\n})\n\n// Continuously monitor side buttons for state changes\nbasic.forever(function () {\n    handleButton(DigitalPin.P12, 4, \"4\") // Button C\n    handleButton(DigitalPin.P15, 2, \"2\") // Button F\n    handleButton(DigitalPin.P14, 3, \"3\") // Button E\n    handleButton(DigitalPin.P13, 1, \"1\") // Button D\n})\n\n// Safeguard loop to ensure vibration motor turns off\nbasic.forever(function () {\n   "],[1,"    wasEPressed = true\n    } else if (pins.digitalReadPin(DigitalPin.P14) == 1) {\n        wasEPressed = false // Reset state when button is released\n    }\n\n    // Check Button D (P13)\n    if (pins.digitalReadPin(DigitalPin.P13) == 0 && !wasDPressed) {\n        selectedMinutes = 1 // Set minutes to 1\n        displayCharacter(\"1\") // Display \"1\" on the LED grid\n        radio.sendString(\"one\") // Send \"one\" string\n        vibrate() // Trigger vibration\n        wasDPressed = true\n    } else"],[0," if "]],"start1":2861,"start2":2861,"length1":398,"length2":498},{"diffs":[[0,"ReadPin("],[-1,"vibrationPin"],[1,"DigitalPin.P13"],[0,") == 1) "]],"start1":3372,"start2":3372,"length1":28,"length2":30},{"diffs":[[0,"    "],[-1,"basic.pause(100) // Wait 100ms\n        pins.digitalWritePin(vibrationPin, 0) // Ensure motor is off"],[1,"wasDPressed = false // Reset state when button is released"],[0,"\n   "]],"start1":3408,"start2":3408,"length1":107,"length2":66}]}]},{"timestamp":1732472521085,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," to "],[-1,"activat"],[1,"handl"],[0,"e vi"]],"start1":518,"start2":518,"length1":15,"length2":13},{"diffs":[[0,"otor"],[-1," briefly"],[0,"\nfun"]],"start1":540,"start2":540,"length1":16,"length2":8},{"diffs":[[0,"n vibration\n"],[1,"    control.inBackground(function () {\n    "],[0,"    basic.pa"]],"start1":617,"start2":617,"length1":24,"length2":67},{"diffs":[[0,"r 100ms\n"],[1,"    "],[0,"    pins"]],"start1":706,"start2":706,"length1":16,"length2":20},{"diffs":[[0,"bration\n"],[1,"    })\n"],[0,"}\n\n// Fu"]],"start1":774,"start2":774,"length1":16,"length2":23},{"diffs":[[0,"n D\n})\n\n"],[1,"// Safeguard loop to ensure vibration motor turns off\nbasic.forever(function () {\n    if (pins.digitalReadPin(vibrationPin) == 1) {\n        basic.pause(100) // Wait 100ms\n        pins.digitalWritePin(vibrationPin, 0) // Ensure motor is off\n    }\n})\n\n"],[0,"// Displ"]],"start1":2275,"start2":2275,"length1":16,"length2":266}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"joystickbit\": \"github:tinkertanker/pxt-joystickbit#v1.0.4\""],[0,"\n   "]],"start1":154,"start2":154,"length1":77,"length2":8}]}]},{"timestamp":1732473359384,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"es><"],[-1,"variable id=\"pt)dP)Wq)@{$UC5Mn(QA\">vibrationPin</variable><variable id=\".}Wnm3$E9wp8pSo]u|zk\">selectedMinutes</variable></variables><block type=\"function_definition\" x=\"10\" y=\"10\"><mutation name=\"vibrate\" functionid=\"WC7?GsSHzCX#MPUKo(6d\"></mutation><field name=\"function_name\">vibrate</field><comment pinned=\"false\" h=\"80\" w=\"160\">Function to activate vibration motor briefly</comment><statement name=\"STACK\"><block type=\"device_set_digital_pin\"><comment pinned=\"false\" h=\"80\" w=\"160\">Turn on vibration</comment><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"pt)dP)Wq)@{$UC5Mn(QA\">vibrationPin</field></block></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"device_pause\"><comment pinned=\"false\" h=\"80\" w=\"160\">Vibrate for 100ms</comment><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_set_digital_pin\"><comment pinned=\"false\" h=\"80\" w=\"160\">Turn off vibration</comment><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"pt)dP)Wq)@{$UC5Mn(QA\">vibrationPin</field></block></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">0</field></shadow></value></block></next></block></next></block></statement></block><block type=\"function_definition\" x=\"10\" y=\"10\"><mutation name=\"displayCharacter\" functionid=\"#0QG79}+tZCZTk}H/=55\"><arg name=\"char\" id=\"5tmdwl1oofwrk7henf2\" type=\"string\"></arg></mutation><field name=\"function_name\">displayCharacter</field><comment pinned=\"false\" h=\"80\" w=\"160\">Function to display a character on the LED grid</comment><value name=\"5tmdwl1oofwrk7henf2\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">char</field></block></value><statement name=\"STACK\"><block type=\"device_clear_display\"><next><block type=\"device_print_message\"><comment pinned=\"false\" h=\"80\" w=\"160\">Show the character</comment><value name=\"text\"><block type=\"argument_reporter_string\"><field name=\"VALUE\">char</field></block></value></block></next></block></statement></block><block type=\"device_button_event\" x=\"10\" y=\"10\"><field name=\"NAME\">Button.A</field><comment pinned=\"false\" h=\"80\" w=\"160\">Monitor Button A for \"Reset\"</comment><statement name=\"HANDLER\"><block type=\"function_call\"><mutation name=\"displayCharacter\" functionid=\"#0QG79}+tZCZTk}H/=55\"><arg name=\"char\" id=\"5tmdwl1oofwrk7henf2\" type=\"string\"></arg></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Display \"R\" on the LED grid</comment><value name=\"5tmdwl1oofwrk7henf2\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><next><block type=\"radio_datagram_send_string\"><comment pinned=\"false\" h=\"80\" w=\"160\">Send \"Reset\" string</comment><value name=\"msg\"><shadow type=\"text\"><field name=\"TEXT\">Reset</field></shadow></value><next><block type=\"function_call\"><mutation name=\"vibrate\" functionid=\"WC7?GsSHzCX#MPUKo(6d\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Trigger vibration</comment></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"10\" y=\"10\"><field name=\"NAME\">Button.B</field><comment pinned=\"false\" h=\"80\" w=\"160\">Monitor Button B for \"Start\"</comment><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\".}Wnm3$E9wp8pSo]u|zk\">selectedMinutes</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"function_call\"><mutation name=\"displayCharacter\" functionid=\"#0QG79}+tZCZTk}H/=55\"><arg name=\"char\" id=\"5tmdwl1oofwrk7henf2\" type=\"string\"></arg></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Display \"S\" on the LED grid</comment><value name=\"5tmdwl1oofwrk7henf2\"><shadow type=\"text\"><field name=\"TEXT\">S</field></shadow></value><next><block type=\"radio_datagram_send_string\"><comment pinned=\"false\" h=\"80\" w=\"160\">Send \"Start\" string</comment><value name=\"msg\"><shadow type=\"text\"><field name=\"TEXT\">Start</field></shadow></value><next><block type=\"function_call\"><mutation name=\"vibrate\" functionid=\"WC7?GsSHzCX#MPUKo(6d\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Trigger vibration</comment></block></next></block></next></block></statement></block></statement></block><block type=\"input_logo_event\" x=\"10\" y=\"10\"><field name=\"action\">TouchButtonEvent.Pressed</field><comment pinned=\"false\" h=\"80\" w=\"160\">Display happy face on reset or restart</comment><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Happy</field></block></statement></block><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let selectedMinutes = 0\" numlines=\"1\" declaredvars=\"selectedMinutes\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Tracks the currently selected minutes</comment><next><block type=\"radio_set_group\"><comment pinned=\"false\" h=\"80\" w=\"160\">Ensure both micro:bits use the same group</comment><value name=\"ID\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"pt)dP)Wq)@{$UC5Mn(QA\">vibrationPin</field><comment pinned=\"false\" h=\"80\" w=\"160\">Vibration motor connected to P16</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"digital_pin\"><field name=\"pin\">DigitalPin.P16</field></block></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Enable pull-up resistors for side buttons</comment><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P12</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P13</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P14</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P15</field></shadow></value><next><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Happy</field><comment pinned=\"false\" h=\"80\" w=\"160\">Display happy face on startup</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"function handleButton(pin: DigitalPin, minutes: number, label: string) {\" line1=\"    if (pins.digitalReadPin(pin) == 0) {\" line2=\"        selectedMinutes = minutes // Set minutes\" line3=\"        displayCharacter(label) // Display the label\" line4=\"        radio.sendString(label.toLowerCase()) // Send the corresponding string\" line5=\"        vibrate() // Trigger vibration\" line6=\"        basic.pause(300) // Debounce delay\" line7=\"        while (pins.digitalReadPin(pin) == 0) {\" line8=\"            // Wait for button release\" line9=\"        }\" line10=\"    }\" line11=\"}\" numlines=\"12\"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_forever\" x=\"225\" y=\"20\"><comment pinned=\"false\" h=\"80\" w=\"160\">Continuously monitor side buttons for state changes</comment><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P12, 4, &quot;4&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button C</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P15, 2, &quot;2&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button F</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P14, 3, &quot;3&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button E</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P13, 1, &quot;1&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button D</comment></block></next></block></next></block></next></block></statement"],[1,"/variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\""],[0,"></b"]],"start1":63,"start2":63,"length1":9061,"length2":111}]}]},{"timestamp":1732473393764,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ariable "],[1,"id=\"pt)dP)Wq)@{$UC5Mn(QA\">vibrationPin</variable><variable "],[0,"id=\".}Wn"]],"start1":68,"start2":68,"length1":16,"length2":75},{"diffs":[[0,"pe=\""],[-1,"pxt-on-start"],[1,"function_definition"],[0,"\" x=\""],[-1,"36"],[1,"10"],[0,"\" y=\""],[-1,"48\"><statement"],[1,"10\"><mutation"],[0," name=\""],[-1,"HANDLER\"><block type=\"typescript_statement"],[1,"vibrate\" functionid=\"WC7?GsSHzCX#MPUKo(6d"],[0,"\"><"],[1,"/"],[0,"mutation"],[-1," xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let selectedMinutes = 0\" numlines=\"1\" declaredvars=\"selectedMinutes\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Tracks the currently selected minutes</comment><next><block type=\"radio_set_group\"><comment pinned=\"false\" h=\"80\" w=\"160\">Ensure both micro:bits use the same group</comment"],[1,"><field name=\"function_name\">vibrate</field><comment pinned=\"false\" h=\"80\" w=\"160\">Function to activate vibration motor briefly</comment><statement name=\"STACK\"><block type=\"device_set_digital_pin\"><comment pinned=\"false\" h=\"80\" w=\"160\">Turn on vibration</comment><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"pt)dP)Wq)@{$UC5Mn(QA\">vibrationPin</field></block></value"],[0,"><va"]],"start1":208,"start2":208,"length1":442,"length2":584},{"diffs":[[0,"e name=\""],[-1,"ID"],[1,"value"],[0,"\"><shado"]],"start1":794,"start2":794,"length1":18,"length2":21},{"diffs":[[0,"ax=\""],[-1,"255"],[1,"1"],[0,"\" pr"]],"start1":862,"start2":862,"length1":11,"length2":9},{"diffs":[[0,"ice_"],[-1,"set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Enable pull-up resistors for side button"],[1,"pause\"><comment pinned=\"false\" h=\"80\" w=\"160\">Vibrate for 100m"],[0,"s</c"]],"start1":963,"start2":963,"length1":142,"length2":70},{"diffs":[[0,"t><value name=\"p"],[-1,"in"],[1,"ause"],[0,"\"><shadow type=\""]],"start1":1038,"start2":1038,"length1":34,"length2":36},{"diffs":[[0,"pe=\""],[-1,"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P12"],[1,"timePicker\"><field name=\"ms\">100"],[0,"</fi"]],"start1":1070,"start2":1070,"length1":60,"length2":40},{"diffs":[[0,"set_"],[-1,"pull\"><field name=\"pull\">PinPullMode.PullUp</field"],[1,"digital_pin\"><comment pinned=\"false\" h=\"80\" w=\"160\">Turn off vibration</comment"],[0,"><va"]],"start1":1157,"start2":1157,"length1":58,"length2":87},{"diffs":[[0,"nt><value name=\""],[-1,"pin"],[1,"name"],[0,"\"><shadow type=\""]],"start1":1238,"start2":1238,"length1":35,"length2":36},{"diffs":[[0,"talPin.P"],[-1,"13"],[1,"0"],[0,"</field>"]],"start1":1316,"start2":1316,"length1":18,"length2":17},{"diffs":[[0,"ow><"],[-1,"/value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field"],[1,"block type=\"variables_get\"><field name=\"VAR\" id=\"pt)dP)Wq)@{$UC5Mn(QA\">vibrationPin</field></block></value"],[0,"><va"]],"start1":1339,"start2":1339,"length1":95,"length2":114},{"diffs":[[0,"ue><value name=\""],[-1,"pin"],[1,"value"],[0,"\"><shadow type=\""]],"start1":1447,"start2":1447,"length1":35,"length2":37},{"diffs":[[0,"pe=\""],[-1,"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P14"],[1,"math_number_minmax\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">0"],[0,"</fi"]],"start1":1480,"start2":1480,"length1":60,"length2":101},{"diffs":[[0,"ue><"],[1,"/block></"],[0,"next><"],[1,"/"],[0,"block"],[-1," type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P15</field></shadow></value><next><block type=\"basic_show_ic"],[1,"></next></block></statement></block><block type=\"function_definition\" x=\"10\" y=\"10\"><mutation name=\"displayCharacter\" functionid=\"#0QG79}+tZCZTk}H/=55\"><arg name=\"char\" id=\"5tmdwl1oofwrk7henf2\" type=\"string\"></arg></mutati"],[0,"on"],[-1,"\""],[0,"><fi"]],"start1":1599,"start2":1599,"length1":232,"length2":253},{"diffs":[[0,"d name=\""],[-1,"i\">IconNames.Happy"],[1,"function_name\">displayCharacter"],[0,"</field>"]],"start1":1854,"start2":1854,"length1":34,"length2":47},{"diffs":[[0,"60\">"],[-1,"Display happy face on startup</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"function handleButton(pin: DigitalPin, minutes: number, label: string) {\" line1=\"    if (pins.digitalReadPin(pin) == 0) {\" line2=\"        selectedMinutes = minutes // Set minutes\" line3=\"        displayCharacter(label) // Display the label\" line4=\"        radio.sendString(label.toLowerCase()) // Send the corresponding string\" line5=\"        vibrate() // Trigger vibration\" line6=\"        basic.pause(300) // Debounce delay\" line7=\"        while (pins.digitalReadPin(pin) == 0) {\" line8=\"            // Wait for button release\" line9=\"        }\" line10=\"    }\" line11=\"}\" numlines=\"12\"></mutation></block></next></block></n"],[1,"Function to display a character on the LED grid</comment><value name=\"5tmdwl1oofwrk7henf2\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">char</field></block></value><statement name=\"STACK\"><block type=\"device_clear_display\"><next><block type=\"device_print_message\"><comment pinned=\"false\" h=\"80\" w=\"160\">Show the character</comment><value name=\"t"],[0,"ext"],[1,"\""],[0,"><"],[-1,"/"],[0,"block"],[-1,"></next></block></next></block></next"],[1," type=\"argument_reporter_string\"><field name=\"VALUE\">char</field"],[0,"></b"]],"start1":1936,"start2":1936,"length1":814,"length2":486},{"diffs":[[0,"field></block></"],[-1,"next"],[1,"value"],[0,"></block></next>"]],"start1":2413,"start2":2413,"length1":36,"length2":37},{"diffs":[[0," x=\""],[-1,"783"],[1,"10"],[0,"\" y=\""],[-1,"2"],[1,"1"],[0,"0\"><"]],"start1":2511,"start2":2511,"length1":17,"length2":16},{"diffs":[[0,"pe=\""],[-1,"Vibration_Motor\"><value name=\"time\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value"],[1,"function_call\"><mutation name=\"vibrate\" functionid=\"WC7?GsSHzCX#MPUKo(6d\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Trigger vibration</comment"],[0,"></b"]],"start1":3225,"start2":3225,"length1":116,"length2":158},{"diffs":[[0,"x=\"1"],[-1,"125"],[1,"0"],[0,"\" y=\""],[-1,"2"],[1,"1"],[0,"0\"><"]],"start1":3472,"start2":3472,"length1":17,"length2":15},{"diffs":[[0,"pe=\""],[-1,"Vibration_Motor\"><value name=\"time\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value"],[1,"function_call\"><mutation name=\"vibrate\" functionid=\"WC7?GsSHzCX#MPUKo(6d\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Trigger vibration</comment"],[0,"></b"]],"start1":4668,"start2":4668,"length1":116,"length2":158},{"diffs":[[0,"pe=\""],[-1,"device_forever"],[1,"input_logo_event"],[0,"\" x=\""],[-1,"16"],[0,"10\" y=\""],[-1,"2"],[1,"1"],[0,"0\"><"],[1,"field name=\"action\">TouchButtonEvent.Pressed</field><"],[0,"comm"]],"start1":4910,"start2":4910,"length1":41,"length2":94},{"diffs":[[0,"60\">"],[-1,"Continuously monitor side buttons f"],[1,"Display happy face on reset "],[0,"or "],[1,"re"],[0,"sta"],[1,"r"],[0,"t"],[-1,"e changes"],[0,"</co"]],"start1":5034,"start2":5034,"length1":59,"length2":46},{"diffs":[[0,"pe=\""],[-1,"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P12, 4, &quot;4&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button C</comment><next"],[1,"basic_show_icon\"><field name=\"i\">IconNames.Happy</field></block></statement></block><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\""],[0,"><bl"]],"start1":5121,"start2":5121,"length1":218,"length2":158},{"diffs":[[0,"e0=\""],[-1,"handleButton(DigitalPin.P15, 2, &quot;2&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button F</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P14, 3, &quot;3&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button E</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P13, 1, &quot;1&quot;)\" numlines=\"1"],[1,"let selectedMinutes = 0\" numlines=\"1\" declaredvars=\"selectedMinutes\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Tracks the currently selected minutes</comment><next><block type=\"radio_set_group\"><comment pinned=\"false\" h=\"80\" w=\"160\">Ensure both micro:bits use the same group</comment><value name=\"ID\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"255\" precision=\"0"],[0,"\"></"]],"start1":5361,"start2":5361,"length1":515,"length2":391},{"diffs":[[0,"on><"],[-1,"comment pinned=\"false\" h=\"80\" w=\"160\">Button D</comment></block></next></block></next></block"],[1,"field name=\"SLIDER\">1</field></shadow></value"],[0,"><"],[-1,"/"],[0,"next><"],[-1,"/block></statement></block><block type=\"input_logo_event\" x=\"20\" y=\"1031\"><field name=\"action\">TouchButtonEvent.Pressed</field><comment pinned=\"false\" h=\"80\" w=\"160\">Display happy face on reset or restart</comment><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Happy</field></block></statement></block><block type=\"function_definition\" x=\"273\" y=\"1031\"><mutation name=\"displayCharacter\" functionid=\"#0QG79}+tZCZTk}H/=55\"><arg name=\"char\" id=\"5tmdwl1oofwrk7henf2\" type=\"string\"></arg></mutation><field name=\"function_name\">displayCharacter</field><comment pinned=\"false\" h=\"80\" w=\"160\">Function to display a character on the LED grid</comment><value name=\"5tmdwl1oofwrk7henf2\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">char"],[1,"block type=\"variables_set\"><field name=\"VAR\" id=\"pt)dP)Wq)@{$UC5Mn(QA\">vibrationPin</field><comment pinned=\"false\" h=\"80\" w=\"160\">Vibration motor connected to P16</comment><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"digital_pin\"><field name=\"pin\">DigitalPin.P16</field></block></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Enable pull-up resistors for side buttons</comment><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P12"],[0,"</fi"]],"start1":5758,"start2":5758,"length1":928,"length2":653},{"diffs":[[0,"in.P12</field></"],[-1,"block"],[1,"shadow"],[0,"></value><statem"]],"start1":6401,"start2":6401,"length1":37,"length2":38},{"diffs":[[0,"ue><"],[-1,"statement name=\"STACK\"><block type=\"device_clear_display\"><next><block"],[1,"next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><value name=\"pin\"><shadow"],[0," type=\"d"],[-1,"evice"],[1,"igital"],[0,"_p"],[-1,"r"],[0,"in"],[-1,"t_message\"><comment pinned=\"false\" h=\"80\" w=\"160\">Show the character</comment><value name=\"text\"><block type=\"argument_reporter_string\"><field name=\"VALUE\">char"],[1,"_shadow\"><field name=\"pin\">DigitalPin.P13</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P14"],[0,"</fi"]],"start1":6429,"start2":6429,"length1":256,"length2":362},{"diffs":[[0,"in.P14</field></"],[-1,"block"],[1,"shadow"],[0,"></value></block"]],"start1":6781,"start2":6781,"length1":37,"length2":38},{"diffs":[[0,"ue><"],[-1,"/block></"],[0,"next><"],[-1,"/"],[0,"block"],[-1,"></statement></block><block type=\"function_definition\" x=\"693\" y=\"1031\"><mutation name=\"vibrate\" functionid=\"WC7?GsSHzCX#MPUKo(6d\"></mutati"],[1," type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P15</field></shadow></value><next><block type=\"basic_show_ic"],[0,"on"],[1,"\""],[0,"><fi"]],"start1":6809,"start2":6809,"length1":170,"length2":232},{"diffs":[[0,"d name=\""],[-1,"function_name\">vibrate"],[1,"i\">IconNames.Happy"],[0,"</field>"]],"start1":7043,"start2":7043,"length1":38,"length2":34},{"diffs":[[0,"60\">"],[-1,"Function to activate vibration motor briefly</comment><statement name=\"STACK\"><block type=\"device_set_digital_pin\"><comment pinned=\"false\" h=\"80\" w=\"160\">Turn on vibration</comment><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P0</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"device_pause\"><comment pinned=\"false\" h=\"80\" w=\"160\">Vibrate for 100ms</comment><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_set_digital_pin\"><comment pinned=\"false\" h=\"80\" w=\"160\">Turn off vibration</comment><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P0</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" precision=\"0"],[1,"Display happy face on startup</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"function handleButton(pin: DigitalPin, minutes: number, label: string) {\" line1=\"    if (pins.digitalReadPin(pin) == 0) {\" line2=\"        selectedMinutes = minutes // Set minutes\" line3=\"        displayCharacter(label) // Display the label\" line4=\"        radio.sendString(label.toLowerCase()) // Send the corresponding string\" line5=\"        vibrate() // Trigger vibration\" line6=\"        basic.pause(300) // Debounce delay\" line7=\"        while (pins.digitalReadPin(pin) == 0) {\" line8=\"            // Wait for button release\" line9=\"        }\" line10=\"    }\" line11=\"}\" numlines=\"12\"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_forever\" x=\"225\" y=\"20\"><comment pinned=\"false\" h=\"80\" w=\"160\">Continuously monitor side buttons for state changes</comment><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P12, 4, &quot;4&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button C</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P15, 2, &quot;2&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button F</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P14, 3, &quot;3&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button E</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P13, 1, &quot;1&quot;)\" numlines=\"1"],[0,"\"></"]],"start1":7112,"start2":7112,"length1":951,"length2":1878},{"diffs":[[0,"on><"],[-1,"field name=\"SLIDER\">0</field></shadow></value"],[1,"comment pinned=\"false\" h=\"80\" w=\"160\">Button D</comment></block></next"],[0,"></b"]],"start1":8996,"start2":8996,"length1":53,"length2":78}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," minutes"],[1,"\nlet vibrationPin = DigitalPin.P16 // Vibration motor connected to P16"],[0,"\n\n// Ena"]],"start1":119,"start2":119,"length1":16,"length2":86},{"diffs":[[0,"tor "],[-1,"using joystickbit extension\nfunction vibrate() {\n    joystickbit.Vibration_Motor(15"],[1,"briefly\nfunction vibrate() {\n    pins.digitalWritePin(vibrationPin, 1) // Turn on vibration\n    basic.pause(10"],[0,"0) // "],[-1,"Activate vibration motor for 150ms"],[1,"Vibrate for 100ms\n    pins.digitalWritePin(vibrationPin, 0) // Turn off vibration"],[0,"\n}\n\n"]],"start1":543,"start2":543,"length1":131,"length2":205}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,": \"Robot"],[1," T"],[0,"opia Con"]],"start1":12,"start2":12,"length1":16,"length2":18},{"diffs":[[0,"ntroller"],[1," Code"],[0,"\",\n    \""]],"start1":29,"start2":29,"length1":16,"length2":21}]}]},{"timestamp":1732473833197,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"radio.setGroup(1) // Ensure both micro:bits use the same group\nlet selectedMinutes = 0 // Tracks the currently selected minutes\n\n// Enable pull-up resistors for side buttons\npins.setPull(DigitalPin.P12, PinPullMode.PullUp)\npins.setPull(DigitalPin.P13, PinPullMode.PullUp)\npins.setPull(DigitalPin.P14, PinPullMode.PullUp)\npins.setPull(DigitalPin.P15, PinPullMode.PullUp)\n\n// Display happy face on startup\nbasic.showIcon(IconNames.Happy)\n\n// Function to activate vibration motor using joystickbit extension\nfunction vibrate() {\n    joystickbit.Vibration_Motor(150) // Activate vibration motor for 150ms\n}\n\n// Function to handle button presses\nfunction handleButton(pin: DigitalPin, minutes: number, label: string) {\n    if (pins.digitalReadPin(pin) == 0) {\n        selectedMinutes = minutes // Set minutes\n        displayCharacter(label) // Display the label\n        radio.sendString(label.toLowerCase()) // Send the corresponding string\n        vibrate() // Trigger vibration\n        basic.pause(300) // Debounce delay\n        while (pins.digitalReadPin(pin) == 0) {\n            // Wait for button release\n        }\n    }\n}\n\n// Function to display a character on the LED grid\nfunction displayCharacter(char: string) {\n    basic.clearScreen()\n    basic.showString(char) // Show the character\n}\n\n// Monitor Button A for \"Reset\"\ninput.onButtonPressed(Button.A, function () {\n    displayCharacter(\"R\") // Display \"R\" on the LED grid\n    radio.sendString(\"Reset\") // Send \"Reset\" string\n    vibrate() // Trigger vibration\n})\n\n// Monitor Button B for \"Start\"\ninput.onButtonPressed(Button.B, function () {\n    if (selectedMinutes > 0) {\n        displayCharacter(\"S\") // Display \"S\" on the LED grid\n        radio.sendString(\"Start\") // Send \"Start\" string\n        vibrate() // Trigger vibration\n    }\n})\n\n// Continuously monitor side buttons for state changes\nbasic.forever(function () {\n    handleButton(DigitalPin.P12, 4, \"4\") // Button C\n    handleButton(DigitalPin.P15, 2, \"2\") // Button F\n    handleButton(DigitalPin.P14, 3, \"3\") // Button E\n    handleButton(DigitalPin.P13, 1, \"1\") // Button D\n})\n\n// Display happy face on reset or restart\ninput.onLogoEvent(TouchButtonEvent.Pressed, function () {\n    basic.showIcon(IconNames.Happy)\n})\n"]],"start1":0,"start2":0,"length1":0,"length2":2234}]}]},{"timestamp":1732474595026,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"radio.setGroup(1) // Ensure both micro:bits use the same group\n\n// Function to display a character on the LED grid\nfunction displayCharacter(char: string) {\n    basic.clearScreen()\n    basic.showString(char) // Show the character\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"one\") {\n        displayCharacter(\"1\") // Display \"1\"\n    } else if (receivedString == \"two\") {\n        displayCharacter(\"2\") // Display \"2\"\n    } else if (receivedString == \"three\") {\n        displayCharacter(\"3\") // Display \"3\"\n    } else if (receivedString == \"four\") {\n        displayCharacter(\"4\") // Display \"4\"\n    }\n})\n\n// Display heart on startup\nbasic.showIcon(IconNames.Heart)\n"]],"start1":0,"start2":0,"length1":732,"length2":0}]}]},{"timestamp":1732474596175,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"oup\n"],[-1,"let selectedMinutes = 0 // Tracks the currently selected minutes\n\n// Enable pull-up resistors for side buttons\npins.setPull(DigitalPin.P12, PinPullMode.PullUp)\npins.setPull(DigitalPin.P13, PinPullMode.PullUp)\npins.setPull(DigitalPin.P14, PinPullMode.PullUp)\npins.setPull(DigitalPin.P15, PinPullMode.PullUp)\n\n// Display happy face on startup\nbasic.showIcon(IconNames.Happy)\n\n// Function to activate vibration motor using joystickbit extension\nfunction vibrate() {\n    joystickbit.Vibration_Motor(150) // Activate vibration motor for 150ms\n}\n\n// Function to handle button presses\nfunction handleButton(pin: DigitalPin, minutes: number, label: string) {\n    if (pins.digitalReadPin(pin) == 0) {\n        selectedMinutes = minutes // Set minutes\n        displayCharacter(label) // Display the label\n        radio.sendString(label.toLowerCase()) // Send the corresponding string\n        serial.writeLine(\"Sent: \" + label.toLowerCase()) // Log sent string\n        vibrate() // Trigger vibration\n        basic.pause(300) // Debounce delay\n        while (pins.digitalReadPin(pin) == 0) {\n            // Wait for button release\n        }\n    }\n}\n\n// Function to display a character on the LED grid\nfunction displayCharacter(char: string) {\n    basic.clearScreen()\n    basic.showString(char) // Show the character\n}\n\n// Monitor Button A for \"Reset\"\ninput.onButtonPressed(Button.A, function () {\n    displayCharacter(\"R\") // Display \"R\" on the LED grid\n    radio.sendString(\"Reset\") // Send \"Reset\" s"],[1,"\n// Function to display a character on the LED grid\nfunction displayCharacter(char: string) {\n    basic.clearScreen()\n    basic.showString(char) // Show the character\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedS"],[0,"tring"],[1,") {"],[0,"\n    "],[-1,"serial.writeLine(\"Sent: reset\") // Log sent string\n    vib"],[1,"if (receivedString == \"one\") {\n        displayCha"],[0,"ra"],[1,"c"],[0,"te"],[-1,"() // Trigger vibration\n})\n\n// Monitor Button B for \"Start\"\ninput.onButtonPressed(Button.B, function () {\n    if (selectedMinutes > 0"],[1,"r(\"1\") // Display \"1\"\n    } else if (receivedString == \"two\""],[0,") {\n"]],"start1":59,"start2":59,"length1":1701,"length2":381},{"diffs":[[0,"racter(\""],[-1,"S"],[1,"2"],[0,"\") // Di"]],"start1":458,"start2":458,"length1":17,"length2":17},{"diffs":[[0,"ay \""],[-1,"S\" on the LED grid\n        radio.sendString(\"Start\") // Send \"Start\" string\n        serial.writeLine(\"Sent: start\") // Log sent string\n        vibrate() // Trigger vibration\n    }\n})\n\n// Continuously monitor side buttons for state changes\nbasic.forever(function () {\n    handleButton(DigitalPin.P12, 4, \"4\") // Button C\n    handleButton(DigitalPin.P15, 2, \"2\") // Button F\n    handleButton(DigitalPin.P14, 3, \"3\") // Button E\n    handleButton(DigitalPin.P13, 1, \"1\") // Button D\n})\n\n// Display happy face on reset or restart\ninput.onLogoEvent(TouchButtonEvent.Pressed, function () {\n    "],[1,"2\"\n    } else if (receivedString == \"three\") {\n        displayCharacter(\"3\") // Display \"3\"\n    } else if (receivedString == \"four\") {\n        displayCharacter(\"4\") // Display \"4\"\n    }\n})\n\n// Display heart on startup\n"],[0,"basi"]],"start1":478,"start2":478,"length1":595,"length2":226},{"diffs":[[0,"es.H"],[-1,"appy)\n}"],[1,"eart"],[0,")\n"]],"start1":722,"start2":722,"length1":13,"length2":10}]}]},{"timestamp":1732475380659,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"etGroup("],[1,"1"],[0,") // Ens"]],"start1":7,"start2":7,"length1":16,"length2":17}]}]},{"timestamp":1732475385688,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ble id=\""],[-1,"II^y%5MArzV{E=2*)W],"],[1,".}Wnm3$E9wp8pSo]u|zk"],[0,"\">select"]],"start1":72,"start2":72,"length1":36,"length2":36},{"diffs":[[0," x=\""],[-1,"0"],[1,"36"],[0,"\" y=\""],[-1,"0"],[1,"48"],[0,"\"><s"]],"start1":166,"start2":166,"length1":15,"length2":17},{"diffs":[[0,"SLIDER\">"],[-1,"5"],[1,"1"],[0,"</field>"]],"start1":705,"start2":705,"length1":17,"length2":17},{"diffs":[[0,"e5=\""],[-1,"        serial.writeLine(&quot;Sent: &quot; + label.toLowerCase()) // Log sent string\" line6=\""],[0,"    "]],"start1":2168,"start2":2168,"length1":102,"length2":8},{"diffs":[[0,"on\" line"],[-1,"7"],[1,"6"],[0,"=\"      "]],"start1":2208,"start2":2208,"length1":17,"length2":17},{"diffs":[[0,"ay\" line"],[-1,"8"],[1,"7"],[0,"=\"      "]],"start1":2259,"start2":2259,"length1":17,"length2":17},{"diffs":[[0," {\" line"],[-1,"9"],[1,"8"],[0,"=\"      "]],"start1":2315,"start2":2315,"length1":17,"length2":17},{"diffs":[[0,"line"],[-1,"10"],[1,"9"],[0,"=\"  "]],"start1":2366,"start2":2366,"length1":10,"length2":9},{"diffs":[[0,"}\" line1"],[-1,"1"],[1,"0"],[0,"=\"    }\""]],"start1":2381,"start2":2381,"length1":17,"length2":17},{"diffs":[[0,"}\" line1"],[-1,"2"],[1,"1"],[0,"=\"}\" num"]],"start1":2396,"start2":2396,"length1":17,"length2":17},{"diffs":[[0,"lines=\"1"],[-1,"3"],[1,"2"],[0,"\"></muta"]],"start1":2413,"start2":2413,"length1":17,"length2":17},{"diffs":[[0,"ock "],[-1,"type=\"device_forever\" x=\"1574\" y=\"-28\"><comment pinned=\"false\" h=\"80\" w=\"160\">Continuously monitor side buttons for state changes</comment><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P12, 4, &quot;4&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button C</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P15, 2, &quot;2&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button F</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P14, 3, &quot;3&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button E</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P13, 1, &quot;1&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button D</comment></block></next></block></next></block></next></block></statement></block><block "],[0,"type"]],"start1":2571,"start2":2571,"length1":1143,"length2":8},{"diffs":[[0,"x=\"7"],[-1,"7"],[0,"8"],[1,"3"],[0,"\" y=\""],[-1,"124"],[1,"20"],[0,"\"><f"]],"start1":2602,"start2":2602,"length1":18,"length2":17},{"diffs":[[0,"tionid=\""],[-1,"vZwQ+?gzH[w/|v+mnS-b"],[1,"#0QG79}+tZCZTk}H/=55"],[0,"\"><arg n"]],"start1":2821,"start2":2821,"length1":36,"length2":36},{"diffs":[[0,"ar\" id=\""],[-1,"69shrb8skgim7wqowxq6r"],[1,"5tmdwl1oofwrk7henf2"],[0,"\" type=\""]],"start1":2864,"start2":2864,"length1":37,"length2":35},{"diffs":[[0,"e name=\""],[-1,"69shrb8skgim7wqowxq6r"],[1,"5tmdwl1oofwrk7henf2"],[0,"\"><shado"]],"start1":3005,"start2":3005,"length1":37,"length2":35},{"diffs":[[0,"pe=\""],[-1,"serial_writeline\"><comment pinned=\"false\" h=\"80\" w=\"160\">Log sent string</comment"],[1,"Vibration_Motor\""],[0,"><va"]],"start1":3316,"start2":3316,"length1":89,"length2":24},{"diffs":[[0,"\"><value name=\"t"],[-1,"ext"],[1,"ime"],[0,"\"><shadow type=\""]],"start1":3335,"start2":3335,"length1":35,"length2":35},{"diffs":[[0,"\"><shadow type=\""],[-1,"text"],[1,"math_number"],[0,"\"><field name=\"T"]],"start1":3354,"start2":3354,"length1":36,"length2":43},{"diffs":[[0,"me=\""],[-1,"TEXT\">Sent: reset"],[1,"NUM\">100"],[0,"</fi"]],"start1":3392,"start2":3392,"length1":25,"length2":16},{"diffs":[[0,"ue><"],[-1,"next><block type=\"function_call\"><mutation name=\"vibrate\" functionid=\"`T3;.,J,yR:!ArB(JNYn\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Trigger vibration</comment></block></next><"],[0,"/blo"]],"start1":3426,"start2":3426,"length1":193,"length2":8},{"diffs":[[0,"x=\"1"],[1,"1"],[0,"2"],[-1,"8"],[0,"5\" y=\"2"],[-1,"7"],[0,"0\"><"]],"start1":3521,"start2":3521,"length1":18,"length2":17},{"diffs":[[0,"id=\""],[-1,"II^y%5MArzV{E=2*)W],"],[1,".}Wnm3$E9wp8pSo]u|zk"],[0,"\">se"]],"start1":3968,"start2":3968,"length1":28,"length2":28},{"diffs":[[0,"tionid=\""],[-1,"vZwQ+?gzH[w/|v+mnS-b"],[1,"#0QG79}+tZCZTk}H/=55"],[0,"\"><arg n"]],"start1":4224,"start2":4224,"length1":36,"length2":36},{"diffs":[[0,"ar\" id=\""],[-1,"69shrb8skgim7wqowxq6r"],[1,"5tmdwl1oofwrk7henf2"],[0,"\" type=\""]],"start1":4267,"start2":4267,"length1":37,"length2":35},{"diffs":[[0,"e name=\""],[-1,"69shrb8skgim7wqowxq6r"],[1,"5tmdwl1oofwrk7henf2"],[0,"\"><shado"]],"start1":4408,"start2":4408,"length1":37,"length2":35},{"diffs":[[0,"pe=\""],[-1,"serial_writeline\"><comment pinned=\"false\" h=\"80\" w=\"160\">Log sent string</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Sent: start</field></shadow></value><next><block type=\"function_call"],[1,"Vibration_Motor\"><value name=\"time\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value></block></next></block></next></block></statement></block></statement></block><block type=\"device_forever\" x=\"1610\" y=\"20\"><comment pinned=\"false\" h=\"80\" w=\"160\">Continuously monitor side buttons for state changes</comment><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P12, 4, &quot;4&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button C</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P15, 2, &quot;2&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button F</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P14, 3, &quot;3&quot;)\" numlines=\"1"],[0,"\"><"],[1,"/"],[0,"mutation"],[-1," name=\"vibrate\" functionid=\"`T3;.,J,yR:!ArB(JNYn"],[1,"><comment pinned=\"false\" h=\"80\" w=\"160\">Button E</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P13, 1, &quot;1&quot;)\" numlines=\"1"],[0,"\"></"]],"start1":4719,"start2":4719,"length1":275,"length2":1186},{"diffs":[[0,"w=\"160\">"],[-1,"Trigger vibration"],[1,"Button D"],[0,"</commen"]],"start1":5945,"start2":5945,"length1":33,"length2":24},{"diffs":[[0,"tement></block><"],[1,"block type=\"input_logo_event\" x=\"20\" y=\"1031\"><field name=\"action\">TouchButtonEvent.Pressed</field><comment pinned=\"false\" h=\"80\" w=\"160\">Display happy face on reset or restart</comment><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Happy</field></block><"],[0,"/statement></blo"]],"start1":6029,"start2":6029,"length1":32,"length2":322},{"diffs":[[0," x=\""],[-1,"39"],[1,"27"],[0,"3\" y=\""],[-1,"818"],[1,"1031"],[0,"\"><m"]],"start1":6387,"start2":6387,"length1":19,"length2":20},{"diffs":[[0,"id=\""],[-1,"vZwQ+?gzH[w/|v+mnS-b"],[1,"#0QG79}+tZCZTk}H/=55"],[0,"\"><a"]],"start1":6447,"start2":6447,"length1":28,"length2":28},{"diffs":[[0,"ar\" id=\""],[-1,"69shrb8skgim7wqowxq6r"],[1,"5tmdwl1oofwrk7henf2"],[0,"\" type=\""]],"start1":6486,"start2":6486,"length1":37,"length2":35},{"diffs":[[0,"me=\""],[-1,"69shrb8skgim7wqowxq6r"],[1,"5tmdwl1oofwrk7henf2"],[0,"\"><b"]],"start1":6703,"start2":6703,"length1":29,"length2":27},{"diffs":[[0,"pe=\""],[-1,"input_logo_event"],[1,"function_definition"],[0,"\" x=\""],[-1,"-16"],[1,"693"],[0,"\" y=\""],[-1,"983\"><field name=\"action\">TouchButtonEvent.Pressed"],[1,"1031\"><mutation name=\"vibrate\" functionid=\"WC7?GsSHzCX#MPUKo(6d\"></mutation><field name=\"function_name\">vibrate"],[0,"</fi"]],"start1":7184,"start2":7184,"length1":87,"length2":151},{"diffs":[[0,"60\">"],[-1,"Display happy face on reset or restart"],[1,"Function to activate vibration motor briefly"],[0,"</co"]],"start1":7374,"start2":7374,"length1":46,"length2":52},{"diffs":[[0,"statement name=\""],[-1,"HANDLER"],[1,"STACK"],[0,"\"><block type=\"b"]],"start1":7433,"start2":7433,"length1":39,"length2":37},{"diffs":[[0,"pe=\""],[-1,"basic_show_icon\"><field name=\"i\">IconNames.Happy</field></block></statement></block><block type=\"function_definition\" x=\"657\" y=\"983\"><mutation name=\"vibrate\" functionid=\"`T3;.,J,yR:!ArB(JNYn\"></mutation><field name=\"function_name\">vibrate</field><comment pinned=\"false\" h=\"80\" w=\"160\">Function to activate vibration motor using joystickbit extension</comment><statement name=\"STACK\"><block type=\"Vibration_Motor"],[1,"device_set_digital_pin\"><comment pinned=\"false\" h=\"80\" w=\"160\">Turn on vibration</comment><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P0</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"device_pause\"><comment pinned=\"false\" h=\"80\" w=\"160\">Vibrate for 100ms</comment><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"device_set_digital_pin"],[0,"\"><c"]],"start1":7465,"start2":7465,"length1":420,"length2":590},{"diffs":[[0,"60\">"],[-1,"Activate"],[1,"Turn off"],[0," vib"]],"start1":8088,"start2":8088,"length1":16,"length2":16},{"diffs":[[0,"tion"],[-1," motor for 150ms</comment"],[1,"</comment><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P0</field></shadow></value"],[0,"><va"]],"start1":8106,"start2":8106,"length1":33,"length2":126},{"diffs":[[0,"ue><value name=\""],[-1,"tim"],[1,"valu"],[0,"e\"><shadow type="]],"start1":8226,"start2":8226,"length1":35,"length2":36},{"diffs":[[0,"ype=\"math_number"],[-1,"\""],[1,"_minmax\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation"],[0,"><field name=\"NU"]],"start1":8258,"start2":8258,"length1":33,"length2":91},{"diffs":[[0,"me=\""],[-1,"NUM\">15"],[1,"SLIDER\">"],[0,"0</f"]],"start1":8343,"start2":8343,"length1":15,"length2":16},{"diffs":[[0,"value></block></"],[1,"next></block></next></block></"],[0,"statement></bloc"]],"start1":8375,"start2":8375,"length1":32,"length2":62}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"etGroup("],[-1,"1"],[0,") // Ens"]],"start1":7,"start2":7,"length1":17,"length2":16},{"diffs":[[0,"Happy)\n\n"],[1,"// Function to activate vibration motor using joystickbit extension\nfunction vibrate() {\n    joystickbit.Vibration_Motor(150) // Activate vibration motor for 150ms\n}\n\n"],[0,"// Funct"]],"start1":428,"start2":428,"length1":16,"length2":183},{"diffs":[[0,"    "],[-1,"basic.showString"],[1,"displayCharacter"],[0,"(lab"]],"start1":807,"start2":807,"length1":24,"length2":24},{"diffs":[[0,"the "],[-1,"string in lowercase"],[1,"corresponding string"],[0,"\n   "]],"start1":910,"start2":910,"length1":27,"length2":28},{"diffs":[[0," // "],[-1,"Debug log"],[1,"Log sent string\n        vibrate() // Trigger vibration"],[0,"\n   "]],"start1":991,"start2":991,"length1":17,"length2":62},{"diffs":[[0,"   }\n}\n\n"],[1,"// Function to display a character on the LED grid\nfunction displayCharacter(char: string) {\n    basic.clearScreen()\n    basic.showString(char) // Show the character\n}\n\n// Monitor Button A for \"Reset\"\ninput.onButtonPressed(Button.A, function () {\n    displayCharacter(\"R\") // Display \"R\" on the LED grid\n    radio.sendString(\"Reset\") // Send \"Reset\" string\n    serial.writeLine(\"Sent: reset\") // Log sent string\n    vibrate() // Trigger vibration\n})\n\n// Monitor Button B for \"Start\"\ninput.onButtonPressed(Button.B, function () {\n    if (selectedMinutes > 0) {\n        displayCharacter(\"S\") // Display \"S\" on the LED grid\n        radio.sendString(\"Start\") // Send \"Start\" string\n        serial.writeLine(\"Sent: start\") // Log sent string\n        vibrate() // Trigger vibration\n    }\n})\n\n"],[0,"// Conti"]],"start1":1191,"start2":1191,"length1":16,"length2":802},{"diffs":[[0,"4, \""],[-1,"Four"],[1,"4"],[0,"\") /"]],"start1":2101,"start2":2101,"length1":12,"length2":9},{"diffs":[[0,"2, \""],[-1,"Two"],[1,"2"],[0,"\") /"]],"start1":2154,"start2":2154,"length1":11,"length2":9},{"diffs":[[0,"3, \""],[-1,"Three"],[1,"3"],[0,"\") /"]],"start1":2207,"start2":2207,"length1":13,"length2":9},{"diffs":[[0,"1, \""],[-1,"One"],[1,"1"],[0,"\") /"]],"start1":2260,"start2":2260,"length1":11,"length2":9},{"diffs":[[0,"Button D\n})\n"],[1,"\n// Display happy face on reset or restart\ninput.onLogoEvent(TouchButtonEvent.Pressed, function () {\n    basic.showIcon(IconNames.Happy)\n})\n"]],"start1":2271,"start2":2271,"length1":12,"length2":152}]}]},{"timestamp":1732475876495,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"y)\n\n"],[-1,"// Function to activate vibration motor using joystickbit extension\nfunction vibrate() {\n    joystickbit.Vibration_Motor(150) // Activate vibration motor for 150ms\n}\n\n"],[0,"// F"]],"start1":433,"start2":433,"length1":175,"length2":8},{"diffs":[[0,"er, "],[-1,"displayNum: string, message"],[1,"label"],[0,": st"]],"start1":526,"start2":526,"length1":35,"length2":13},{"diffs":[[0,"    "],[-1,"displayCharacter(displayNum) // Display the number (e.g., \"1\")"],[1,"basic.showString(label) // Display the label"],[0,"\n   "]],"start1":641,"start2":641,"length1":70,"length2":52},{"diffs":[[0,"dString("],[-1,"message"],[1,"label"],[0,".toLower"]],"start1":707,"start2":707,"length1":23,"length2":21},{"diffs":[[0,"\" + "],[-1,"message"],[1,"label"],[0,".toL"]],"start1":800,"start2":800,"length1":15,"length2":13},{"diffs":[[0,"log\n"],[-1,"        vibrate() // Trigger vibration\n"],[0,"    "]],"start1":834,"start2":834,"length1":47,"length2":8},{"diffs":[[0,"\n}\n\n"],[-1,"// Function to display a character on the LED grid\nfunction displayCharacter(char: string) {\n    basic.clearScreen()\n    basic.showString(char) // Show the character (no scrolling)\n}\n\n// Monitor Button A for \"Reset\"\ninput.onButtonPressed(Button.A, function () {\n    displayCharacter(\"R\") // Display \"R\" on the LED grid\n    radio.sendString(\"reset\") // Send \"reset\" string\n    serial.writeLine(\"Sent: reset\") // Debug log\n    vibrate() // Trigger vibration\n})\n\n// Monitor Button B for \"Start\"\ninput.onButtonPressed(Button.B, function () {\n    if (selectedMinutes > 0) {\n        displayCharacter(\"S\") // Display \"S\" on the LED grid\n        radio.sendString(\"start\") // Send \"start\" string\n        serial.writeLine(\"Sent: start\") // Debug log\n        vibrate() // Trigger vibration\n    }\n})\n\n"],[0,"// C"]],"start1":983,"start2":983,"length1":797,"length2":8},{"diffs":[[0,", 4,"],[-1," \"4\","],[0," \"Fo"]],"start1":1101,"start2":1101,"length1":13,"length2":8},{"diffs":[[0,", 2,"],[-1," \"2\","],[0," \"Tw"]],"start1":1157,"start2":1157,"length1":13,"length2":8},{"diffs":[[0,", 3,"],[-1," \"3\","],[0," \"Th"]],"start1":1212,"start2":1212,"length1":13,"length2":8},{"diffs":[[0,", 1,"],[-1," \"1\","],[0," \"On"]],"start1":1269,"start2":1269,"length1":13,"length2":8},{"diffs":[[0,"\n})\n"],[-1,"\n// Display happy face on reset or restart\ninput.onLogoEvent(TouchButtonEvent.Pressed, function () {\n    basic.showIcon(IconNames.Happy)\n})\n"]],"start1":1292,"start2":1292,"length1":144,"length2":4}]}]},{"timestamp":1732476384193,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"let "],[-1,"isRainbowMode = true // Start with rainbow mode\nlet isRedMode = true // First button press sets to RED\nlet brightnessLevels = [255, 192, 128, 64] // Four brightness levels\nlet currentBrightnessIndex = 0 // Start at max brightness\nlet countdownActive = false // Tracks if countdown is active\n\n// Setup"],[1,"selectedMinutes = 0 // Tracks the currently selected minutes\n\n// Enable"],[0," pul"]],"start1":63,"start2":63,"length1":308,"length2":79},{"diffs":[[0,"stor"],[1,"s"],[0," for "],[-1,"the tilt switch on P2"],[1,"side buttons"],[0,"\npin"]],"start1":151,"start2":151,"length1":34,"length2":26},{"diffs":[[0,"talPin.P"],[1,"1"],[0,"2, PinPu"]],"start1":191,"start2":191,"length1":16,"length2":17},{"diffs":[[0,"Up)\n"],[-1,"\n// Redirect audio to external speaker on P1\nmusic.setBuiltInSpeakerEnabled(false) // Disable internal speaker\npins.analogSetPitchPin(AnalogPin.P1) // Route sound to P1\n\n// Function to "],[1,"pins.setPull(DigitalPin.P13, PinPullMode.PullUp)\npins.setPull(DigitalPin.P14, PinPullMode.PullUp)\npins.setPull(DigitalPin.P15, PinPullMode.PullUp)\n\n// Display h"],[0,"app"],[-1,"l"],[0,"y "],[-1,"the current brightness and update the LEDs\nfunction applyBrightness() {\n    np.setBrightness(brightnessLevels[currentBrightnessIndex]) // Apply brightness\n    if (isRainbowMode) {\n        control.inBackground("],[1,"face on startup\nbasic.showIcon(IconNames.Happy)\n\n// Function to activate vibration motor using joystickbit extension\n"],[0,"func"]],"start1":219,"start2":219,"length1":408,"length2":290},{"diffs":[[0,"ension\nfunction "],[1,"vibrate"],[0,"() {\n           "]],"start1":498,"start2":498,"length1":32,"length2":39},{"diffs":[[0,"    "],[-1,"        rainbowChase() // Restart rainbow effect\n        })\n    } else {\n        // Reapply current color for solid red or blue modes\n        if (isRedMode) {\n            np.showColor(neopixel.colors(NeoPixelColors.Red))\n        } else {\n            np.showColor(neopixel.colors(NeoPixelColors.Blue))\n        }\n        np.show()\n    }\n}\n\n// Rainbow chasing effect\nfunction rainbowChase() {\n    while (isRainbowMode) {\n        for (let j = 0; j < 16; j++"],[1,"joystickbit.Vibration_Motor(150) // Activate vibration motor for 150ms\n}\n\n// Function to handle button presses\nfunction handleButton(pin: DigitalPin, minutes: number, displayNum: string, message: string) {\n    if (pins.digitalReadPin(pin) == 0"],[0,") {\n"]],"start1":526,"start2":526,"length1":461,"length2":251},{"diffs":[[0,"    "],[-1,"    if (!isRainbowMode) return // Exit if mode changes\n            np.clear()\n            for (let i = 0; i < 16; i++) {\n                let hue = ((i + j) * 360) / 16 // Calculate hue for each LED\n                np.setPixelColor(i, neopixel.hsl(hue, 100, 50))\n            }\n            np.setBrightness(brightnessLevels[currentBrightnessIndex]) // Apply brightness\n            np.show()\n            basic.pause(100) // Adjust speed of the rainbow\n        }\n    }\n}\n\n// Function to set LED ring to solid red and play laser sound\nfunction setRed() {\n    isRainbowMode = false\n    isRedMode = true\n    np.clear()\n    np.showColor(neopixel.colors(NeoPixelColors.Red))\n    applyBrightness()\n    playLaserSound()\n}\n\n// Function to set LED ring to solid blue and play inverse laser sound\nfunction setBlue() {\n    isRainbowMode = false\n    isRedMode = false\n    np.clear()\n    np.showColor(neopixel.colors(NeoPixelColors.Blue))\n    applyBrightness()\n    playInverseLaserSound()\n}\n\n// Laser sound effect for Red mode\nfunction playLaserSound() {\n    for (let freq = 1000; freq > 200; freq -= 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid descending tones\n    }\n}\n\n// Inverse laser sound effect for Blue mode\nfunction playInverseLaserSound() {\n    for (let freq = 200; freq <= 1000; freq += 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid ascending tones"],[1,"selectedMinutes = minutes // Set minutes\n        displayCharacter(displayNum) // Display the number (e.g., \"1\")\n        radio.sendString(message.toLowerCase()) // Send the string in lowercase\n        serial.writeLine(\"Sent: \" + message.toLowerCase()) // Debug log\n        vibrate() // Trigger vibration\n        basic.pause(300) // Debounce delay\n        while (pins.digitalReadPin(pin) == 0) {\n            // Wait for button release\n        }"],[0,"\n   "]],"start1":781,"start2":781,"length1":1419,"length2":450},{"diffs":[[0,"cter"],[-1,"\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"one\") {\n    "],[1," (no scrolling)\n}\n\n// Monitor Button A for \"Reset\"\ninput.onButtonPressed(Button.A, function () {\n"],[0,"    "]],"start1":1398,"start2":1398,"length1":136,"length2":105},{"diffs":[[0,"er(\""],[-1,"1\")\n    } else if (receivedString == \"two\") {\n        displayCharacter(\"2\")\n    } else if (receivedString == \"three\") {\n        displayCha"],[1,"R\") // Display \"R\" on the LED grid\n    radio.sendString(\"reset\") // Send \"reset\" string\n    serial.writeLine(\"Sent: reset\") // Debug log\n    vib"],[0,"ra"],[-1,"c"],[0,"te"],[-1,"r(\"3\")\n    } else if (receivedString == \"four\") {\n        displayCharacter(\"4\")\n    } else if (receivedString == \"reset\""],[1,"() // Trigger vibration\n})\n\n// Monitor Button B for \"Start\"\ninput.onButtonPressed(Button.B, function () {\n    if (selectedMinutes > 0"],[0,") {\n"]],"start1":1517,"start2":1517,"length1":271,"length2":289},{"diffs":[[0,"er(\""],[-1,"R\")\n        isRainbowMode = true // Return to rainbow mode\n        control.inBackground(function () {\n            rainbowChase()\n        })\n    } else if (receivedString == \"start\") {\n        displayCha"],[1,"S\") // Display \"S\" on the LED grid\n        radio.sendString(\"start\") // Send \"start\" string\n        serial.writeLine(\"Sent: start\") // Debug log\n        vib"],[0,"ra"],[-1,"c"],[0,"te"],[-1,"r(\"S\")\n        // Placeholder for countdown functionality\n    }\n})\n\n// Adjust brightness with Button B\ninput.onButtonPressed(Button.B, function () {\n    currentBrightnessIndex = (currentBrightnessIndex + 1) % brightnessLevels.length\n    applyBrightness()\n})\n\n// Monitor the tilt swit"],[1,"() // Trigger vibration\n    }\n})\n\n// Continuously monitor side buttons for state "],[0,"ch"],[-1," "],[0,"an"],[-1,"d toggle between red and blue"],[1,"ges"],[0,"\nbas"]],"start1":1828,"start2":1828,"length1":532,"length2":256},{"diffs":[[0,"    "],[-1,"if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        if (isRainbowMode) {\n            setRed() // Stop Rainbow mode and switch to Red\n        } else {\n            if (isRedMode) {\n                setBlue() // Switch to Blue\n            } else {\n                setRed() // Switch to Red\n            }\n        }\n        basic.pause(500) // Debounce delay\n        while (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            // Wait for switch release\n        }\n    }\n})\n\n// Start the rainbow mode on startup\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB) // 16-LED ring\ncontrol.inBackground(function () {\n    rainbowChase()\n})\nbasic.showIcon(IconNames.Heart) // Display heart on startup"],[1,"handleButton(DigitalPin.P12, 4, \"4\", \"Four\") // Button C\n    handleButton(DigitalPin.P15, 2, \"2\", \"Two\") // Button F\n    handleButton(DigitalPin.P14, 3, \"3\", \"Three\") // Button E\n    handleButton(DigitalPin.P13, 1, \"1\", \"One\") // Button D\n})\n\n// Display happy face on reset or restart\ninput.onLogoEvent(TouchButtonEvent.Pressed, function () {\n    basic.showIcon(IconNames.Happy)\n})"],[0,"\n"]],"start1":2109,"start2":2109,"length1":708,"length2":386}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"0.4\""],[-1,",\n        \"neopixel\": \"github:microsoft/pxt-neopixel#v0.7.6\""],[0,"\n   "]],"start1":216,"start2":216,"length1":68,"length2":8}]}]},{"timestamp":1732476624601,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ReadPin("],[1,"DigitalPin."],[0,"P2) == 0"]],"start1":4311,"start2":4311,"length1":16,"length2":27}]}]},{"timestamp":1732477346904,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"radio.setGroup(1) // Ensure both micro:bits use the same group\nlet isRainbowMode = true // Start with rainbow mode\nlet isRedMode = true // First button press sets to RED\nlet brightnessLevels = [255, 192, 128, 64] // Four brightness levels\nlet currentBrightnessIndex = 0 // Start at max brightness\nlet countdownActive = false // Tracks if countdown is active\n\n// Setup pull-up resistor for the tilt switch on P2\npins.setPull(DigitalPin.P2, PinPullMode.PullUp)\n\n// Redirect audio to external speaker on P1\nmusic.setBuiltInSpeakerEnabled(false) // Disable internal speaker\npins.analogSetPitchPin(AnalogPin.P1) // Route sound to P1\n\n// Function to apply the current brightness and update the LEDs\nfunction applyBrightness() {\n    np.setBrightness(brightnessLevels[currentBrightnessIndex]) // Apply brightness\n    if (isRainbowMode) {\n        control.inBackground(function () {\n            rainbowChase() // Restart rainbow effect\n        })\n    } else {\n        // Reapply current color for solid red or blue modes\n        if (isRedMode) {\n            np.showColor(neopixel.colors(NeoPixelColors.Red))\n        } else {\n            np.showColor(neopixel.colors(NeoPixelColors.Blue))\n        }\n        np.show()\n    }\n}\n\n// Rainbow chasing effect\nfunction rainbowChase() {\n    while (isRainbowMode) {\n        for (let j = 0; j < 16; j++) {\n            if (!isRainbowMode) return // Exit if mode changes\n            np.clear()\n            for (let i = 0; i < 16; i++) {\n                let hue = ((i + j) * 360) / 16 // Calculate hue for each LED\n                np.setPixelColor(i, neopixel.hsl(hue, 100, 50))\n            }\n            np.setBrightness(brightnessLevels[currentBrightnessIndex]) // Apply brightness\n            np.show()\n            basic.pause(100) // Adjust speed of the rainbow\n        }\n    }\n}\n\n// Function to set LED ring to solid red and play laser sound\nfunction setRed() {\n    isRainbowMode = false\n    isRedMode = true\n    np.clear()\n    np.showColor(neopixel.colors(NeoPixelColors.Red))\n    applyBrightness()\n    playLaserSound()\n}\n\n// Function to set LED ring to solid blue and play inverse laser sound\nfunction setBlue() {\n    isRainbowMode = false\n    isRedMode = false\n    np.clear()\n    np.showColor(neopixel.colors(NeoPixelColors.Blue))\n    applyBrightness()\n    playInverseLaserSound()\n}\n\n// Laser sound effect for Red mode\nfunction playLaserSound() {\n    for (let freq = 1000; freq > 200; freq -= 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid descending tones\n    }\n}\n\n// Inverse laser sound effect for Blue mode\nfunction playInverseLaserSound() {\n    for (let freq = 200; freq <= 1000; freq += 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid ascending tones\n    }\n}\n\n// Function to display a character on the LED grid\nfunction displayCharacter(char: string) {\n    basic.clearScreen()\n    basic.showString(char) // Show the character\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"one\") {\n        displayCharacter(\"1\")\n    } else if (receivedString == \"two\") {\n        displayCharacter(\"2\")\n    } else if (receivedString == \"three\") {\n        displayCharacter(\"3\")\n    } else if (receivedString == \"four\") {\n        displayCharacter(\"4\")\n    } else if (receivedString == \"reset\") {\n        displayCharacter(\"R\")\n        isRainbowMode = true // Return to rainbow mode\n        control.inBackground(function () {\n            rainbowChase()\n        })\n    } else if (receivedString == \"start\") {\n        displayCharacter(\"S\")\n        // Placeholder for countdown functionality\n    }\n})\n\n// Adjust brightness with Button B\ninput.onButtonPressed(Button.B, function () {\n    currentBrightnessIndex = (currentBrightnessIndex + 1) % brightnessLevels.length\n    applyBrightness()\n})\n\n// Monitor the tilt switch and toggle between red and blue\nbasic.forever(function () {\n    if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        if (isRainbowMode) {\n            setRed() // Stop Rainbow mode and switch to Red\n        } else {\n            if (isRedMode) {\n                setBlue() // Switch to Blue\n            } else {\n                setRed() // Switch to Red\n            }\n        }\n        basic.pause(500) // Debounce delay\n        while (pins.digitalReadPin(P2) == 0) {\n            // Wait for switch release\n        }\n    }\n})\n\n// Start the rainbow mode on startup\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB) // 16-LED ring\ncontrol.inBackground(function () {\n    rainbowChase()\n})\nbasic.showIcon(IconNames.Heart) // Display heart on startup\n"]],"start1":0,"start2":0,"length1":0,"length2":4621}]}]},{"timestamp":1732477501380,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"radio.setGroup(1) // Ensure both micro:bits use the same group\nlet isRainbowMode = true // Start with rainbow mode\nlet isRedMode = true // First button press sets to RED\nlet brightnessLevels = [255, 192, 128, 64] // Four brightness levels\nlet currentBrightnessIndex = 0 // Start at max brightness\nlet countdownTime = 0 // Tracks countdown time in seconds\nlet countdownActive = false // Tracks if countdown is active\n\n// Setup pull-up resistor for the tilt switch on P2\npins.setPull(DigitalPin.P2, PinPullMode.PullUp)\n\n// Redirect audio to external speaker on P1\nmusic.setBuiltInSpeakerEnabled(false) // Disable internal speaker\npins.analogSetPitchPin(AnalogPin.P1) // Route sound to P1\n\n// Function to apply the current brightness and update the LEDs\nfunction applyBrightness() {\n    np.setBrightness(brightnessLevels[currentBrightnessIndex]) // Apply brightness\n    if (isRainbowMode) {\n        control.inBackground(function () {\n            rainbowChase() // Restart rainbow effect\n        })\n    } else {\n        // Reapply current color for solid red or blue modes\n        if (isRedMode) {\n            np.showColor(neopixel.colors(NeoPixelColors.Red))\n        } else {\n            np.showColor(neopixel.colors(NeoPixelColors.Blue))\n        }\n        np.show()\n    }\n}\n\n// Rainbow chasing effect\nfunction rainbowChase() {\n    while (isRainbowMode) {\n        for (let j = 0; j < 16; j++) {\n            if (!isRainbowMode) return // Exit if mode changes\n            np.clear()\n            for (let i = 0; i < 16; i++) {\n                let hue = ((i + j) * 360) / 16 // Calculate hue for each LED\n                np.setPixelColor(i, neopixel.hsl(hue, 100, 50))\n            }\n            np.setBrightness(brightnessLevels[currentBrightnessIndex]) // Apply brightness\n            np.show()\n            basic.pause(100) // Adjust speed of the rainbow\n        }\n    }\n}\n\n// Function to set LED ring to solid red and play laser sound\nfunction setRed() {\n    isRainbowMode = false\n    isRedMode = true\n    np.clear()\n    np.showColor(neopixel.colors(NeoPixelColors.Red))\n    applyBrightness()\n    playLaserSound()\n}\n\n// Function to set LED ring to solid blue and play inverse laser sound\nfunction setBlue() {\n    isRainbowMode = false\n    isRedMode = false\n    np.clear()\n    np.showColor(neopixel.colors(NeoPixelColors.Blue))\n    applyBrightness()\n    playInverseLaserSound()\n}\n\n// Laser sound effect for Red mode\nfunction playLaserSound() {\n    for (let freq = 1000; freq > 200; freq -= 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid descending tones\n    }\n}\n\n// Inverse laser sound effect for Blue mode\nfunction playInverseLaserSound() {\n    for (let freq = 200; freq <= 1000; freq += 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid ascending tones\n    }\n}\n\n// Function to display a character on the LED grid\nfunction displayCharacter(char: string) {\n    basic.clearScreen()\n    basic.showString(char) // Show the character\n}\n\n// Countdown Timer Function\nfunction startCountdown(seconds: number) {\n    countdownActive = true\n    for (let i = seconds; i > 0; i--) {\n        displayCharacter(i.toString()) // Display remaining time\n        basic.pause(1000) // 1-second delay\n        if (i <= 10) {\n            flashNeoPixels() // Flash LEDs for the last 10 seconds\n        }\n    }\n    endCountdown() // End the countdown\n}\n\n// Flashing NeoPixels for the last 10 seconds\nfunction flashNeoPixels() {\n    for (let j = 0; j < 2; j++) { // Flash twice per second\n        np.clear()\n        np.show()\n        basic.pause(250)\n        np.showColor(neopixel.colors(isRedMode ? NeoPixelColors.Red : NeoPixelColors.Blue))\n        basic.pause(250)\n    }\n}\n\n// End Countdown: Turn off LEDs and start pulsating effect\nfunction endCountdown() {\n    np.clear()\n    np.show()\n    basic.pause(5000) // Wait for 5 seconds\n    for (let i = 0; i < 10; i++) { // Pulsate 10 times\n        np.setBrightness(32) // Dim LEDs\n        np.show()\n        basic.pause(500)\n        np.setBrightness(255) // Brighten LEDs\n        np.show()\n        basic.pause(500)\n    }\n    countdownActive = false // Reset countdown state\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"one\") {\n        displayCharacter(\"1\")\n        countdownTime = 60\n    } else if (receivedString == \"two\") {\n        displayCharacter(\"2\")\n        countdownTime = 120\n    } else if (receivedString == \"three\") {\n        displayCharacter(\"3\")\n        countdownTime = 180\n    } else if (receivedString == \"four\") {\n        displayCharacter(\"4\")\n        countdownTime = 240\n    } else if (receivedString == \"reset\") {\n        displayCharacter(\"R\")\n        isRainbowMode = true // Return to rainbow mode\n        control.inBackground(function () {\n            rainbowChase()\n        })\n    } else if (receivedString == \"start\" && countdownTime > 0 && !countdownActive) {\n        displayCharacter(\"S\")\n        control.inBackground(function () {\n            startCountdown(countdownTime)\n        })\n    }\n})\n\n// Adjust brightness with Button B\ninput.onButtonPressed(Button.B, function () {\n    currentBrightnessIndex = (currentBrightnessIndex + 1) % brightnessLevels.length\n    applyBrightness()\n})\n\n// Monitor the tilt switch and toggle between red and blue\nbasic.forever(function () {\n    if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        if (isRainbowMode) {\n            setRed() // Stop Rainbow mode and switch to Red\n        } else {\n            if (isRedMode) {\n                setBlue() // Switch to Blue\n            } else {\n                setRed() // Switch to Red\n            }\n        }\n        basic.pause(500) // Debounce delay\n        while (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            // Wait for switch release\n        }\n    }\n})\n\n// Start the rainbow mode on startup\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB) // 16-LED ring\ncontrol.inBackground(function () {\n    rainbowChase()\n})\nbasic.showIcon(IconNames.Heart) // Display heart on startup\n"]],"start1":0,"start2":0,"length1":6054,"length2":0}]}]},{"timestamp":1732477518325,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"tive"],[-1,"\nlet gameOver = false // Tracks if the game is over\nlet lastColor = neopixel.colors(NeoPixelColors.Red) // Default to Red"],[0,"\n\n//"]],"start1":411,"start2":411,"length1":129,"length2":8},{"diffs":[[0,"        "],[-1,"np.showColor(lastColor)"],[1,"if (isRedMode) {\n            np.showColor(neopixel.colors(NeoPixelColors.Red))\n        } else {\n            np.showColor(neopixel.colors(NeoPixelColors.Blue))\n        }"],[0,"\n       "]],"start1":1069,"start2":1069,"length1":39,"length2":184},{"diffs":[[0," = true\n    "],[-1,"last"],[1,"np.clear()\n    np.show"],[0,"Color"],[-1," = "],[1,"("],[0,"neopixel.col"]],"start1":1989,"start2":1989,"length1":36,"length2":52},{"diffs":[[0,"Red)"],[-1,"\n    np.showColor(lastColor"],[0,")\n  "]],"start1":2060,"start2":2060,"length1":35,"length2":8},{"diffs":[[0,"    "],[-1,"last"],[1,"np.clear()\n    np.show"],[0,"Color"],[-1," = "],[1,"("],[0,"neop"]],"start1":2252,"start2":2252,"length1":20,"length2":36},{"diffs":[[0,"lue)"],[-1,"\n    np.showColor(lastColor"],[0,")\n  "]],"start1":2316,"start2":2316,"length1":35,"length2":8},{"diffs":[[0,"   }\n}\n\n"],[1,"// Function to display a character on the LED grid\nfunction displayCharacter(char: string) {\n    basic.clearScreen()\n    basic.showString(char) // Show the character\n}\n\n"],[0,"// Count"]],"start1":2813,"start2":2813,"length1":16,"length2":185},{"diffs":[[0,"rue\n"],[-1,"    gameOver = false\n"],[0,"    "]],"start1":3084,"start2":3084,"length1":29,"length2":8},{"diffs":[[0,"    "],[-1,"if (i <= 10) {\n            flashNeoPixels() // Flash LEDs continuously\n        } else {\n            basic.clearScreen()\n            basic.showNumber(i) // Display remaining time\n        }\n        basic.pause(1000) // 1-second delay\n    }\n    endCountdown() // End the countdown\n}\n\n// Flashing NeoPixels for the last 10 seconds\nfunction flashNeoPixels() {\n    np.setBrightness(255)\n    np.showColor(lastColor)\n    basic.pause(250)\n    np.clear()\n    np.show()\n"],[1,"displayCharacter(i.toString()) // Display remaining time\n        basic.pause(1000) // 1-second delay\n        if (i <= 10) {\n            flashNeoPixels() // Flash LEDs for the last 10 seconds\n        }\n    }\n    endCountdown() // End the countdown\n}\n\n// Flashing NeoPixels for the last 10 seconds\nfunction flashNeoPixels() {\n    for (let j = 0; j < 2; j++) { // Flash twice per second\n        np.clear()\n        np.show()\n        basic.pause(250)\n        np.showColor(neopixel.colors(isRedMode ? NeoPixelColors.Red : NeoPixelColors.Blue))\n    "],[0,"    "]],"start1":3132,"start2":3132,"length1":467,"length2":550},{"diffs":[[0,"se(250)\n"],[1,"    }\n"],[0,"}\n\n// En"]],"start1":3691,"start2":3691,"length1":16,"length2":22},{"diffs":[[0,"    "],[-1,"np.showColor(lastColor) // Resume last color\n    gameO"],[1,"for (let i = 0; i < 10; i++) { // Pulsate 10 times\n        np.setBrightness(32) // Dim LEDs\n        np.show()\n        basic.pause(500)\n        np.setBrightness(255) // Brighten LEDs\n        np.show()\n        basic.pause(500)\n    }\n    countdownActi"],[0,"ve"],[-1,"r"],[0," = "],[-1,"tru"],[1,"fals"],[0,"e // "],[-1,"Game is over"],[1,"Reset countdown state"],[0,"\n}\n\n"]],"start1":3866,"start2":3866,"length1":88,"length2":291},{"diffs":[[0,"    "],[-1,"countdownTime = 60\n        basic.showNumber(1) // Display \"1\" immediately\n    } else if (receivedString == \"two\") {\n        countdownTime = 120\n        basic.showNumber(2) // Display \"2\" immediately\n    } else if (receivedString == \"three\") {\n        countdownTime = 180\n        basic.showNumber(3) // Display \"3\" immediately\n    } else if (receivedString == \"four\") {\n        countdownTime = 240\n        basic.showNumber(4) // Display \"4\" immediately"],[1,"displayCharacter(\"1\")\n        countdownTime = 60\n    } else if (receivedString == \"two\") {\n        displayCharacter(\"2\")\n        countdownTime = 120\n    } else if (receivedString == \"three\") {\n        displayCharacter(\"3\")\n        countdownTime = 180\n    } else if (receivedString == \"four\") {\n        displayCharacter(\"4\")\n        countdownTime = 240"],[0,"\n   "]],"start1":4281,"start2":4281,"length1":459,"length2":359},{"diffs":[[0,"ode\n"],[-1,"        gameOver = false // Allow inputs again\n"],[0,"    "]],"start1":4762,"start2":4762,"length1":55,"length2":8},{"diffs":[[0,"        "],[-1,"basic.showString"],[1,"displayCharacter"],[0,"(\"S\")\n  "]],"start1":4932,"start2":4932,"length1":32,"length2":32},{"diffs":[[0,") {\n"],[-1,"    if (!gameOver) {\n    "],[0,"    "]],"start1":5145,"start2":5145,"length1":33,"length2":8},{"diffs":[[0,".length\n"],[-1,"    "],[0,"    appl"]],"start1":5225,"start2":5225,"length1":20,"length2":16},{"diffs":[[0,"tness()\n"],[-1,"    }\n"],[0,"})\n\n// M"]],"start1":5247,"start2":5247,"length1":22,"length2":16},{"diffs":[[0,"if ("],[-1,"!gameOver && "],[0,"pins"]],"start1":5350,"start2":5350,"length1":21,"length2":8},{"diffs":[[0,"ReadPin("],[1,"DigitalPin."],[0,"P2) == 0"]],"start1":5733,"start2":5733,"length1":16,"length2":27}]}]},{"timestamp":1732478106855,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"displaySpinningWheel() // Display spinning wheel during countdown\n        basic.pause(1000) // 1-second delay\n        if (i <= 10) {\n            flashNeoPixels() // Flash LEDs continuously\n        }\n    }\n    endCountdown() // End the countdown\n}\n\n// Spinning wheel display for countdown\nfunction displaySpinningWheel() {\n    if (Math.randomBoolean()) {\n        basic.showString(\"X\")\n    } else {"],[1,"if (i <= 10) {\n            flashNeoPixels() // Flash LEDs continuously\n        } else {\n            basic.clearScreen()\n            basic.showNumber(i) // Display remaining time\n        }\n        basic.pause(1000) // 1-second delay"],[0,"\n    "],[1,"}\n"],[0,"    "],[-1,"basic.showString(\"+\")\n    }"],[1,"endCountdown() // End the countdown"],[0,"\n}\n\n"]],"start1":2982,"start2":2982,"length1":440,"length2":285},{"diffs":[[0,"e = "],[-1,"10 // Temporarily set to 10 seconds for testing"],[1,"60"],[0,"\n   "]],"start1":3855,"start2":3855,"length1":55,"length2":10},{"diffs":[[0,"e = "],[1,"1"],[0,"20"],[-1," // Temporarily set to 20 seconds for testing"],[0,"\n   "]],"start1":3979,"start2":3979,"length1":55,"length2":11},{"diffs":[[0,"e = "],[-1,"30 // Temporarily set to 30 seconds for testing"],[1,"180"],[0,"\n   "]],"start1":4106,"start2":4106,"length1":55,"length2":11},{"diffs":[[0,"e = "],[1,"2"],[0,"40"],[-1," // Temporarily set to 40 seconds for testing"],[0,"\n   "]],"start1":4232,"start2":4232,"length1":55,"length2":11},{"diffs":[[0,"        "],[-1,"basic.showString"],[1,"displayCharacter"],[0,"(\"R\")\n  "]],"start1":4339,"start2":4339,"length1":32,"length2":32},{"diffs":[[0,"ain\n"],[-1,"        countdownActive = false\n"],[0,"    "]],"start1":4467,"start2":4467,"length1":40,"length2":8},{"diffs":[[0,"italReadPin("],[-1,"DigitalPin."],[0,"P2) == 0) {\n"]],"start1":5482,"start2":5482,"length1":35,"length2":24}]}]},{"timestamp":1732479018762,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"radio.setGroup(1) // Ensure both micro:bits use the same group\nlet isRainbowMode = true // Start with rainbow mode\nlet isRedMode = true // First button press sets to RED\nlet brightnessLevels = [255, 192, 128, 64] // Four brightness levels\nlet currentBrightnessIndex = 0 // Start at max brightness\nlet countdownTime = 0 // Tracks countdown time in seconds\nlet countdownActive = false // Tracks if countdown is active\nlet gameOver = false // Tracks if the game is over\nlet lastColor = neopixel.colors(NeoPixelColors.Red) // Default to Red\n\n// Setup pull-up resistor for the tilt switch on P2\npins.setPull(DigitalPin.P2, PinPullMode.PullUp)\n\n// Redirect audio to external speaker on P1\nmusic.setBuiltInSpeakerEnabled(false) // Disable internal speaker\npins.analogSetPitchPin(AnalogPin.P1) // Route sound to P1\n\n// Function to apply the current brightness and update the LEDs\nfunction applyBrightness() {\n    np.setBrightness(brightnessLevels[currentBrightnessIndex]) // Apply brightness\n    if (isRainbowMode) {\n        control.inBackground(function () {\n            rainbowChase() // Restart rainbow effect\n        })\n    } else {\n        // Reapply current color for solid red or blue modes\n        np.showColor(lastColor)\n        np.show()\n    }\n}\n\n// Rainbow chasing effect\nfunction rainbowChase() {\n    while (isRainbowMode) {\n        for (let j = 0; j < 16; j++) {\n            if (!isRainbowMode) return // Exit if mode changes\n            np.clear()\n            for (let i = 0; i < 16; i++) {\n                let hue = ((i + j) * 360) / 16 // Calculate hue for each LED\n                np.setPixelColor(i, neopixel.hsl(hue, 100, 50))\n            }\n            np.setBrightness(brightnessLevels[currentBrightnessIndex]) // Apply brightness\n            np.show()\n            basic.pause(100) // Adjust speed of the rainbow\n        }\n    }\n}\n\n// Function to set LED ring to solid red and play laser sound\nfunction setRed() {\n    isRainbowMode = false\n    isRedMode = true\n    lastColor = neopixel.colors(NeoPixelColors.Red)\n    np.showColor(lastColor)\n    applyBrightness()\n    playLaserSound()\n}\n\n// Function to set LED ring to solid blue and play inverse laser sound\nfunction setBlue() {\n    isRainbowMode = false\n    isRedMode = false\n    lastColor = neopixel.colors(NeoPixelColors.Blue)\n    np.showColor(lastColor)\n    applyBrightness()\n    playInverseLaserSound()\n}\n\n// Laser sound effect for Red mode\nfunction playLaserSound() {\n    for (let freq = 1000; freq > 200; freq -= 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid descending tones\n    }\n}\n\n// Inverse laser sound effect for Blue mode\nfunction playInverseLaserSound() {\n    for (let freq = 200; freq <= 1000; freq += 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid ascending tones\n    }\n}\n\n// Countdown Timer Function\nfunction startCountdown(seconds: number) {\n    countdownActive = true\n    gameOver = false\n    for (let i = seconds; i > 0; i--) {\n        displaySpinningWheel() // Display spinning wheel during countdown\n        basic.pause(1000) // 1-second delay\n        if (i <= 10) {\n            flashNeoPixels() // Flash LEDs continuously\n        }\n    }\n    endCountdown() // End the countdown\n}\n\n// Spinning wheel display for countdown\nfunction displaySpinningWheel() {\n    if (Math.randomBoolean()) {\n        basic.showString(\"X\")\n    } else {\n        basic.showString(\"+\")\n    }\n}\n\n// Flashing NeoPixels for the last 10 seconds\nfunction flashNeoPixels() {\n    np.setBrightness(255)\n    np.showColor(lastColor)\n    basic.pause(250)\n    np.clear()\n    np.show()\n    basic.pause(250)\n}\n\n// End Countdown: Turn off LEDs and start pulsating effect\nfunction endCountdown() {\n    np.clear()\n    np.show()\n    basic.pause(5000) // Wait for 5 seconds\n    np.showColor(lastColor) // Resume last color\n    gameOver = true // Game is over\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"one\") {\n        countdownTime = 10 // Temporarily set to 10 seconds for testing\n        basic.showNumber(1) // Display \"1\" immediately\n    } else if (receivedString == \"two\") {\n        countdownTime = 20 // Temporarily set to 20 seconds for testing\n        basic.showNumber(2) // Display \"2\" immediately\n    } else if (receivedString == \"three\") {\n        countdownTime = 30 // Temporarily set to 30 seconds for testing\n        basic.showNumber(3) // Display \"3\" immediately\n    } else if (receivedString == \"four\") {\n        countdownTime = 40 // Temporarily set to 40 seconds for testing\n        basic.showNumber(4) // Display \"4\" immediately\n    } else if (receivedString == \"reset\") {\n        basic.showString(\"R\")\n        isRainbowMode = true // Return to rainbow mode\n        gameOver = false // Allow inputs again\n        countdownActive = false\n        control.inBackground(function () {\n            rainbowChase()\n        })\n    } else if (receivedString == \"start\" && countdownTime > 0 && !countdownActive) {\n        basic.showString(\"S\")\n        control.inBackground(function () {\n            startCountdown(countdownTime)\n        })\n    }\n})\n\n// Adjust brightness with Button B\ninput.onButtonPressed(Button.B, function () {\n    if (!gameOver) {\n        currentBrightnessIndex = (currentBrightnessIndex + 1) % brightnessLevels.length\n        applyBrightness()\n    }\n})\n\n// Monitor the tilt switch and toggle between red and blue\nbasic.forever(function () {\n    if (!gameOver && pins.digitalReadPin(DigitalPin.P2) == 0) {\n        if (isRainbowMode) {\n            setRed() // Stop Rainbow mode and switch to Red\n        } else {\n            if (isRedMode) {\n                setBlue() // Switch to Blue\n            } else {\n                setRed() // Switch to Red\n            }\n        }\n        basic.pause(500) // Debounce delay\n        while (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            // Wait for switch release\n        }\n    }\n})\n\n// Start the rainbow mode on startup\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB) // 16-LED ring\ncontrol.inBackground(function () {\n    rainbowChase()\n})\nbasic.showIcon(IconNames.Heart) // Display heart on startup\n"]],"start1":0,"start2":0,"length1":0,"length2":6171}]}]},{"timestamp":1732479934709,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"radio.setGroup(1) // Ensure both micro:bits use the same group\nlet isRainbowMode = true // Start with rainbow mode\nlet isRedMode = true // First button press sets to RED\nlet brightnessLevels = [255, 192, 128, 64, 32, 16, 8] // Gradual brightness levels\nlet currentBrightnessIndex = 0 // Start at max brightness\nlet countdownTime = 0 // Tracks countdown time in seconds\nlet countdownActive = false // Tracks if countdown is active\nlet gameOver = false // Tracks if the game is over\nlet lastColor = neopixel.colors(NeoPixelColors.Red) // Default to Red\n\n// Setup pull-up resistor for the tilt switch on P2\npins.setPull(DigitalPin.P2, PinPullMode.PullUp)\n\n// Redirect audio to external speaker on P1\nmusic.setBuiltInSpeakerEnabled(false) // Disable internal speaker\npins.analogSetPitchPin(AnalogPin.P1) // Route sound to P1\n\n// Function to apply the current brightness and update the LEDs\nfunction applyBrightness() {\n    np.setBrightness(brightnessLevels[currentBrightnessIndex]) // Apply brightness\n    if (isRainbowMode) {\n        control.inBackground(function () {\n            rainbowChase() // Restart rainbow effect\n        })\n    } else {\n        // Reapply current color for solid red or blue modes\n        np.showColor(lastColor)\n        np.show()\n    }\n}\n\n// Rainbow chasing effect\nfunction rainbowChase() {\n    while (isRainbowMode) {\n        for (let j = 0; j < 16; j++) {\n            if (!isRainbowMode) return // Exit if mode changes\n            np.clear()\n            for (let i = 0; i < 16; i++) {\n                let hue = ((i + j) * 360) / 16 // Calculate hue for each LED\n                np.setPixelColor(i, neopixel.hsl(hue, 100, 50))\n            }\n            np.setBrightness(brightnessLevels[currentBrightnessIndex]) // Apply brightness\n            np.show()\n            basic.pause(100) // Adjust speed of the rainbow\n        }\n    }\n}\n\n// Function to set LED ring to solid red and play laser sound\nfunction setRed() {\n    isRainbowMode = false\n    isRedMode = true\n    lastColor = neopixel.colors(NeoPixelColors.Red)\n    np.showColor(lastColor)\n    applyBrightness()\n    playLaserSound()\n}\n\n// Function to set LED ring to solid blue and play inverse laser sound\nfunction setBlue() {\n    isRainbowMode = false\n    isRedMode = false\n    lastColor = neopixel.colors(NeoPixelColors.Blue)\n    np.showColor(lastColor)\n    applyBrightness()\n    playInverseLaserSound()\n}\n\n// Laser sound effect for Red mode\nfunction playLaserSound() {\n    for (let freq = 1000; freq > 200; freq -= 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid descending tones\n    }\n}\n\n// Inverse laser sound effect for Blue mode\nfunction playInverseLaserSound() {\n    for (let freq = 200; freq <= 1000; freq += 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid ascending tones\n    }\n}\n\n// Countdown Timer Function\nfunction startCountdown(seconds: number) {\n    countdownActive = true\n    gameOver = false\n    let snakeTask = control.runInBackground(() => runSnakePattern(seconds)) // Run snake pattern in parallel\n    for (let i = seconds; i > 0; i--) {\n        if (i <= 10) {\n            flashNeoPixels() // Flash LEDs continuously\n        }\n        basic.pause(1000) // 1-second delay\n    }\n    endCountdown() // End the countdown\n}\n\n// Run Snake Pattern\nfunction runSnakePattern(duration: number) {\n    let position = 0 // LED grid position\n    for (let i = 0; i < duration * 10; i++) { // Ensure it runs for the duration of the countdown\n        if (!countdownActive) break // Stop if the countdown is no longer active\n        displaySnake(position)\n        position = (position + 1) % 25\n        basic.pause(50) // Speed up snake pattern\n    }\n}\n\n// Snake pattern for LED grid\nfunction displaySnake(position: number) {\n    let x = position % 5\n    let y = Math.floor(position / 5)\n    basic.clearScreen()\n    if (y % 2 == 0) {\n        // Even rows light up left-to-right\n        led.plot(x, y)\n    } else {\n        // Odd rows light up right-to-left\n        led.plot(4 - x, y)\n    }\n}\n\n// Flashing NeoPixels for the last 10 seconds\nfunction flashNeoPixels() {\n    np.setBrightness(255)\n    np.showColor(lastColor)\n    basic.pause(250)\n    np.clear()\n    np.show()\n    basic.pause(250)\n}\n\n// End Countdown: Turn off LEDs and gradually turn them back on\nfunction endCountdown() {\n    countdownActive = false // Stop the snake pattern\n    np.clear()\n    np.show()\n    basic.pause(5000) // Wait for 5 seconds\n    for (let i = 1; i <= brightnessLevels.length; i++) { // Gradually brighte\n"]],"start1":0,"start2":0,"length1":4535,"length2":0}]}]},{"timestamp":1732479934996,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"alse\n   "],[1," let snakeTask ="],[0," control"]],"start1":2947,"start2":2947,"length1":16,"length2":32},{"diffs":[[0,"arallel\n"],[-1,""],[0,"    for "]],"start1":3053,"start2":3053,"length1":16,"length2":16},{"diffs":[[0,"and "],[-1,"display \"X\""],[1,"gradually turn them back on"],[0,"\nfun"]],"start1":4272,"start2":4272,"length1":19,"length2":35},{"diffs":[[0,"nds\n"],[-1,"    displayX() // Show \"X\" on the LED grid\n"],[0,"    "]],"start1":4453,"start2":4453,"length1":51,"length2":8},{"diffs":[[0,"ghte"],[-1,"n NeoPixels\n        np.setBrightness(brightnessLevels[i - 1])\n        np.showColor(lastColor)\n        basic.pause(1000) // Slower brightness increments\n    }\n    gameOver = true // Game is over\n}\n\n// Display \"X\" on the LED grid\nfunction displayX() {\n    basic.clearScreen()\n    for (let i = 0; i < 5; i++) {\n        led.plot(i, i) // Top-left to bottom-right diagonal\n        led.plot(i, 4 - i) // Top-right to bottom-left diagonal\n    }\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"one\") {\n        countdownTime = 60\n        basic.showNumber(1)\n    } else if (receivedString == \"two\") {\n        countdownTime = 120\n        basic.showNumber(2)\n    } else if (receivedString == \"three\") {\n        countdownTime = 180\n        basic.showNumber(3)\n    } else if (receivedString == \"four\") {\n        countdownTime = 240\n        basic.showNumber(4)\n    } else if (receivedString == \"reset\") {\n        basic.showString(\"R\")\n        isRainbowMode = true\n        gameOver = false\n        countdownActive = false\n        control.inBackground(function () {\n            rainbowChase()\n        })\n    } else if (receivedString == \"start\" && countdownTime > 0 && !countdownActive) {\n        basic.showString(\"S\")\n        control.inBackground(function () {\n            startCountdown(countdownTime)\n        })\n    }\n})\n\n// Adjust brightness with Button B\ninput.onButtonPressed(Button.B, function () {\n    if (!gameOver) {\n        currentBrightnessIndex = (currentBrightnessIndex + 1) % brightnessLevels.length\n        applyBrightness()\n    }\n})\n\n// Monitor the tilt switch and toggle between red and blue\nbasic.forever(function () {\n    if (!gameOver && pins.digitalReadPin(DigitalPin.P2) == 0) {\n        if (isRainbowMode) {\n            setRed()\n        } else {\n            if (isRedMode) {\n                setBlue()\n            } else {\n                setRed()\n            }\n        }\n        basic.pause(500) // Debounce delay\n        while (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            // Wait for switch release\n        }\n    }\n})\n\n// Start the rainbow mode on startup\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB) // 16-LED ring\ncontrol.inBackground(function () {\n    rainbowChase()\n})\nbasic.showIcon(IconNames.Heart) // Display heart on startup"],[0,"\n"]],"start1":4530,"start2":4530,"length1":2339,"length2":5}]}]},{"timestamp":1732480742769,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"onds"],[-1," + 14"],[0,")) /"]],"start1":3005,"start2":3005,"length1":13,"length2":8},{"diffs":[[0,"ern "],[-1,"for countdown + flashing + off"],[1,"in parallel"],[0,"\n   "]],"start1":3029,"start2":3029,"length1":38,"length2":19},{"diffs":[[0,"usly"],[-1," in the last 10 seconds"],[0,"\n   "]],"start1":3159,"start2":3159,"length1":31,"length2":8},{"diffs":[[0,"ation * "],[-1,"2"],[1,"1"],[0,"0; i++) "]],"start1":3402,"start2":3402,"length1":17,"length2":17},{"diffs":[[0,"the "],[-1,"extended duratio"],[1,"duration of the countdow"],[0,"n\n  "]],"start1":3443,"start2":3443,"length1":24,"length2":32}]}]},{"timestamp":1732480920970,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    }\n}\n"],[1,"\n"],[0,"// Count"]],"start1":2824,"start2":2824,"length1":16,"length2":17},{"diffs":[[0,"off LEDs"],[-1,","],[1," and"],[0," display"]],"start1":4286,"start2":4286,"length1":17,"length2":20},{"diffs":[[0," \"X\""],[-1,", and play buzzer"],[0,"\nfun"]],"start1":4306,"start2":4306,"length1":25,"length2":8},{"diffs":[[0,"ern\n"],[-1,"    gameOver = true // Game is over, deactivate microswitch immediately\n"],[0,"    "]],"start1":4387,"start2":4387,"length1":80,"length2":8},{"diffs":[[0,"c.pause("],[-1,"4"],[1,"5"],[0,"000) // "]],"start1":4428,"start2":4428,"length1":17,"length2":17},{"diffs":[[0,"for "],[-1,"4"],[1,"5"],[0," seconds"],[-1," (NeoPixels off)"],[0,"\n   "]],"start1":4450,"start2":4450,"length1":33,"length2":17},{"diffs":[[0,"    "],[-1,"playGameOverSound() // Play buzzer sound\n    np.setBrightness(64) // Set NeoPixels to low brightness (25%)\n    np.showColor(lastColor)\n}\n\n// Monitor the tilt switch and toggle between red and blue\nbasic.forever(function () {\n    if (gameOver) return // Immediately exit if the game is over\n    if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        if (isRainbowMode) {\n            setRed()\n        } else {\n            if (isRedMode) {\n                setBlue()\n            } else {\n                setRed()\n            }\n        }"],[1,"for (let i = 1; i <= brightnessLevels.length; i++) { // Gradually brighten NeoPixels\n        np.setBrightness(brightnessLevels[i - 1])\n        np.showColor(lastColor)"],[0,"\n   "]],"start1":4507,"start2":4507,"length1":540,"length2":174},{"diffs":[[0,"use("],[-1,"5"],[1,"10"],[0,"00) // "],[-1,"Debounce delay\n        while (pins.digitalReadPin(DigitalPin.P2) == 0) {"],[1,"Slower brightness increments"],[0,"\n    "],[1,"}\n"],[0,"    "],[-1,"    // Wait for switch release\n        }\n    }\n})\n"],[1,"gameOver = true // Game is over\n}"],[0,"\n\n//"]],"start1":4694,"start2":4694,"length1":147,"length2":89}]}]},{"timestamp":1732481496873,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," to RED\n"],[1,"let brightnessLevels = [255, 192, 128, 64, 32, 16, 8] // Gradual brightness levels\nlet currentBrightnessIndex = 0 // Start at max brightness\n"],[0,"let coun"]],"start1":162,"start2":162,"length1":16,"length2":157},{"diffs":[[0,"seconds\n"],[-1,""],[0,"let coun"]],"start1":361,"start2":361,"length1":16,"length2":16},{"diffs":[[0,"on to apply "],[1,"the current "],[0,"brightness a"]],"start1":831,"start2":831,"length1":24,"length2":36},{"diffs":[[0,"ess("],[-1,"brightness: number"],[0,") {\n"]],"start1":907,"start2":907,"length1":26,"length2":8},{"diffs":[[0,"ness"],[-1,") // Apply brightness\n"],[1,"Levels[currentBrightnessIndex]) // Apply brightness\n    if (isRainbowMode) {\n        control.inBackground(function () {\n            rainbowChase() // Restart rainbow effect\n        })\n    } else {\n        // Reapply current color for solid red or blue modes\n    "],[0,"    "]],"start1":942,"start2":942,"length1":30,"length2":270},{"diffs":[[0,"(lastColor)\n"],[1,"    "],[0,"    np.show("]],"start1":1224,"start2":1224,"length1":24,"length2":28},{"diffs":[[0,".show()\n"],[1,"    }\n"],[0,"}\n\n// Ra"]],"start1":1246,"start2":1246,"length1":16,"length2":22},{"diffs":[[0,")\n            }\n"],[1,"            np.setBrightness(brightnessLevels[currentBrightnessIndex]) // Apply brightness\n"],[0,"            np.s"]],"start1":1650,"start2":1650,"length1":32,"length2":123},{"diffs":[[0,"rs.Red)\n"],[1,"    np.showColor(lastColor)\n"],[0,"    appl"]],"start1":2031,"start2":2031,"length1":16,"length2":44},{"diffs":[[0,"applyBrightness("],[-1,"255"],[0,")\n    playLaserS"]],"start1":2071,"start2":2071,"length1":35,"length2":32},{"diffs":[[0,"s.Blue)\n"],[1,"    np.showColor(lastColor)\n"],[0,"    appl"]],"start1":2298,"start2":2298,"length1":16,"length2":44},{"diffs":[[0,"ghtness("],[-1,"255"],[0,")\n    pl"]],"start1":2346,"start2":2346,"length1":19,"length2":16},{"diffs":[[0,"    }\n}\n"],[-1,"\n"],[0,"// Count"]],"start1":2824,"start2":2824,"length1":17,"length2":16},{"diffs":[[0,"    "],[-1,"for (let i = 0; i < 20; i++) { // Flash for 10 seconds\n    "],[1,"np.setBrightness(255)\n"],[0,"    "]],"start1":4134,"start2":4134,"length1":67,"length2":30},{"diffs":[[0,"(lastColor)\n"],[-1,"    "],[0,"    basic.pa"]],"start1":4176,"start2":4176,"length1":28,"length2":24},{"diffs":[[0,"se(250)\n    "],[-1,"  "],[-1,"  "],[0,"np.clear()\n "]],"start1":4201,"start2":4201,"length1":28,"length2":24},{"diffs":[[0,"clear()\n    "],[-1,"   "],[-1," "],[0,"np.show()\n  "]],"start1":4216,"start2":4216,"length1":28,"length2":24},{"diffs":[[0,"  np.show()\n"],[-1,"    "],[0,"    basic.pa"]],"start1":4226,"start2":4226,"length1":28,"length2":24},{"diffs":[[0,"se(250)\n"],[-1,"    }\n"],[0,"}\n\n// En"]],"start1":4251,"start2":4251,"length1":22,"length2":16},{"diffs":[[0,"lor)\n}\n\n"],[1,"// Monitor the tilt switch and toggle between red and blue\nbasic.forever(function () {\n    if (gameOver) return // Immediately exit if the game is over\n    if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        if (isRainbowMode) {\n            setRed()\n        } else {\n            if (isRedMode) {\n                setBlue()\n            } else {\n                setRed()\n            }\n        }\n        basic.pause(500) // Debounce delay\n        while (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            // Wait for switch release\n        }\n    }\n})\n\n\n"],[0,"// Displ"]],"start1":4742,"start2":4742,"length1":16,"length2":572},{"diffs":[[0,"\n}\n\n"],[-1,"// Play game-over buzzer sound\nfunction playGameOverSound() {\n    for (let i = 0; i < 3; i++) {\n        music.playTone(440, music.beat(BeatFraction.Half)) // Standard A tone\n        basic.pause(200)\n    }\n}\n\n"],[0,"// H"]],"start1":5546,"start2":5546,"length1":216,"length2":8},{"diffs":[[0,"  }\n})\n\n"],[1,"// Adjust brightness with Button B\ninput.onButtonPressed(Button.B, function () {\n    if (!gameOver) {\n        currentBrightnessIndex = (currentBrightnessIndex + 1) % brightnessLevels.length\n        applyBrightness()\n    }\n})\n\n"],[0,"// Monit"]],"start1":6476,"start2":6476,"length1":16,"length2":242},{"diffs":[[0,"if ("],[1,"!"],[0,"gameOver"],[-1,") return // Immediately exit if the game is over\n    if ("],[1," && "],[0,"pins"]],"start1":6801,"start2":6801,"length1":73,"length2":21}]}]},{"timestamp":1732482033419,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ver "],[-1,"dramatic "],[0,"buzz"]],"start1":4542,"start2":4542,"length1":17,"length2":8},{"diffs":[[0,"one("],[-1,"330, music.beat(BeatFraction.Quarter)) // Low E\n        music.playTone(440, music.beat(BeatFraction.Quarter)) // Middle A\n        music.playTone(554, music.beat(BeatFraction.Quarter)) // High C#\n        music.playTone(440, music.beat(BeatFraction.Half))    // Middle A held longer\n        basic.pause(200)\n    }\n    music.playTone(220, music.beat(BeatFraction.Double)) // Deep final tone (Low A)\n}\n"],[1,"440, music.beat(BeatFraction.Half)) // Standard A tone\n        basic.pause(200)\n    }\n}"],[0,"\n\n//"]],"start1":4643,"start2":4643,"length1":406,"length2":95}]}]},{"timestamp":1732482250561,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n}\n\n"],[-1,"// Flashing NeoPixels for the last 10 seconds\nfunction flashNeoPixels() {\n    for (let i = 0; i < 20; i++) { // Flash for 10 seconds (20 cycles at 250ms each)\n        if (!countdownActive) return // Stop if countdown ends prematurely\n        np.showColor(lastColor) // Turn on NeoPixels\n        basic.pause(250)\n        np.clear() // Turn off NeoPixels\n        np.show()\n        basic.pause(250)\n    }\n    // Ensure the flashing stops and transitions to the end countdown\n    if (countdownActive) {\n        endCountdown()\n    }\n}\n\n"],[0,"// C"]],"start1":2303,"start2":2303,"length1":539,"length2":8},{"diffs":[[0,"  if (i "],[-1,"="],[1,"<"],[0,"= 10) {\n"]],"start1":2589,"start2":2589,"length1":17,"length2":17},{"diffs":[[0,"    "],[-1," control.inBackground(() =>"],[0," fla"]],"start1":2613,"start2":2613,"length1":35,"length2":8},{"diffs":[[0,"Pixels()"],[-1,")"],[0," // Flas"]],"start1":2626,"start2":2626,"length1":17,"length2":16},{"diffs":[[0,"/ Flash "],[1,"LEDs continuously "],[0,"in the l"]],"start1":2636,"start2":2636,"length1":16,"length2":34},{"diffs":[[0,"    "],[-1,"// Ensure the end sequence triggers after countdown\n    if (countdownActive) {\n        endCountdown()\n    }"],[1,"endCountdown() // End the countdown"],[0,"\n}\n\n"]],"start1":2745,"start2":2745,"length1":115,"length2":43},{"diffs":[[0,"\n// "],[-1,"End Countdown: Turn off LEDs, displa"],[1,"Flashing NeoPixels for the last 10 seconds\nfunction flashNeoPixels() {\n    for (let i = 0; i < 20; i++) { // Flash for 10 seconds\n        np.showColor(lastColor)\n        basic.pause(250)\n        np.clear()\n        np.show()\n        basic.pause(250)\n    }\n}\n\n// End Countdown: Turn off LEDs, display \"X\", and play buzzer\nfunction endCountdown() {\n    countdownActive = false // Stop the snake pattern\n    gameOver = true // Game is over, deactivate microswitch immediately\n    np.clear()\n    np.show()\n    basic.pause(4000) // Wait for 4 seconds (NeoPixels off)\n    displayX() // Show \"X\" on the LED grid\n    playGameOverSound() // Play buzzer sound\n    np.setBrightness(64) // Set NeoPixels to low brightness (25%)\n    np.showColor(lastColor)\n}\n\n// Display \"X\" on the LED grid\nfunction displayX() {\n    basic.clearScreen()\n    for (let i = 0; i < 5; i++) {\n        led.plot(i, i) // Top-left to bottom-right diagonal\n        led.plot(i, 4 - i) // Top-right to bottom-left diagonal\n    }\n}\n\n// Play game-over dramatic buzzer sound\nfunction playGameOverSound() {\n    for (let i = 0; i < 3; i++) {\n        music.playTone(330, music.beat(BeatFraction.Quarter)) // Low E\n        music.playTone(440, music.beat(BeatFraction.Quarter)) // Middle A\n        music.playTone(554, music.beat(BeatFraction.Quarter)) // High C#\n        music.playTone(440, music.beat(BeatFraction.Half))    // Middle A held longer\n        basic.pause(200)\n    }\n    music.playTone(220, music.beat(BeatFraction.Double)) // Deep final tone (Low A)\n}\n\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"one\") {\n        countdownTime = 60\n        basic.showNumber(1)\n    } else if (receivedString == \"two\") {\n        countdownTime = 120\n        basic.showNumber(2)\n    } else if (receivedString == \"three\") {\n        countdownTime = 180\n        basic.showNumber(3)\n    } else if (receivedString == \"four\") {\n        countdownTime = 240\n        basic.showNumber(4)\n    } else if (receivedString == \"reset\") {\n        basic.showString(\"R\")\n        isRainbowMode = true\n        gameOver = false\n        countdownActive = false\n        control.inBackground(function () {\n            rainbowChase()\n        })\n    } else if (receivedString == \"start\" && countdownTime > 0 && !countdownActive) {\n        basic.showString(\"S\")\n        control.inBackground(function () {\n            startCountdown(countdownTime)\n        })\n    }\n})\n\n// Monitor the tilt switch and toggle between red and blue\nbasic.forever(function () {\n    if (gameOver) return // Immediately exit if the game is over\n    if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        if (isRainbowMode) {\n            setRed()\n        } else {\n            if (isRedMode) {\n                setBlue()\n            } else {\n                setRed()\n            }\n        }\n        basic.pause(500) // Debounce delay\n        while (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            // Wait for switch release\n        }\n    }\n})\n\n// Start the rainbow mode on startup\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB) // 16-LED ring\ncontrol.inBackground(function () {\n    rainbowChase()\n})\nbasic.showIcon(IconNames.Heart) // Display heart on startup"],[0,"\n"]],"start1":3534,"start2":3534,"length1":41,"length2":3242}]}]},{"timestamp":1732482841309,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ive\n"],[-1,"let flashingActive = false // Tracks if flashing is active\n"],[0,"let "]],"start1":285,"start2":285,"length1":67,"length2":8},{"diffs":[[0,"is over\n"],[1,""],[0,"let last"]],"start1":332,"start2":332,"length1":16,"length2":16},{"diffs":[[0,") {\n"],[-1,"    flashingActive = true // Indicate flashing is active\n"],[0,"    "]],"start1":2377,"start2":2377,"length1":65,"length2":8},{"diffs":[[0,"    "],[-1,"flashingActive = false // Indicate flashing is complete"],[1,"// Ensure the flashing stops and transitions to the end countdown"],[0,"\n   "]],"start1":2709,"start2":2709,"length1":63,"length2":73},{"diffs":[[0,"   }\n}\n\n"],[1,""],[0,"// End C"]],"start1":4140,"start2":4140,"length1":16,"length2":16},{"diffs":[[0,"spla"],[-1,"y \"X\", and play buzzer\nfunction endCountdown() {\n    countdownActive = false // Stop the snake pattern\n    gameOver = true // Game is over, deactivate microswitch immediately\n    np.clear()\n    np.show()\n    basic.pause(4000) // Wait for 4 seconds (NeoPixels off)\n    displayX() // Show \"X\" on the LED grid\n    playGameOverSound() // Play buzzer sound\n    np.setBrightness(64) // Set NeoPixels to low brightness (25%)\n    np.showColor(lastColor)\n}\n\n// Display \"X\" on the LED grid\nfunction displayX() {\n    basic.clearScreen()\n    for (let i = 0; i < 5; i++) {\n        led.plot(i, i) // Top-left to bottom-right diagonal\n        led.plot(i, 4 - i) // Top-right to bottom-left diagonal\n    }\n}\n\n// Play game-over dramatic buzzer sound\nfunction playGameOverSound() {\n    for (let i = 0; i < 3; i++) {\n        music.playTone(330, music.beat(BeatFraction.Quarter)) // Low E\n        music.playTone(440, music.beat(BeatFraction.Quarter)) // Middle A\n        music.playTone(554, music.beat(BeatFraction.Quarter)) // High C#\n        music.playTone(440, music.beat(BeatFraction.Half))    // Middle A held longer\n        basic.pause(200)\n    }\n    music.playTone(220, music.beat(BeatFraction.Double)) // Deep final tone (Low A)\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"one\") {\n        countdownTime = 60\n        basic.showNumber(1)\n    } else if (receivedString == \"two\") {\n        countdownTime = 120\n        basic.showNumber(2)\n    } else if (receivedString == \"three\") {\n        countdownTime = 180\n        basic.showNumber(3)\n    } else if (receivedString == \"four\") {\n        countdownTime = 240\n        basic.showNumber(4)\n    } else if (receivedString == \"reset\") {\n        basic.showString(\"R\")\n        isRainbowMode = true\n        gameOver = false\n        countdownActive = false\n        flashingActive = false\n        control.inBackground(function () {\n            rainbowChase()\n        })\n    } else if (receivedString == \"start\" && countdownTime > 0 && !countdownActive) {\n        basic.showString(\"S\")\n        control.inBackground(function () {\n            startCountdown(countdownTime)\n        })\n    }\n})\n\n// Monitor the tilt switch and toggle between red and blue\nbasic.forever(function () {\n    if (gameOver || flashingActive) return // Disable switch during flashing or after game ends\n    if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        if (isRainbowMode) {\n            setRed()\n        } else {\n            if (isRedMode) {\n                setBlue()\n            } else {\n                setRed()\n            }\n        }\n        basic.pause(500) // Debounce delay\n        while (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            // Wait for switch release\n        }\n    }\n})\n\n// Start the rainbow mode on startup\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB) // 16-LED ring\ncontrol.inBackground(function () {\n    rainbowChase()\n})\nbasic.showIcon(IconNames.Heart) // Display heart on startup"],[0,"\n"]],"start1":4183,"start2":4183,"length1":3006,"length2":5}]}]},{"timestamp":1732483357911,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"tive = true\n"],[1,"    gameOver = false\n"],[0,"    control."]],"start1":3030,"start2":3030,"length1":24,"length2":45},{"diffs":[[0,"ake pattern\n"],[1,"    gameOver = true // Game is over, deactivate microswitch immediately\n"],[0,"    np.clear"]],"start1":4384,"start2":4384,"length1":24,"length2":96},{"diffs":[[0,"ff)\n"],[-1,"    gameOver = true // Game is over, deactivate microswitch immediately\n"],[0,"    "]],"start1":4553,"start2":4553,"length1":80,"length2":8},{"diffs":[[0,"Over"],[-1,") return // Immediately exit if the game is over"],[1," || flashingActive) return // Disable switch during flashing or after game ends"],[0,"\n   "]],"start1":6577,"start2":6577,"length1":56,"length2":87}]}]},{"timestamp":1732483578409,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"pia "],[-1,"Receiver - Final"],[1,"Controller"],[0,"\",\n "]],"start1":21,"start2":21,"length1":24,"length2":18}]}]},{"timestamp":1732484575398,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"ver "],[-1,"("],[1,"- "],[0,"Fina"]],"start1":30,"start2":30,"length1":9,"length2":10}]}]},{"timestamp":1732484743644,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"inal"],[-1,")"],[0,"\",\n "]],"start1":36,"start2":36,"length1":9,"length2":8}]}]},{"timestamp":1732484744948,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"radio.setGroup(1) // Ensure both micro:bits use the same group\nlet isRainbowMode = true // Start with rainbow mode\nlet isRedMode = true // First button press sets to RED\nlet countdownTime = 0 // Tracks countdown time in seconds\nlet countdownActive = false // Tracks if countdown is active\nlet flashingActive = false // Tracks if flashing is active\nlet gameOver = false // Tracks if the game is over\nlet lastColor = neopixel.colors(NeoPixelColors.Red) // Default to Red\n\n// Setup pull-up resistor for the tilt switch on P2\npins.setPull(DigitalPin.P2, PinPullMode.PullUp)\n\n// Redirect audio to external speaker on P1\nmusic.setBuiltInSpeakerEnabled(false) // Disable internal speaker\npins.analogSetPitchPin(AnalogPin.P1) // Route sound to P1\n\n// Function to apply brightness and update the LEDs\nfunction applyBrightness(brightness: number) {\n    np.setBrightness(brightness) // Apply brightness\n    np.showColor(lastColor)\n    np.show()\n}\n\n// Rainbow chasing effect\nfunction rainbowChase() {\n    while (isRainbowMode) {\n        for (let j = 0; j < 16; j++) {\n            if (!isRainbowMode) return // Exit if mode changes\n            np.clear()\n            for (let i = 0; i < 16; i++) {\n                let hue = ((i + j) * 360) / 16 // Calculate hue for each LED\n                np.setPixelColor(i, neopixel.hsl(hue, 100, 50))\n            }\n            np.show()\n            basic.pause(100) // Adjust speed of the rainbow\n        }\n    }\n}\n\n// Function to set LED ring to solid red and play laser sound\nfunction setRed() {\n    isRainbowMode = false\n    isRedMode = true\n    lastColor = neopixel.colors(NeoPixelColors.Red)\n    applyBrightness(255)\n    playLaserSound()\n}\n\n// Function to set LED ring to solid blue and play inverse laser sound\nfunction setBlue() {\n    isRainbowMode = false\n    isRedMode = false\n    lastColor = neopixel.colors(NeoPixelColors.Blue)\n    applyBrightness(255)\n    playInverseLaserSound()\n}\n\n// Laser sound effect for Red mode\nfunction playLaserSound() {\n    for (let freq = 1000; freq > 200; freq -= 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid descending tones\n    }\n}\n\n// Inverse laser sound effect for Blue mode\nfunction playInverseLaserSound() {\n    for (let freq = 200; freq <= 1000; freq += 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid ascending tones\n    }\n}\n\n// Flashing NeoPixels for the last 10 seconds\nfunction flashNeoPixels() {\n    flashingActive = true // Indicate flashing is active\n    for (let i = 0; i < 20; i++) { // Flash for 10 seconds (20 cycles at 250ms each)\n        if (!countdownActive) return // Stop if countdown ends prematurely\n        np.showColor(lastColor) // Turn on NeoPixels\n        basic.pause(250)\n        np.clear() // Turn off NeoPixels\n        np.show()\n        basic.pause(250)\n    }\n    flashingActive = false // Indicate flashing is complete\n    if (countdownActive) {\n        endCountdown()\n    }\n}\n\n// Countdown Timer Function\nfunction startCountdown(seconds: number) {\n    countdownActive = true\n    control.runInBackground(() => runSnakePattern(seconds + 14)) // Run snake pattern for countdown + flashing + off\n    for (let i = seconds; i > 0; i--) {\n        if (i == 10) {\n            control.inBackground(() => flashNeoPixels()) // Flash in the last 10 seconds\n        }\n        basic.pause(1000) // 1-second delay\n    }\n    // Ensure the end sequence triggers after countdown\n    if (countdownActive) {\n        endCountdown()\n    }\n}\n\n// Run Snake Pattern\nfunction runSnakePattern(duration: number) {\n    let position = 0 // LED grid position\n    for (let i = 0; i < duration * 20; i++) { // Ensure it runs for the extended duration\n        if (!countdownActive) break // Stop if the countdown is no longer active\n        displaySnake(position)\n        position = (position + 1) % 25\n        basic.pause(50) // Speed up snake pattern\n    }\n}\n\n// Snake pattern for LED grid\nfunction displaySnake(position: number) {\n    let x = position % 5\n    let y = Math.floor(position / 5)\n    basic.clearScreen()\n    if (y % 2 == 0) {\n        // Even rows light up left-to-right\n        led.plot(x, y)\n    } else {\n        // Odd rows light up right-to-left\n        led.plot(4 - x, y)\n    }\n}\n\n// End Countdown: Turn off LEDs, display \"X\", and play buzzer\nfunction endCountdown() {\n    countdownActive = false // Stop the snake pattern\n    np.clear()\n    np.show()\n    basic.pause(4000) // Wait for 4 seconds (NeoPixels off)\n    gameOver = true // Game is over, deactivate microswitch immediately\n    displayX() // Show \"X\" on the LED grid\n    playGameOverSound() // Play buzzer sound\n    np.setBrightness(64) // Set NeoPixels to low brightness (25%)\n    np.showColor(lastColor)\n}\n\n// Display \"X\" on the LED grid\nfunction displayX() {\n    basic.clearScreen()\n    for (let i = 0; i < 5; i++) {\n        led.plot(i, i) // Top-left to bottom-right diagonal\n        led.plot(i, 4 - i) // Top-right to bottom-left diagonal\n    }\n}\n\n// Play game-over dramatic buzzer sound\nfunction playGameOverSound() {\n    for (let i = 0; i < 3; i++) {\n        music.playTone(330, music.beat(BeatFraction.Quarter)) // Low E\n        music.playTone(440, music.beat(BeatFraction.Quarter)) // Middle A\n        music.playTone(554, music.beat(BeatFraction.Quarter)) // High C#\n        music.playTone(440, music.beat(BeatFraction.Half))    // Middle A held longer\n        basic.pause(200)\n    }\n    music.playTone(220, music.beat(BeatFraction.Double)) // Deep final tone (Low A)\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"one\") {\n        countdownTime = 60\n        basic.showNumber(1)\n    } else if (receivedString == \"two\") {\n        countdownTime = 120\n        basic.showNumber(2)\n    } else if (receivedString == \"three\") {\n        countdownTime = 180\n        basic.showNumber(3)\n    } else if (receivedString == \"four\") {\n        countdownTime = 240\n        basic.showNumber(4)\n    } else if (receivedString == \"reset\") {\n        basic.showString(\"R\")\n        isRainbowMode = true\n        gameOver = false\n        countdownActive = false\n        flashingActive = false\n        control.inBackground(function () {\n            rainbowChase()\n        })\n    } else if (receivedString == \"start\" && countdownTime > 0 && !countdownActive) {\n        basic.showString(\"S\")\n        control.inBackground(function () {\n            startCountdown(countdownTime)\n        })\n    }\n})\n\n// Monitor the tilt switch and toggle between red and blue\nbasic.forever(function () {\n    if (gameOver) return // Immediately exit if the game is over\n    if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        if (isRainbowMode) {\n            setRed()\n        } else {\n            if (isRedMode) {\n                setBlue()\n            } else {\n                setRed()\n            }\n        }\n        basic.pause(500) // Debounce delay\n        while (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            // Wait for switch release\n        }\n    }\n})\n\n// Start the rainbow mode on startup\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB) // 16-LED ring\ncontrol.inBackground(function () {\n    rainbowChase()\n})\nbasic.showIcon(IconNames.Heart) // Display heart on startup\n"]],"start1":0,"start2":0,"length1":0,"length2":7243}]}]},{"timestamp":1732550256212,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"radio.setGroup(1) // Ensure both micro:bits use the same group\nlet isRainbowMode = true // Start with rainbow mode\nlet isRedMode = true // First button press sets to RED\nlet countdownTime = 0 // Tracks countdown time in seconds\nlet countdownActive = false // Tracks if countdown is active\nlet flashingActive = false // Tracks if flashing is active\nlet gameOver = false // Tracks if the game is over\nlet lastColor = neopixel.colors(NeoPixelColors.Red) // Default to Red\n\n// Setup pull-up resistor for the tilt switch on P2\npins.setPull(DigitalPin.P2, PinPullMode.PullUp)\n\n// Redirect audio to external speaker on P1\nmusic.setBuiltInSpeakerEnabled(false) // Disable internal speaker\npins.analogSetPitchPin(AnalogPin.P1) // Route sound to P1\n\n// Function to apply brightness and update the LEDs\nfunction applyBrightness(brightness: number) {\n    np.setBrightness(brightness) // Apply brightness\n    np.showColor(lastColor)\n    np.show()\n}\n\n// Rainbow chasing effect\nfunction rainbowChase() {\n    while (isRainbowMode) {\n        for (let j = 0; j < 16; j++) {\n            if (!isRainbowMode) return // Exit if mode changes\n            np.clear()\n            for (let i = 0; i < 16; i++) {\n                let hue = ((i + j) * 360) / 16 // Calculate hue for each LED\n                np.setPixelColor(i, neopixel.hsl(hue, 100, 50))\n            }\n            np.show()\n            basic.pause(100) // Adjust speed of the rainbow\n        }\n    }\n}\n\n// Function to set LED ring to solid red\nfunction setRed() {\n    isRainbowMode = false\n    isRedMode = true\n    lastColor = neopixel.colors(NeoPixelColors.Red)\n    applyBrightness(255)\n}\n\n// Function to set LED ring to solid blue\nfunction setBlue() {\n    isRainbowMode = false\n    isRedMode = false\n    lastColor = neopixel.colors(NeoPixelColors.Blue)\n    applyBrightness(255)\n}\n\n// Flashing NeoPixels for the last 10 seconds\nfunction flashNeoPixels() {\n    flashingActive = true // Indicate flashing is active\n    for (let i = 0; i < 20; i++) { // Flash for 10 seconds (20 cycles at 250ms each)\n        if (!countdownActive) return // Stop if countdown ends prematurely\n        np.showColor(lastColor) // Turn on NeoPixels\n        basic.pause(250)\n        np.clear() // Turn off NeoPixels\n        np.show()\n        basic.pause(250)\n    }\n    flashingActive = false // Indicate flashing is complete\n    if (countdownActive) {\n        endCountdown()\n    }\n}\n\n// Countdown Timer Function\nfunction startCountdown(seconds: number) {\n    countdownActive = true\n    control.runInBackground(() => runSnakePattern(seconds + 14)) // Run snake pattern for countdown + flashing + off\n    playBackgroundMusic() // Start playing background music\n    for (let i = seconds; i > 0; i--) {\n        if (i == 10) {\n            control.inBackground(() => flashNeoPixels()) // Flash in the last 10 seconds\n        }\n        basic.pause(1000) // 1-second delay\n    }\n    // Ensure the end sequence triggers after countdown\n    if (countdownActive) {\n        endCountdown()\n    }\n}\n\n// Run Snake Pattern\nfunction runSnakePattern(duration: number) {\n    let position = 0 // LED grid position\n    for (let i = 0; i < duration * 20; i++) { // Ensure it runs for the extended duration\n        if (!countdownActive) break // Stop if the countdown is no longer active\n        displaySnake(position)\n        position = (position + 1) % 25\n        basic.pause(50) // Speed up snake pattern\n    }\n}\n\n// Snake pattern for LED grid\nfunction displaySnake(position: number) {\n    let x = position % 5\n    let y = Math.floor(position / 5)\n    basic.clearScreen()\n    if (y % 2 == 0) {\n        // Even rows light up left-to-right\n        led.plot(x, y)\n    } else {\n        // Odd rows light up right-to-left\n        led.plot(4 - x, y)\n    }\n}\n\n// End Countdown: Turn off LEDs, display \"X\", and play buzzer\nfunction endCountdown() {\n    countdownActive = false // Stop the snake pattern\n    np.clear()\n    np.show()\n    stopBackgroundMusic() // Stop background music\n    basic.pause(4000) // Wait for 4 seconds (NeoPixels off)\n    gameOver = true // Game is over, deactivate microswitch immediately\n    displayX() // Show \"X\" on the LED grid\n    playGameOverSound() // Play buzzer sound\n    np.setBrightness(64) // Set NeoPixels to low brightness (25%)\n    np.showColor(lastColor)\n}\n\n// Display \"X\" on the LED grid\nfunction displayX() {\n    basic.clearScreen()\n    for (let i = 0; i < 5; i++) {\n        led.plot(i, i) // Top-left to bottom-right diagonal\n        led.plot(i, 4 - i) // Top-right to bottom-left diagonal\n    }\n}\n\n// Play background music\nfunction playBackgroundMusic() {\n    music.setVolume(128) // Set volume to 50%\n    control.inBackground(function () {\n        music.beginMelody(music.builtInMelody(Melodies.Prelude), MelodyOptions.ForeverInBackground)\n    })\n}\n\n// Stop background music\nfunction stopBackgroundMusic() {\n    music.stopAllSounds()\n}\n\n// Play game-over dramatic buzzer sound\nfunction playGameOverSound() {\n    for (let i = 0; i < 3; i++) {\n        music.playTone(330, music.beat(BeatFraction.Quarter)) // Low E\n        music.playTone(440, music.beat(BeatFraction.Quarter)) // Middle A\n        music.playTone(554, music.beat(BeatFraction.Quarter)) // High C#\n        music.playTone(440, music.beat(BeatFraction.Half))    // Middle A held longer\n        basic.pause(200)\n    }\n    music.playTone(220, music.beat(BeatFraction.Double)) // Deep final tone (Low A)\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"one\") {\n        countdownTime = 60\n        basic.showNumber(1)\n    } else if (receivedString == \"two\") {\n        countdownTime = 120\n        basic.showNumber(2)\n    } else if (receivedString == \"three\") {\n        countdownTime = 180\n        basic.showNumber(3)\n    } else if (receivedString == \"four\") {\n        countdownTime = 240\n        basic.showNumber(4)\n    } else if (receivedString == \"reset\") {\n        basic.showString(\"R\")\n        isRainbowMode = true\n        gameOver = false\n        countdownActive = false\n        flashingActive = false\n        control.inBackground(function () {\n            rainbowChase()\n        })\n    } else if (receivedString == \"start\" && countdownTime > 0 && !countdownActive) {\n        basic.showString(\"S\")\n        control.inBackground(function () {\n            startCountdown(countdownTime)\n        })\n    }\n})\n\n// Monitor the tilt switch and toggle between red and blue\nbasic.forever(function () {\n    if (gameOver) return // Immediately exit if the game is over\n    if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        if (isRainbowMode) {\n            setRed()\n        } else {\n            if (isRedMode) {\n                setBlue()\n            } else {\n                setRed()\n            }\n        }\n        basic.pause(500) // Debounce delay\n        while (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            // Wait for switch release\n        }\n    }\n})\n\n// Start the rainbow mode on startup\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB) // 16-LED ring\ncontrol.inBackground(function () {\n    rainbowChase()\n})\nbasic.showIcon(IconNames.Heart) // Display heart on startup\n"]],"start1":0,"start2":0,"length1":7149,"length2":0}]}]},{"timestamp":1732550256788,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," }\n}"],[-1,"\nmusic.setBuiltInSpeakerEnabled(false)"],[0,"\n\n//"]],"start1":4525,"start2":4525,"length1":46,"length2":8},{"diffs":[[0,"tVolume("],[-1,"5"],[1,"128"],[0,") // Set"]],"start1":4601,"start2":4601,"length1":17,"length2":19}]}]},{"timestamp":1732550518621,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"g + off\n"],[1,"    playBackgroundMusic() // Start playing background music\n"],[0,"    for "]],"start1":2606,"start2":2606,"length1":16,"length2":76},{"diffs":[[0,"  np.show()\n"],[1,"    stopBackgroundMusic() // Stop background music\n"],[0,"    basic.pa"]],"start1":3907,"start2":3907,"length1":24,"length2":75},{"diffs":[[0,"onal\n    }\n}"],[1,"\nmusic.setBuiltInSpeakerEnabled(false)\n\n// Play background music\nfunction playBackgroundMusic() {\n    music.setVolume(5) // Set volume to 50%\n    control.inBackground(function () {\n        music.beginMelody(music.builtInMelody(Melodies.Prelude), MelodyOptions.ForeverInBackground)\n    })\n}\n\n// Stop background music\nfunction stopBackgroundMusic() {\n    music.stopAllSounds()\n}"],[0,"\n\n// Play ga"]],"start1":4517,"start2":4517,"length1":24,"length2":400}]}]},{"timestamp":1732551030282,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," red"],[-1," and play laser sound"],[0,"\nfun"]],"start1":1477,"start2":1477,"length1":29,"length2":8},{"diffs":[[0,"55)\n"],[-1,"    control.inBackground(function () {\n        playLaserSound() // Play laser sound\n    })\n"],[0,"}\n\n/"]],"start1":1622,"start2":1622,"length1":99,"length2":8},{"diffs":[[0,"blue"],[-1," and play inverse laser sound"],[0,"\nfun"]],"start1":1666,"start2":1666,"length1":37,"length2":8},{"diffs":[[0,"55)\n"],[-1,"    control.inBackground(function () {\n        playInverseLaserSound() // Play inverse laser sound\n    })\n"],[0,"}\n\n/"]],"start1":1814,"start2":1814,"length1":114,"length2":8},{"diffs":[[0,"\n}\n\n"],[-1,"// Laser sound effect for Red mode\nfunction playLaserSound() {\n    for (let freq = 1000; freq > 200; freq -= 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid descending tones\n    }\n}\n\n// Inverse laser sound effect for Blue mode\nfunction playInverseLaserSound() {\n    for (let freq = 200; freq <= 1000; freq += 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid ascending tones\n    }\n}\n\n"],[0,"// P"]],"start1":4416,"start2":4416,"length1":454,"length2":8}]}]},{"timestamp":1732552100774,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"radio.setGroup(1) // Ensure both micro:bits use the same group\nlet isRainbowMode = true // Start with rainbow mode\nlet isRedMode = true // First button press sets to RED\nlet countdownTime = 0 // Tracks countdown time in seconds\nlet countdownActive = false // Tracks if countdown is active\nlet flashingActive = false // Tracks if flashing is active\nlet gameOver = false // Tracks if the game is over\nlet lastColor = neopixel.colors(NeoPixelColors.Red) // Default to Red\n\n// Setup pull-up resistor for the tilt switch on P2\npins.setPull(DigitalPin.P2, PinPullMode.PullUp)\n\n// Redirect audio to external speaker on P1\nmusic.setBuiltInSpeakerEnabled(false) // Disable internal speaker\npins.analogSetPitchPin(AnalogPin.P1) // Route sound to P1\n\n// Function to apply brightness and update the LEDs\nfunction applyBrightness(brightness: number) {\n    np.setBrightness(brightness) // Apply brightness\n    np.showColor(lastColor)\n    np.show()\n}\n\n// Rainbow chasing effect\nfunction rainbowChase() {\n    while (isRainbowMode) {\n        for (let j = 0; j < 16; j++) {\n            if (!isRainbowMode) return // Exit if mode changes\n            np.clear()\n            for (let i = 0; i < 16; i++) {\n                let hue = ((i + j) * 360) / 16 // Calculate hue for each LED\n                np.setPixelColor(i, neopixel.hsl(hue, 100, 50))\n            }\n            np.show()\n            basic.pause(100) // Adjust speed of the rainbow\n        }\n    }\n}\n\n// Function to set LED ring to solid red and play laser sound\nfunction setRed() {\n    isRainbowMode = false\n    isRedMode = true\n    lastColor = neopixel.colors(NeoPixelColors.Red)\n    applyBrightness(255)\n    control.inBackground(function () {\n        playLaserSound() // Play laser sound\n    })\n}\n\n// Function to set LED ring to solid blue and play inverse laser sound\nfunction setBlue() {\n    isRainbowMode = false\n    isRedMode = false\n    lastColor = neopixel.colors(NeoPixelColors.Blue)\n    applyBrightness(255)\n    control.inBackground(function () {\n        playInverseLaserSound() // Play inverse laser sound\n    })\n}\n\n// Flashing NeoPixels for the last 10 seconds\nfunction flashNeoPixels() {\n    flashingActive = true // Indicate flashing is active\n    for (let i = 0; i < 20; i++) { // Flash for 10 seconds (20 cycles at 250ms each)\n        if (!countdownActive) return // Stop if countdown ends prematurely\n        np.showColor(lastColor) // Turn on NeoPixels\n        basic.pause(250)\n        np.clear() // Turn off NeoPixels\n        np.show()\n        basic.pause(250)\n    }\n    flashingActive = false // Indicate flashing is complete\n    if (countdownActive) {\n        endCountdown()\n    }\n}\n\n// Countdown Timer Function\nfunction startCountdown(seconds: number) {\n    countdownActive = true\n    control.runInBackground(() => runSnakePattern(seconds + 14)) // Run snake pattern for countdown + flashing + off\n    for (let i = seconds; i > 0; i--) {\n        if (i == 10) {\n            control.inBackground(() => flashNeoPixels()) // Flash in the last 10 seconds\n        }\n        basic.pause(1000) // 1-second delay\n    }\n    // Ensure the end sequence triggers after countdown\n    if (countdownActive) {\n        endCountdown()\n    }\n}\n\n// Run Snake Pattern\nfunction runSnakePattern(duration: number) {\n    let position = 0 // LED grid position\n    for (let i = 0; i < duration * 20; i++) { // Ensure it runs for the extended duration\n        if (!countdownActive) break // Stop if the countdown is no longer active\n        displaySnake(position)\n        position = (position + 1) % 25\n        basic.pause(50) // Speed up snake pattern\n    }\n}\n\n// Snake pattern for LED grid\nfunction displaySnake(position: number) {\n    let x = position % 5\n    let y = Math.floor(position / 5)\n    basic.clearScreen()\n    if (y % 2 == 0) {\n        // Even rows light up left-to-right\n        led.plot(x, y)\n    } else {\n        // Odd rows light up right-to-left\n        led.plot(4 - x, y)\n    }\n}\n\n// End Countdown: Turn off LEDs, display \"X\", and play buzzer\nfunction endCountdown() {\n    countdownActive = false // Stop the snake pattern\n    np.clear()\n    np.show()\n    basic.pause(4000) // Wait for 4 seconds (NeoPixels off)\n    gameOver = true // Game is over, deactivate microswitch immediately\n    displayX() // Show \"X\" on the LED grid\n    playGameOverSound() // Play buzzer sound\n    np.setBrightness(64) // Set NeoPixels to low brightness (25%)\n    np.showColor(lastColor)\n}\n\n// Display \"X\" on the LED grid\nfunction displayX() {\n    basic.clearScreen()\n    for (let i = 0; i < 5; i++) {\n        led.plot(i, i) // Top-left to bottom-right diagonal\n        led.plot(i, 4 - i) // Top-right to bottom-left diagonal\n    }\n}\n\n// Laser sound effect for Red mode\nfunction playLaserSound() {\n    for (let freq = 1000; freq > 200; freq -= 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid descending tones\n    }\n}\n\n// Inverse laser sound effect for Blue mode\nfunction playInverseLaserSound() {\n    for (let freq = 200; freq <= 1000; freq += 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid ascending tones\n    }\n}\n\n// Play game-over dramatic buzzer sound\nfunction playGameOverSound() {\n    for (let i = 0; i < 3; i++) {\n        music.playTone(330, music.beat(BeatFraction.Quarter)) // Low E\n        music.playTone(440, music.beat(BeatFraction.Quarter)) // Middle A\n        music.playTone(554, music.beat(BeatFraction.Quarter)) // High C#\n        music.playTone(440, music.beat(BeatFraction.Half))    // Middle A held longer\n        basic.pause(200)\n    }\n    music.playTone(220, music.beat(BeatFraction.Double)) // Deep final tone (Low A)\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"one\") {\n        countdownTime = 60\n        basic.showNumber(1)\n    } else if (receivedString == \"two\") {\n        countdownTime = 120\n        basic.showNumber(2)\n    } else if (receivedString == \"three\") {\n        countdownTime = 180\n        basic.showNumber(3)\n    } else if (receivedString == \"four\") {\n        countdownTime = 240\n        basic.showNumber(4)\n    } else if (receivedString == \"reset\") {\n        basic.showString(\"R\")\n        isRainbowMode = true\n        gameOver = false\n        countdownActive = false\n        flashingActive = false\n        control.inBackground(function () {\n            rainbowChase()\n        })\n    } else if (receivedString == \"start\" && countdownTime > 0 && !countdownActive) {\n        basic.showString(\"S\")\n        control.inBackground(function () {\n            startCountdown(countdownTime)\n        })\n    }\n})\n\n// Monitor the tilt switch and toggle between red and blue\nbasic.forever(function () {\n    if (gameOver) return // Immediately exit if the game is over\n    if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        if (isRainbowMode) {\n            setRed()\n        } else {\n            if (isRedMode) {\n                setBlue()\n            } else {\n                setRed()\n            }\n        }\n        basic.pause(500) // Debounce delay\n        while (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            // Wait for switch release\n        }\n    }\n})\n\n// Start the rainbow mode on startup\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB) // 16-LED ring\ncontrol.inBackground(function () {\n    rainbowChase()\n})\nbasic.showIcon(IconNames.Heart) // Display heart on startup\n"]],"start1":0,"start2":0,"length1":0,"length2":7391}]}]},{"timestamp":1732552798791,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"radio.setGroup(1) // Ensure both micro:bits use the same group\nlet isRainbowMode = true // Start with rainbow mode\nlet isRedMode = true // Tracks whether the last mode was Red\nlet countdownTime = 0 // Tracks countdown time in seconds\nlet countdownActive = false // Tracks if countdown is active\nlet flashingActive = false // Tracks if flashing is active\nlet gameOver = false // Tracks if the game is over\nlet lastColor = neopixel.colors(NeoPixelColors.Red) // Default to Red\n\n// Setup pull-up resistor for the tilt switch on P2\npins.setPull(DigitalPin.P2, PinPullMode.PullUp)\n\n// Redirect audio to external speaker on P1\nmusic.setBuiltInSpeakerEnabled(false) // Disable internal speaker\npins.analogSetPitchPin(AnalogPin.P1) // Route sound to P1\n\n// Function to apply brightness and update the LEDs\nfunction applyBrightness(brightness: number) {\n    np.setBrightness(brightness) // Apply brightness\n    np.showColor(lastColor)\n    np.show()\n}\n\n// Rainbow chasing effect\nfunction rainbowChase() {\n    while (isRainbowMode) {\n        for (let j = 0; j < 16; j++) {\n            if (!isRainbowMode) return // Exit if mode changes\n            np.clear()\n            for (let i = 0; i < 16; i++) {\n                let hue = ((i + j) * 360) / 16 // Calculate hue for each LED\n                np.setPixelColor(i, neopixel.hsl(hue, 100, 50))\n            }\n            np.show()\n            basic.pause(100) // Adjust speed of the rainbow\n        }\n    }\n}\n\n// Function to set a random color (Red or Blue) on microswitch press\nfunction setRandomColor() {\n    isRainbowMode = false // Disable rainbow mode\n    isRedMode = Math.randomBoolean() // Randomly choose Red or Blue\n    if (isRedMode) {\n        lastColor = neopixel.colors(NeoPixelColors.Red)\n        applyBrightness(255)\n        control.inBackground(function () {\n            playLaserSound() // Play laser sound for Red\n        })\n    } else {\n        lastColor = neopixel.colors(NeoPixelColors.Blue)\n        applyBrightness(255)\n        control.inBackground(function () {\n            playInverseLaserSound() // Play inverse laser sound for Blue\n        })\n    }\n}\n\n// Flashing NeoPixels for the last 10 seconds\nfunction flashNeoPixels() {\n    flashingActive = true // Indicate flashing is active\n    for (let i = 0; i < 20; i++) { // Flash for 10 seconds (20 cycles at 250ms each)\n        if (!countdownActive) return // Stop if countdown ends prematurely\n        np.showColor(lastColor) // Turn on NeoPixels\n        basic.pause(250)\n        np.clear() // Turn off NeoPixels\n        np.show()\n        basic.pause(250)\n    }\n    flashingActive = false // Indicate flashing is complete\n    if (countdownActive) {\n        endCountdown() // Immediately transition to the end countdown\n    }\n}\n\n// Countdown Timer Function\nfunction startCountdown(seconds: number) {\n    countdownActive = true\n    control.runInBackground(() => runSnakePattern(seconds + 14)) // Run snake pattern for countdown + flashing + off\n    for (let i = seconds; i > 0; i--) {\n        if (i == 10) {\n            control.inBackground(() => flashNeoPixels()) // Flash in the last 10 seconds\n        }\n        basic.pause(1000) // 1-second delay\n    }\n    // Ensure the end sequence triggers after countdown\n    if (countdownActive) {\n        endCountdown()\n    }\n}\n\n// Run Snake Pattern\nfunction runSnakePattern(duration: number) {\n    let position = 0 // LED grid position\n    for (let i = 0; i < duration * 20; i++) { // Ensure it runs for the extended duration\n        if (!countdownActive) break // Stop if the countdown is no longer active\n        displaySnake(position)\n        position = (position + 1) % 25\n        basic.pause(50) // Speed up snake pattern\n    }\n}\n\n// Snake pattern for LED grid\nfunction displaySnake(position: number) {\n    let x = position % 5\n    let y = Math.floor(position / 5)\n    basic.clearScreen()\n    if (y % 2 == 0) {\n        // Even rows light up left-to-right\n        led.plot(x, y)\n    } else {\n        // Odd rows light up right-to-left\n        led.plot(4 - x, y)\n    }\n}\n\n// End Countdown: Turn off LEDs, display \"X\", and play buzzer\nfunction endCountdown() {\n    countdownActive = false // Stop the snake pattern\n    flashingActive = false // Ensure flashing stops\n    gameOver = true // Game is over, deactivate microswitch immediately\n    np.clear()\n    np.show() // Turn off NeoPixels\n    displayX() // Show \"X\" on the LED grid\n    control.inBackground(() => playGameOverSound()) // Play buzzer sound\n    basic.pause(4000) // Wait for buzzer to complete\n    np.setBrightness(64) // Set NeoPixels to low brightness (25%)\n    np.showColor(lastColor) // Restore NeoPixels to last color\n    np.show()\n}\n\n// Display \"X\" on the LED grid\nfunction displayX() {\n    basic.clearScreen()\n    for (let i = 0; i < 5; i++) {\n        led.plot(i, i) // Top-left to bottom-right diagonal\n        led.plot(i, 4 - i) // Top-right to bottom-left diagonal\n    }\n}\n\n// Laser sound effect for Red mode\nfunction playLaserSound() {\n    for (let freq = 1000; freq > 200; freq -= 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid descending tones\n    }\n}\n\n// Inverse laser sound effect for Blue mode\nfunction playInverseLaserSound() {\n    for (let freq = 200; freq <= 1000; freq += 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid ascending tones\n    }\n}\n\n// Play game-over dramatic buzzer sound\nfunction playGameOverSound() {\n    for (let i = 0; i < 3; i++) {\n        music.playTone(330, music.beat(BeatFraction.Quarter)) // Low E\n        music.playTone(440, music.beat(BeatFraction.Quarter)) // Middle A\n        music.playTone(554, music.beat(BeatFraction.Quarter)) // High C#\n        music.playTone(440, music.beat(BeatFraction.Half))    // Middle A held longer\n        basic.pause(200)\n    }\n    music.playTone(220, music.beat(BeatFraction.Double)) // Deep final tone (Low A)\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"one\") {\n        countdownTime = 60\n        basic.showNumber(1)\n    } else if (receivedString == \"two\") {\n        countdownTime = 120\n        basic.showNumber(2)\n    } else if (receivedString == \"three\") {\n        countdownTime = 180\n        basic.showNumber(3)\n    } else if (receivedString == \"four\") {\n        countdownTime = 240\n        basic.showNumber(4)\n    } else if (receivedString == \"reset\") {\n        basic.showString(\"R\")\n        isRainbowMode = true\n        gameOver = false\n        countdownActive = false\n        flashingActive = false\n        control.inBackground(function () {\n            rainbowChase()\n        })\n    } else if (receivedString == \"start\" && countdownTime > 0 && !countdownActive) {\n        basic.showString(\"S\")\n        control.inBackground(function () {\n            startCountdown(countdownTime)\n        })\n    }\n})\n\n// Monitor the tilt switch and set random color\nbasic.forever(function () {\n    if (gameOver) return // Immediately exit if the game is over\n    if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        setRandomColor() // Set a random color (Red or Blue)\n        basic.pause(500) // Debounce delay\n        while (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            // Wait for switch release\n        }\n    }\n})\n\n// Start the rainbow mode on startup\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB) // 16-LED ring\ncontrol.inBackground(function () {\n    rainbowChase()\n})\nbasic.showIcon(IconNames.Heart) // Display heart on startup\n"]],"start1":0,"start2":0,"length1":7486,"length2":0}]}]},{"timestamp":1732552799173,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"e = "],[-1,"Math.randomBoolean() // Randomly choose Red or Blue for the first switch press"],[1,"true // Tracks whether the last mode was Red"],[0,"\nlet"]],"start1":127,"start2":127,"length1":86,"length2":52},{"diffs":[[0,"or ="],[-1," isRedMode ?"],[0," neo"]],"start1":416,"start2":416,"length1":20,"length2":8},{"diffs":[[0,"ed) "],[-1,": neopixel.colors(NeoPixelColors.Blue) // Default random color"],[1,"// Default to Red"],[0,"\n\n//"]],"start1":453,"start2":453,"length1":70,"length2":25},{"diffs":[[0,"lue) on "],[-1,"the first "],[0,"microswi"]],"start1":1490,"start2":1490,"length1":26,"length2":16},{"diffs":[[0,"   i"],[-1,"f (Math.randomBoolean()) {\n        lastColor = neopixel.colors(NeoPixelColors.Red)\n        applyBrightness(255)\n        control.inBackground(function () {\n            playLaserSound() // Play laser sound for Red\n        })\n    } else {\n        lastColor = neopixel.colors(NeoPixelColors.Blue)\n        applyBrightness(255)\n        control.inBackground(function () {\n            playInverseLaserSound() // Play inverse laser sound for Blue\n        })\n    }\n}\n\n// Function to toggle color after the first press\nfunction toggleColor() {\n    isRedMode = !isRedMode // Alternate between Red and"],[1,"sRedMode = Math.randomBoolean() // Randomly choose Red or"],[0," Blu"]],"start1":1595,"start2":1595,"length1":596,"length2":65},{"diffs":[[0,"and "],[-1,"handle fir"],[0,"s"],[1,"e"],[0,"t ra"]],"start1":6869,"start2":6869,"length1":19,"length2":10},{"diffs":[[0,"olor"],[-1,", then toggle"],[0,"\nbas"]],"start1":6885,"start2":6885,"length1":21,"length2":8},{"diffs":[[0,"    "],[-1,"if (isRainbowMode) {\n            setRandomColor() // First press: Random Red or Blue\n        } else {\n            toggleColor() // Subsequent presses: Toggle "],[1,"setRandomColor() // Set a random color ("],[0,"Red "],[-1,"and"],[1,"or"],[0," Blue"],[-1,"\n        }"],[1,")"],[0,"\n   "]],"start1":7038,"start2":7038,"length1":188,"length2":60}]}]},{"timestamp":1732553161830,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"radio.setGroup(1) // Ensure both micro:bits use the same group\nlet isRainbowMode = true // Start with rainbow mode\nlet isRedMode = Math.randomBoolean() // Randomly choose Red or Blue for the first switch press\nlet countdownTime = 0 // Tracks countdown time in seconds\nlet countdownActive = false // Tracks if countdown is active\nlet flashingActive = false // Tracks if flashing is active\nlet gameOver = false // Tracks if the game is over\nlet lastColor = isRedMode ? neopixel.colors(NeoPixelColors.Red) : neopixel.colors(NeoPixelColors.Blue) // Default random color\n\n// Setup pull-up resistor for the tilt switch on P2\npins.setPull(DigitalPin.P2, PinPullMode.PullUp)\n\n// Redirect audio to external speaker on P1\nmusic.setBuiltInSpeakerEnabled(false) // Disable internal speaker\npins.analogSetPitchPin(AnalogPin.P1) // Route sound to P1\n\n// Function to apply brightness and update the LEDs\nfunction applyBrightness(brightness: number) {\n    np.setBrightness(brightness) // Apply brightness\n    np.showColor(lastColor)\n    np.show()\n}\n\n// Rainbow chasing effect\nfunction rainbowChase() {\n    while (isRainbowMode) {\n        for (let j = 0; j < 16; j++) {\n            if (!isRainbowMode) return // Exit if mode changes\n            np.clear()\n            for (let i = 0; i < 16; i++) {\n                let hue = ((i + j) * 360) / 16 // Calculate hue for each LED\n                np.setPixelColor(i, neopixel.hsl(hue, 100, 50))\n            }\n            np.show()\n            basic.pause(100) // Adjust speed of the rainbow\n        }\n    }\n}\n\n// Function to set a random color (Red or Blue) on the first microswitch press\nfunction setRandomColor() {\n    isRainbowMode = false // Disable rainbow mode\n    if (Math.randomBoolean()) {\n        lastColor = neopixel.colors(NeoPixelColors.Red)\n        applyBrightness(255)\n        control.inBackground(function () {\n            playLaserSound() // Play laser sound for Red\n        })\n    } else {\n        lastColor = neopixel.colors(NeoPixelColors.Blue)\n        applyBrightness(255)\n        control.inBackground(function () {\n            playInverseLaserSound() // Play inverse laser sound for Blue\n        })\n    }\n}\n\n// Function to toggle color after the first press\nfunction toggleColor() {\n    isRedMode = !isRedMode // Alternate between Red and Blue\n    if (isRedMode) {\n        lastColor = neopixel.colors(NeoPixelColors.Red)\n        applyBrightness(255)\n        control.inBackground(function () {\n            playLaserSound() // Play laser sound for Red\n        })\n    } else {\n        lastColor = neopixel.colors(NeoPixelColors.Blue)\n        applyBrightness(255)\n        control.inBackground(function () {\n            playInverseLaserSound() // Play inverse laser sound for Blue\n        })\n    }\n}\n\n// Flashing NeoPixels for the last 10 seconds\nfunction flashNeoPixels() {\n    flashingActive = true // Indicate flashing is active\n    for (let i = 0; i < 20; i++) { // Flash for 10 seconds (20 cycles at 250ms each)\n        if (!countdownActive) return // Stop if countdown ends prematurely\n        np.showColor(lastColor) // Turn on NeoPixels\n        basic.pause(250)\n        np.clear() // Turn off NeoPixels\n        np.show()\n        basic.pause(250)\n    }\n    flashingActive = false // Indicate flashing is complete\n    if (countdownActive) {\n        endCountdown() // Immediately transition to the end countdown\n    }\n}\n\n// Countdown Timer Function\nfunction startCountdown(seconds: number) {\n    countdownActive = true\n    control.runInBackground(() => runSnakePattern(seconds + 14)) // Run snake pattern for countdown + flashing + off\n    for (let i = seconds; i > 0; i--) {\n        if (i == 10) {\n            control.inBackground(() => flashNeoPixels()) // Flash in the last 10 seconds\n        }\n        basic.pause(1000) // 1-second delay\n    }\n    // Ensure the end sequence triggers after countdown\n    if (countdownActive) {\n        endCountdown()\n    }\n}\n\n// Run Snake Pattern\nfunction runSnakePattern(duration: number) {\n    let position = 0 // LED grid position\n    for (let i = 0; i < duration * 20; i++) { // Ensure it runs for the extended duration\n        if (!countdownActive) break // Stop if the countdown is no longer active\n        displaySnake(position)\n        position = (position + 1) % 25\n        basic.pause(50) // Speed up snake pattern\n    }\n}\n\n// Snake pattern for LED grid\nfunction displaySnake(position: number) {\n    let x = position % 5\n    let y = Math.floor(position / 5)\n    basic.clearScreen()\n    if (y % 2 == 0) {\n        // Even rows light up left-to-right\n        led.plot(x, y)\n    } else {\n        // Odd rows light up right-to-left\n        led.plot(4 - x, y)\n    }\n}\n\n// End Countdown: Turn off LEDs, display \"X\", and play buzzer\nfunction endCountdown() {\n    countdownActive = false // Stop the snake pattern\n    flashingActive = false // Ensure flashing stops\n    gameOver = true // Game is over, deactivate microswitch immediately\n    np.clear()\n    np.show() // Turn off NeoPixels\n    displayX() // Show \"X\" on the LED grid\n    control.inBackground(() => playGameOverSound()) // Play buzzer sound\n    basic.pause(4000) // Wait for buzzer to complete\n    np.setBrightness(64) // Set NeoPixels to low brightness (25%)\n    np.showColor(lastColor) // Restore NeoPixels to last color\n    np.show()\n}\n\n// Display \"X\" on the LED grid\nfunction displayX() {\n    basic.clearScreen()\n    for (let i = 0; i < 5; i++) {\n        led.plot(i, i) // Top-left to bottom-right diagonal\n        led.plot(i, 4 - i) // Top-right to bottom-left diagonal\n    }\n}\n\n// Laser sound effect for Red mode\nfunction playLaserSound() {\n    for (let freq = 1000; freq > 200; freq -= 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid descending tones\n    }\n}\n\n// Inverse laser sound effect for Blue mode\nfunction playInverseLaserSound() {\n    for (let freq = 200; freq <= 1000; freq += 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid ascending tones\n    }\n}\n\n// Play game-over dramatic buzzer sound\nfunction playGameOverSound() {\n    for (let i = 0; i < 3; i++) {\n        music.playTone(330, music.beat(BeatFraction.Quarter)) // Low E\n        music.playTone(440, music.beat(BeatFraction.Quarter)) // Middle A\n        music.playTone(554, music.beat(BeatFraction.Quarter)) // High C#\n        music.playTone(440, music.beat(BeatFraction.Half))    // Middle A held longer\n        basic.pause(200)\n    }\n    music.playTone(220, music.beat(BeatFraction.Double)) // Deep final tone (Low A)\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"one\") {\n        countdownTime = 60\n        basic.showNumber(1)\n    } else if (receivedString == \"two\") {\n        countdownTime = 120\n        basic.showNumber(2)\n    } else if (receivedString == \"three\") {\n        countdownTime = 180\n        basic.showNumber(3)\n    } else if (receivedString == \"four\") {\n        countdownTime = 240\n        basic.showNumber(4)\n    } else if (receivedString == \"reset\") {\n        basic.showString(\"R\")\n        isRainbowMode = true\n        gameOver = false\n        countdownActive = false\n        flashingActive = false\n        control.inBackground(function () {\n            rainbowChase()\n        })\n    } else if (receivedString == \"start\" && countdownTime > 0 && !countdownActive) {\n        basic.showString(\"S\")\n        control.inBackground(function () {\n            startCountdown(countdownTime)\n        })\n    }\n})\n\n// Monitor the tilt switch and handle first random color, then toggle\nbasic.forever(function () {\n    if (gameOver) return // Immediately exit if the game is over\n    if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        if (isRainbowMode) {\n            setRandomColor() // First press: Random Red or Blue\n        } else {\n            toggleColor() // Subsequent presses: Toggle Red and Blue\n        }\n        basic.pause(500) // Debounce delay\n        while (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            // Wait for switch release\n        }\n    }\n})\n\n// Start the rainbow mode on startup\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB) // 16-LED ring\ncontrol.inBackground(function () {\n    rainbowChase()\n})\nbasic.showIcon(IconNames.Heart) // Display heart on startup\n"]],"start1":0,"start2":0,"length1":0,"length2":8268}]}]},{"timestamp":1732554060823,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"radio.setGroup(1) // Ensure both micro:bits use the same group\nlet isRainbowMode = true // Start with rainbow mode\nlet isRedMode = Math.randomBoolean() // Randomly choose Red or Blue for the first switch press\nlet countdownTime = 0 // Tracks countdown time in seconds\nlet countdownActive = false // Tracks if countdown is active\nlet flashingActive = false // Tracks if flashing is active\nlet gameOver = false // Tracks if the game is over\nlet purpleModeActive = false // Tracks if Purple Mode is active\nlet lastColor = isRedMode ? neopixel.colors(NeoPixelColors.Red) : neopixel.colors(NeoPixelColors.Blue) // Default random color\n\n// Setup pull-up resistor for the tilt switch on P2\npins.setPull(DigitalPin.P2, PinPullMode.PullUp)\n\n// Redirect audio to external speaker on P1\nmusic.setBuiltInSpeakerEnabled(false) // Disable internal speaker\npins.analogSetPitchPin(AnalogPin.P1) // Route sound to P1\n\n// Function to apply brightness and update the LEDs\nfunction applyBrightness(brightness: number) {\n    np.setBrightness(brightness) // Apply brightness\n    np.showColor(lastColor)\n    np.show()\n}\n\n// Rainbow chasing effect\nfunction rainbowChase() {\n    while (isRainbowMode) {\n        for (let j = 0; j < 16; j++) {\n            if (!isRainbowMode) return // Exit if mode changes\n            np.clear()\n            for (let i = 0; i < 16; i++) {\n                let hue = ((i + j) * 360) / 16 // Calculate hue for each LED\n                np.setPixelColor(i, neopixel.hsl(hue, 100, 50))\n            }\n            np.show()\n            basic.pause(100) // Adjust speed of the rainbow\n        }\n    }\n}\n\n// Function to handle Purple Mode\nfunction activatePurpleMode() {\n    purpleModeActive = true\n    let duration = 10 // Purple Mode duration in seconds\n    control.runInBackground(() => {\n        for (let i = 0; i < duration * 2; i++) { // Flash purple for 10 seconds\n            np.showColor(neopixel.colors(NeoPixelColors.Purple))\n            basic.pause(250)\n            np.clear()\n            np.show()\n            basic.pause(250)\n            if (!purpleModeActive) return // Exit early if deactivated\n        }\n        purpleModeActive = false // End Purple Mode after 10 seconds\n    })\n}\n\n// Function to toggle color after Purple Mode\nfunction toggleColorFromPurple() {\n    let newColor = Math.randomBoolean() ? neopixel.colors(NeoPixelColors.Red) : neopixel.colors(NeoPixelColors.Blue)\n    lastColor = newColor\n    np.showColor(newColor)\n    applyBrightness(255)\n\n    // Send the chosen color to all other receivers\n    radio.sendString(newColor === neopixel.colors(NeoPixelColors.Red) ? \"red\" : \"blue\")\n    control.inBackground(function () {\n        newColor === neopixel.colors(NeoPixelColors.Red) ? playLaserSound() : playInverseLaserSound()\n    })\n}\n\n// Function to toggle between Red and Blue\nfunction toggleColor() {\n    isRedMode = !isRedMode // Alternate between Red and Blue\n    if (isRedMode) {\n        lastColor = neopixel.colors(NeoPixelColors.Red)\n        applyBrightness(255)\n        control.inBackground(function () {\n            playLaserSound() // Play laser sound for Red\n        })\n    } else {\n        lastColor = neopixel.colors(NeoPixelColors.Blue)\n        applyBrightness(255)\n        control.inBackground(function () {\n            playInverseLaserSound() // Play inverse laser sound for Blue\n        })\n    }\n}\n\n// Monitor the tilt switch\nbasic.forever(function () {\n    if (gameOver) return // Immediately exit if the game is over\n    if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        if (purpleModeActive) {\n            purpleModeActive = false // Disable Purple Mode\n            toggleColorFromPurple() // Handle Purple Mode toggle\n        } else if (isRainbowMode) {\n            setRandomColor() // First press: Random Red or Blue\n        } else {\n            toggleColor() // Subsequent presses: Toggle Red and Blue\n        }\n        basic.pause(500) // Debounce delay\n        while (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            // Wait for switch release\n        }\n    }\n})\n\n// Randomly activate Purple Mode during the game\ncontrol.runInBackground(function () {\n    while (true) {\n        basic.pause(Math.randomRange(30000, 60000)) // Wait 30 to 60 seconds\n        if (!countdownActive && !gameOver && !purpleModeActive) {\n            activatePurpleMode()\n        }\n    }\n})\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"red\") {\n        lastColor = neopixel.colors(NeoPixelColors.Red)\n        np.showColor(lastColor)\n    } else if (receivedString == \"blue\") {\n        lastColor = neopixel.colors(NeoPixelColors.Blue)\n        np.showColor(lastColor)\n    } else if (receivedString == \"reset\") {\n        basic.showString(\"R\")\n        isRainbowMode = true\n        gameOver = false\n        countdownActive = false\n        flashingActive = false\n        purpleModeActive = false\n        control.inBackground(function () {\n            rainbowChase()\n        })\n    } else if (receivedString == \"start\" && countdownTime > 0 && !countdownActive) {\n        basic.showString(\"S\")\n        control.inBackground(function () {\n            startCountdown(countdownTime)\n        })\n    }\n})\n\n// Start the rainbow mode on startup\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB) // 16-LED ring\ncontrol.inBackground(function () {\n    rainbowChase()\n})\nbasic.showIcon(IconNames.Heart) // Display heart on startup\n"]],"start1":0,"start2":0,"length1":5428,"length2":0}]}]},{"timestamp":1732554070949,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," to "],[-1,"set a random initial color (Red or Blue)\nfunction setRandomColor() {\n    isRedMode = Math.randomBoolean() // Randomly set the initial mode\n    if (isRedMode) {\n        lastColor = neopixel.colors(NeoPixelColors.Red)\n        applyBrightness(255)\n    "],[1,"handle Purple Mode\nfunction activatePurpleMode() {\n    purpleModeActive = true\n    let duration = 10 // Purple Mode duration in seconds\n"],[0,"    "]],"start1":1613,"start2":1613,"length1":257,"length2":144},{"diffs":[[0,"nds\n    control."],[-1,"i"],[1,"runI"],[0,"nBackground(() ="]],"start1":1749,"start2":1749,"length1":33,"length2":36},{"diffs":[[0," => "],[-1,"playLaserSound())\n    } else {\n        last"],[1,"{\n        for (let i = 0; i < duration * 2; i++) { // Flash purple for 10 seconds\n            np.show"],[0,"Color"],[-1," = "],[1,"("],[0,"neop"]],"start1":1783,"start2":1783,"length1":59,"length2":115},{"diffs":[[0,"(NeoPixelColors."],[-1,"Blu"],[1,"Purpl"],[0,"e)"],[1,")"],[0,"\n        applyBr"]],"start1":1909,"start2":1909,"length1":37,"length2":40},{"diffs":[[0,"    "],[-1,"applyBrightness(255"],[1,"    basic.pause(250"],[0,")\n  "]],"start1":1938,"start2":1938,"length1":27,"length2":27},{"diffs":[[0,"    "],[-1,"control.inBackground(() => playInverseLaserSound())\n    }\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"purple\") {\n        activatePurpleMode() // Activate Purple Mode when signal is received\n    } else if (receivedString == \"red\""],[1,"    np.clear()\n            np.show()\n            basic.pause(250)\n            if (!purpleModeActive) return // Exit early if deactivated\n        }\n        purpleModeActive = false // End Purple Mode after 10 seconds\n    })\n}\n\n// Function to toggle color after Purple Mode\nfunction toggleColorFromPurple("],[0,") {\n    "],[-1,"    last"],[1,"let new"],[0,"Color ="],[1," Math.randomBoolean() ?"],[0," neo"]],"start1":1967,"start2":1967,"length1":330,"length2":356},{"diffs":[[0,"Red)"],[-1,"\n        np.showColor(lastColor)\n    } else if (receivedString == \"blue\") {\n        lastColor = neopixel.colors(NeoPixelColors.Blue)\n    "],[1," : neopixel.colors(NeoPixelColors.Blue)\n    lastColor = newColor\n"],[0,"    "]],"start1":2351,"start2":2351,"length1":145,"length2":73},{"diffs":[[0,"   np.showColor("],[-1,"last"],[1,"new"],[0,"Color)\n    } els"]],"start1":2421,"start2":2421,"length1":36,"length2":35},{"diffs":[[0,"    "],[-1,"} else if (receivedString == \"reset\") {\n        basic.showString(\"R\")\n        isRainbowMode = true\n        gameOver = false\n        countdownActive = false\n        flashingActive = false\n        purpleModeActive = false\n        control.inBackground(function () {\n            rainbowChase()\n        })\n    } else if (receivedString == \"start\" && countdownTime > 0 && !countdownActiv"],[1,"applyBrightness(255)\n\n    // Send the chosen color to all other receivers\n    radio.sendString(newColor === neopixel.colors(NeoPixelColors.Red) ? \"red\" : \"blue\")\n    control.inBackground(function () {\n        newColor === neopixel.colors(NeoPixelColors.Red) ? playLaserSound() : playInverseLaserSound()\n    })\n}\n\n// Function to toggle between Red and Blue\nfunction toggleColor() {\n    isRedMode = !isRedMode // Alternate between Red and Blue\n    if (isRedMod"],[0,"e) {"]],"start1":2447,"start2":2447,"length1":389,"length2":466},{"diffs":[[0,"    "],[-1,"basic.showString(\"S\")\n        control.inBackground(function () {\n            startCountdown(countdownTime)\n        })\n    } else if (receivedString == \"one\") {\n        countdownTime = 60\n        basic.showNumber(1"],[1,"lastColor = neopixel.colors(NeoPixelColors.Red)\n        applyBrightness(255)\n        control.inBackground(function () {\n            playLaserSound() // Play laser sound for Red\n        })\n    } else {\n        lastColor = neopixel.colors(NeoPixelColors.Blue"],[0,")\n    "],[-1,"} else if (receivedString == \"two\") {"],[1,"    applyBrightness(255)"],[0,"\n   "]],"start1":2918,"start2":2918,"length1":264,"length2":294},{"diffs":[[0,"  co"],[-1,"u"],[0,"nt"],[-1,"downTime = 120\n        basic.showNumber(2)\n    } else if (receivedString == \"three\") {\n        countdownTime = 180\n        basic.showNumber(3)\n    } else if (receivedString == \"four\") {\n        countdownTime = 240\n        basic.showNumber(4"],[1,"rol.inBackground(function () {\n            playInverseLaserSound() // Play inverse laser sound for Blue\n        }"],[0,")\n  "]],"start1":3215,"start2":3215,"length1":251,"length2":123},{"diffs":[[0,"  })\n    }\n}"],[-1,")"],[0,"\n\n// Monitor"]],"start1":3331,"start2":3331,"length1":25,"length2":24},{"diffs":[[0,"  }\n})\n\n"],[1,"// Randomly activate Purple Mode during the game\ncontrol.runInBackground(function () {\n    while (true) {\n        basic.pause(Math.randomRange(30000, 60000)) // Wait 30 to 60 seconds\n        if (!countdownActive && !gameOver && !purpleModeActive) {\n            activatePurpleMode()\n        }\n    }\n})\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"red\") {\n        lastColor = neopixel.colors(NeoPixelColors.Red)\n        np.showColor(lastColor)\n    } else if (receivedString == \"blue\") {\n        lastColor = neopixel.colors(NeoPixelColors.Blue)\n        np.showColor(lastColor)\n    } else if (receivedString == \"reset\") {\n        basic.showString(\"R\")\n        isRainbowMode = true\n        gameOver = false\n        countdownActive = false\n        flashingActive = false\n        purpleModeActive = false\n        control.inBackground(function () {\n            rainbowChase()\n        })\n    } else if (receivedString == \"start\" && countdownTime > 0 && !countdownActive) {\n        basic.showString(\"S\")\n        control.inBackground(function () {\n            startCountdown(countdownTime)\n        })\n    }\n})\n\n"],[0,"// Start"]],"start1":4021,"start2":4021,"length1":16,"length2":1184}]}]},{"timestamp":1732554555717,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," to P1\n\n"],[1,"// Function to apply brightness and update the LEDs\n"],[0,"function"]],"start1":893,"start2":893,"length1":16,"length2":68},{"diffs":[[0,"lor)"],[-1," // Set to the last selected color"],[0,"\n   "]],"start1":1076,"start2":1076,"length1":42,"length2":8},{"diffs":[[0,"     }\n    }\n}\n\n"],[1,"// Function to set a random initial color (Red or Blue)\n"],[0,"function setRand"]],"start1":1586,"start2":1586,"length1":32,"length2":88},{"diffs":[[0,"\n}\n\n"],[-1,"function toggleColor() {\n    isRedMode = !isRedMode // Alternate between Red and Blue\n    if (isRedMode) {\n        lastColor = neopixel.colors(NeoPixelColors.Red)\n        applyBrightness(255)\n        control.inBackground(() => playLaserSound())\n    } else {\n        lastColor = neopixel.colors(NeoPixelColors.Blue)\n        applyBrightness(255)\n        control.inBackground(() => playInverseLaserSound())\n    }\n}\n\n// Flashing NeoPixels for the last 10 seconds\nfunction flashNeoPixels() {\n    flashingActive = true // Indicate flashing is active\n    for (let i = 0; i < 20; i++) { // Flash for 10 seconds (20 cycles at 250ms each)\n        if (!countdownActive) return // Stop if countdown ends prematurely\n        np.showColor(lastColor) // Turn on NeoPixels\n        basic.pause(250)\n        np.clear() // Turn off NeoPixels\n        np.show()\n        basic.pause(250)\n    }\n    flashingActive = false // Indicate flashing is complete\n    if (countdownActive) {\n        endCountdown() // Immediately transition to the end countdown\n    }\n}\n\n// Countdown Timer Function\nfunction startCountdown(seconds: number) {\n    countdownActive = true\n    control.runInBackground(() => runSnakePattern(seconds + 14)) // Run snake pattern for countdown + flashing + off\n    for (let i = seconds; i > 0; i--) {\n        if (i == 10) {\n            control.inBackground(() => flashNeoPixels()) // Flash in the last 10 seconds\n        }\n        basic.pause(1000) // 1-second delay\n    }\n    // Ensure the end sequence triggers after countdown\n    if (countdownActive) {\n        endCountdown()\n    }\n}\n\n// Run Snake Pattern\nfunction runSnakePattern(duration: number) {\n    let position = 0 // LED grid position\n    for (let i = 0; i < duration * 20; i++) { // Ensure it runs for the extended duration\n        if (!countdownActive) break // Stop if the countdown is no longer active\n        displaySnake(position)\n        position = (position + 1) % 25\n        basic.pause(50) // Speed up snake pattern\n    }\n}\n\n// Snake pattern for LED grid\nfunction displaySnake(position: number) {\n    let x = position % 5\n    let y = Math.floor(position / 5)\n    basic.clearScreen()\n    if (y % 2 == 0) {\n        // Even rows light up left-to-right\n        led.plot(x, y)\n    } else {\n        // Odd rows light up right-to-left\n        led.plot(4 - x, y)\n    }\n}\n\n// End Countdown: Turn off LEDs, display \"X\", and play buzzer\nfunction endCountdown() {\n    countdownActive = false // Stop the snake pattern\n    flashingActive = false // Ensure flashing stops\n    gameOver = true // Game is over, deactivate microswitch immediately\n    np.clear()\n    np.show() // Turn off NeoPixels\n    displayX() // Show \"X\" on the LED grid\n    control.inBackground(() => playGameOverSound()) // Play buzzer sound\n    basic.pause(4000) // Wait for buzzer to complete\n    np.setBrightness(64) // Set NeoPixels to low brightness (25%)\n    np.showColor(lastColor) // Restore NeoPixels to last color\n    np.show()\n}\n\n// Display \"X\" on the LED grid\nfunction displayX() {\n    basic.clearScreen()\n    for (let i = 0; i < 5; i++) {\n        led.plot(i, i) // Top-left to bottom-right diagonal\n        led.plot(i, 4 - i) // Top-right to bottom-left diagonal\n    }\n}\n\n// Laser sound effect for Red mode\nfunction playLaserSound() {\n    for (let freq = 1000; freq > 200; freq -= 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid descending tones\n    }\n}\n\n// Inverse laser sound effect for Blue mode\nfunction playInverseLaserSound() {\n    for (let freq = 200; freq <= 1000; freq += 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid ascending tones\n    }\n}\n\n// Play game-over dramatic buzzer sound\nfunction playGameOverSound() {\n    for (let i = 0; i < 3; i++) {\n        music.playTone(330, music.beat(BeatFraction.Quarter)) // Low E\n        music.playTone(440, music.beat(BeatFraction.Quarter)) // Middle A\n        music.playTone(554, music.beat(BeatFraction.Quarter)) // High C#\n        music.playTone(440, music.beat(BeatFraction.Half))    // Middle A held longer\n        basic.pause(200)\n    }\n    music.playTone(220, music.beat(BeatFraction.Double)) // Deep final tone (Low A)\n}\n\n"],[0,"// H"]],"start1":2079,"start2":2079,"length1":4184,"length2":8},{"diffs":[[0,"sRainbowMode) {\n"],[1,""],[0,"            setR"]],"start1":3813,"start2":3813,"length1":32,"length2":32},{"diffs":[[0,"lue\n"],[-1,"            isRainbowMode = false // Exit rainbow mode\n"],[0,"    "]],"start1":3889,"start2":3889,"length1":63,"length2":8}]}]},{"timestamp":1732555096598,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n}\n\n"],[-1,"function activatePurpleMode() {\n    purpleModeActive = true // Activate Purple Mode\n    np.showColor(neopixel.colors(NeoPixelColors.Purple)) // Turn NeoPixels purple\n    np.show()\n    basic.pause(10000) // Stay purple for 10 seconds\n    purpleModeActive = false // Exit Purple Mode after timeout\n    np.showColor(lastColor) // Revert to last color\n    np.show()\n}\n\nfunction toggleColorFromPurple() {\n    let newColor = Math.randomBoolean() ? neopixel.colors(NeoPixelColors.Red) : neopixel.colors(NeoPixelColors.Blue)\n    lastColor = newColor // Update the last color\n    np.showColor(newColor) // Set new color\n    radio.sendString(newColor === neopixel.colors(NeoPixelColors.Red) ? \"red\" : \"blue\") // Broadcast color to other receivers\n    np.show()\n}\n\n"],[0,"// F"]],"start1":2418,"start2":2418,"length1":762,"length2":8},{"diffs":[[0,"\n}\n\n"],[-1,"// Periodically activate Purple Mode\nfunction initiateRandomPurple() {\n    while (true) {\n        basic.pause(Math.randomRange(20000, 60000)) // Wait 20-60 seconds\n        if (!countdownActive && !purpleModeActive && !gameOver) {\n            radio.sendString(\"purple\") // Broadcast Purple Mode signal\n            activatePurpleMode() // Trigger Purple Mode locally\n        }\n    }\n}\n\n"],[0,"// L"]],"start1":5208,"start2":5208,"length1":392,"length2":8},{"diffs":[[0,"nction () {\n"],[1,""],[0,"    rainbowC"]],"start1":8443,"start2":8443,"length1":24,"length2":24},{"diffs":[[0,"\n})\n"],[-1,"control.inBackground(function () {\n    initiateRandomPurple() // Periodically activate Purple Mode\n})\n"],[0,"basi"]],"start1":8473,"start2":8473,"length1":110,"length2":8}]}]},{"timestamp":1732555602904,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    if ("],[1,"!countdownActive && "],[0,"!purpleM"]],"start1":6134,"start2":6134,"length1":16,"length2":36},{"diffs":[[0,"r) {"],[-1," // Allow during countdown"],[0,"\n   "]],"start1":6191,"start2":6191,"length1":34,"length2":8}]}]},{"timestamp":1732556319638,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"radio.setGroup(1) // Ensure both micro:bits use the same group\nlet isRainbowMode = true // Start with rainbow mode\nlet isRedMode = Math.randomBoolean() // Randomly choose Red or Blue for the first switch press\nlet countdownTime = 0 // Tracks countdown time in seconds\nlet countdownActive = false // Tracks if countdown is active\nlet flashingActive = false // Tracks if flashing is active\nlet gameOver = false // Tracks if the game is over\nlet purpleModeActive = false // Tracks if Purple Mode is active\nlet lastColor = isRedMode ? neopixel.colors(NeoPixelColors.Red) : neopixel.colors(NeoPixelColors.Blue) // Default random color\n\n// Setup pull-up resistor for the tilt switch on P2\npins.setPull(DigitalPin.P2, PinPullMode.PullUp)\n\n// Redirect audio to external speaker on P1\nmusic.setBuiltInSpeakerEnabled(false) // Disable internal speaker\npins.analogSetPitchPin(AnalogPin.P1) // Route sound to P1\n\nfunction applyBrightness(brightness: number) {\n    np.setBrightness(brightness) // Apply brightness\n    np.showColor(lastColor) // Set to the last selected color\n    np.show()\n}\n\n// Rainbow chasing effect\nfunction rainbowChase() {\n    while (isRainbowMode) {\n        for (let j = 0; j < 16; j++) {\n            if (!isRainbowMode) return // Exit if mode changes\n            np.clear()\n            for (let i = 0; i < 16; i++) {\n                let hue = ((i + j) * 360) / 16 // Calculate hue for each LED\n                np.setPixelColor(i, neopixel.hsl(hue, 100, 50))\n            }\n            np.show()\n            basic.pause(100) // Adjust speed of the rainbow\n        }\n    }\n}\n\nfunction setRandomColor() {\n    isRedMode = Math.randomBoolean() // Randomly set the initial mode\n    if (isRedMode) {\n        lastColor = neopixel.colors(NeoPixelColors.Red)\n        applyBrightness(255)\n        control.inBackground(() => playLaserSound())\n    } else {\n        lastColor = neopixel.colors(NeoPixelColors.Blue)\n        applyBrightness(255)\n        control.inBackground(() => playInverseLaserSound())\n    }\n}\n\nfunction toggleColor() {\n    isRedMode = !isRedMode // Alternate between Red and Blue\n    if (isRedMode) {\n        lastColor = neopixel.colors(NeoPixelColors.Red)\n        applyBrightness(255)\n        control.inBackground(() => playLaserSound())\n    } else {\n        lastColor = neopixel.colors(NeoPixelColors.Blue)\n        applyBrightness(255)\n        control.inBackground(() => playInverseLaserSound())\n    }\n}\n\nfunction activatePurpleMode() {\n    purpleModeActive = true // Activate Purple Mode\n    np.showColor(neopixel.colors(NeoPixelColors.Purple)) // Turn NeoPixels purple\n    np.show()\n    basic.pause(10000) // Stay purple for 10 seconds\n    purpleModeActive = false // Exit Purple Mode after timeout\n    np.showColor(lastColor) // Revert to last color\n    np.show()\n}\n\nfunction toggleColorFromPurple() {\n    let newColor = Math.randomBoolean() ? neopixel.colors(NeoPixelColors.Red) : neopixel.colors(NeoPixelColors.Blue)\n    lastColor = newColor // Update the last color\n    np.showColor(newColor) // Set new color\n    radio.sendString(newColor === neopixel.colors(NeoPixelColors.Red) ? \"red\" : \"blue\") // Broadcast color to other receivers\n    np.show()\n}\n\n// Flashing NeoPixels for the last 10 seconds\nfunction flashNeoPixels() {\n    flashingActive = true // Indicate flashing is active\n    for (let i = 0; i < 20; i++) { // Flash for 10 seconds (20 cycles at 250ms each)\n        if (!countdownActive) return // Stop if countdown ends prematurely\n        np.showColor(lastColor) // Turn on NeoPixels\n        basic.pause(250)\n        np.clear() // Turn off NeoPixels\n        np.show()\n        basic.pause(250)\n    }\n    flashingActive = false // Indicate flashing is complete\n    if (countdownActive) {\n        endCountdown() // Immediately transition to the end countdown\n    }\n}\n\n// Countdown Timer Function\nfunction startCountdown(seconds: number) {\n    countdownActive = true\n    control.runInBackground(() => runSnakePattern(seconds + 14)) // Run snake pattern for countdown + flashing + off\n    for (let i = seconds; i > 0; i--) {\n        if (i == 10) {\n            control.inBackground(() => flashNeoPixels()) // Flash in the last 10 seconds\n        }\n        basic.pause(1000) // 1-second delay\n    }\n    // Ensure the end sequence triggers after countdown\n    if (countdownActive) {\n        endCountdown()\n    }\n}\n\n// Run Snake Pattern\nfunction runSnakePattern(duration: number) {\n    let position = 0 // LED grid position\n    for (let i = 0; i < duration * 20; i++) { // Ensure it runs for the extended duration\n        if (!countdownActive) break // Stop if the countdown is no longer active\n        displaySnake(position)\n        position = (position + 1) % 25\n        basic.pause(50) // Speed up snake pattern\n    }\n}\n\n// Snake pattern for LED grid\nfunction displaySnake(position: number) {\n    let x = position % 5\n    let y = Math.floor(position / 5)\n    basic.clearScreen()\n    if (y % 2 == 0) {\n        // Even rows light up left-to-right\n        led.plot(x, y)\n    } else {\n        // Odd rows light up right-to-left\n        led.plot(4 - x, y)\n    }\n}\n\n// End Countdown: Turn off LEDs, display \"X\", and play buzzer\nfunction endCountdown() {\n    countdownActive = false // Stop the snake pattern\n    flashingActive = false // Ensure flashing stops\n    gameOver = true // Game is over, deactivate microswitch immediately\n    np.clear()\n    np.show() // Turn off NeoPixels\n    displayX() // Show \"X\" on the LED grid\n    control.inBackground(() => playGameOverSound()) // Play buzzer sound\n    basic.pause(4000) // Wait for buzzer to complete\n    np.setBrightness(64) // Set NeoPixels to low brightness (25%)\n    np.showColor(lastColor) // Restore NeoPixels to last color\n    np.show()\n}\n\n// Display \"X\" on the LED grid\nfunction displayX() {\n    basic.clearScreen()\n    for (let i = 0; i < 5; i++) {\n        led.plot(i, i) // Top-left to bottom-right diagonal\n        led.plot(i, 4 - i) // Top-right to bottom-left diagonal\n    }\n}\n\n// Periodically activate Purple Mode\nfunction initiateRandomPurple() {\n    while (true) {\n        basic.pause(Math.randomRange(20000, 60000)) // Wait 20-60 seconds\n        if (!purpleModeActive && !gameOver) { // Allow during countdown\n            radio.sendString(\"purple\") // Broadcast Purple Mode signal\n            activatePurpleMode() // Trigger Purple Mode locally\n        }\n    }\n}\n\n// Laser sound effect for Red mode\nfunction playLaserSound() {\n    for (let freq = 1000; freq > 200; freq -= 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid descending tones\n    }\n}\n\n// Inverse laser sound effect for Blue mode\nfunction playInverseLaserSound() {\n    for (let freq = 200; freq <= 1000; freq += 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid ascending tones\n    }\n}\n\n// Play game-over dramatic buzzer sound\nfunction playGameOverSound() {\n    for (let i = 0; i < 3; i++) {\n        music.playTone(330, music.beat(BeatFraction.Quarter)) // Low E\n        music.playTone(440, music.beat(BeatFraction.Quarter)) // Middle A\n        music.playTone(554, music.beat(BeatFraction.Quarter)) // High C#\n        music.playTone(440, music.beat(BeatFraction.Half))    // Middle A held longer\n        basic.pause(200)\n    }\n    music.playTone(220, music.beat(BeatFraction.Double)) // Deep final tone (Low A)\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"purple\") {\n        activatePurpleMode() // Activate Purple Mode when signal is received\n    } else if (receivedString == \"red\") {\n        lastColor = neopixel.colors(NeoPixelColors.Red)\n        np.showColor(lastColor)\n    } else if (receivedString == \"blue\") {\n        lastColor = neopixel.colors(NeoPixelColors.Blue)\n        np.showColor(lastColor)\n    } else if (receivedString == \"reset\") {\n        basic.showString(\"R\")\n        isRainbowMode = true\n        gameOver = false\n        countdownActive = false\n        flashingActive = false\n        purpleModeActive = false\n        control.inBackground(function () {\n            rainbowChase()\n        })\n    } else if (receivedString == \"start\" && countdownTime > 0 && !countdownActive) {\n        basic.showString(\"S\")\n        control.inBackground(function () {\n            startCountdown(countdownTime)\n        })\n    } else if (receivedString == \"one\") {\n        countdownTime = 60\n        basic.showNumber(1)\n    } else if (receivedString == \"two\") {\n        countdownTime = 120\n        basic.showNumber(2)\n    } else if (receivedString == \"three\") {\n        countdownTime = 180\n        basic.showNumber(3)\n    } else if (receivedString == \"four\") {\n        countdownTime = 240\n        basic.showNumber(4)\n    }\n})\n\n// Monitor the tilt switch\nbasic.forever(function () {\n    if (gameOver) return // Immediately exit if the game is over\n    if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        if (purpleModeActive) {\n            purpleModeActive = false // Disable Purple Mode\n            toggleColorFromPurple() // Handle Purple Mode toggle\n        } else if (isRainbowMode) {\n            setRandomColor() // First press: Random Red or Blue\n            isRainbowMode = false // Exit rainbow mode\n        } else {\n            toggleColor() // Subsequent presses: Toggle Red and Blue\n        }\n        basic.pause(500) // Debounce delay\n        while (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            // Wait for switch release\n        }\n    }\n})\n\n// Start the rainbow mode on startup\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB) // 16-LED ring\ncontrol.inBackground(function () {\n    rainbowChase()\n})\ncontrol.inBackground(function () {\n    initiateRandomPurple() // Periodically activate Purple Mode\n})\nbasic.showIcon(IconNames.Heart) // Display heart on startup\n"]],"start1":0,"start2":0,"length1":0,"length2":9783}]}]},{"timestamp":1732556877143,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"radio.setGroup(1) // Ensure both micro:bits use the same group\nlet isRainbowMode = true // Start with rainbow mode\nlet isRedMode = Math.randomBoolean() // Randomly choose Red or Blue for the first switch press\nlet countdownTime = 0 // Tracks countdown time in seconds\nlet countdownActive = false // Tracks if countdown is active\nlet flashingActive = false // Tracks if flashing is active\nlet gameOver = false // Tracks if the game is over\nlet purpleModeActive = false // Tracks if Purple Mode is active\nlet lastColor = isRedMode ? neopixel.colors(NeoPixelColors.Red) : neopixel.colors(NeoPixelColors.Blue) // Default random color\nlet purpleColor = neopixel.hsl(270, 100, 50) // Adjusted more violet-like purple color\n\n// Setup pull-up resistor for the tilt switch on P2\npins.setPull(DigitalPin.P2, PinPullMode.PullUp)\n\n// Redirect audio to external speaker on P1\nmusic.setBuiltInSpeakerEnabled(false) // Disable internal speaker\npins.analogSetPitchPin(AnalogPin.P1) // Route sound to P1\n\nfunction applyBrightness(brightness: number) {\n    np.setBrightness(brightness) // Apply brightness\n    np.showColor(lastColor) // Set to the last selected color\n    np.show()\n}\n\n// Rainbow chasing effect\nfunction rainbowChase() {\n    while (isRainbowMode) {\n        for (let j = 0; j < 16; j++) {\n            if (!isRainbowMode) return // Exit if mode changes\n            np.clear()\n            for (let i = 0; i < 16; i++) {\n                let hue = ((i + j) * 360) / 16 // Calculate hue for each LED\n                np.setPixelColor(i, neopixel.hsl(hue, 100, 50))\n            }\n            np.show()\n            basic.pause(100) // Adjust speed of the rainbow\n        }\n    }\n}\n\n// Set NeoPixel ring to red and play laser sound\nfunction setRed() {\n    isRainbowMode = false\n    isRedMode = true\n    lastColor = neopixel.colors(NeoPixelColors.Red)\n    applyBrightness(255)\n    control.inBackground(() => playLaserSound())\n}\n\n// Set NeoPixel ring to blue and play inverse laser sound\nfunction setBlue() {\n    isRainbowMode = false\n    isRedMode = false\n    lastColor = neopixel.colors(NeoPixelColors.Blue)\n    applyBrightness(255)\n    control.inBackground(() => playInverseLaserSound())\n}\n\n// Activate Purple Mode\nfunction activatePurpleMode() {\n    purpleModeActive = true // Activate Purple Mode\n    np.showColor(purpleColor) // Set NeoPixels to violet\n    np.show()\n    basic.pause(10000) // Stay purple for 10 seconds\n    purpleModeActive = false // Exit Purple Mode after timeout\n    np.showColor(lastColor) // Revert to last color\n    np.show()\n}\n\n// Handle color change and play corresponding laser sound\nfunction toggleColorFromPurple() {\n    let newColor = Math.randomBoolean() ? neopixel.colors(NeoPixelColors.Red) : neopixel.colors(NeoPixelColors.Blue)\n    lastColor = newColor // Update the last color\n    np.showColor(newColor) // Set new color\n    radio.sendString(newColor === neopixel.colors(NeoPixelColors.Red) ? \"red\" : \"blue\") // Broadcast color to other receivers\n    np.show()\n    // Play appropriate laser sound\n    if (newColor === neopixel.colors(NeoPixelColors.Red)) {\n        control.inBackground(() => playLaserSound())\n    } else {\n        control.inBackground(() => playInverseLaserSound())\n    }\n}\n\n// Toggle between Red and Blue colors\nfunction toggleColor() {\n    if (isRedMode) {\n        setBlue()\n    } else {\n        setRed()\n    }\n}\n\n// Randomly choose between Red and Blue for the first press\nfunction setRandomColor() {\n    if (Math.randomBoolean()) {\n        setRed()\n    } else {\n        setBlue()\n    }\n}\n\n// Flashing NeoPixels for the last 10 seconds\nfunction flashNeoPixels() {\n    flashingActive = true // Indicate flashing is active\n    for (let i = 0; i < 20; i++) { // Flash for 10 seconds (20 cycles at 250ms each)\n        if (!countdownActive) return // Stop if countdown ends prematurely\n        np.showColor(lastColor) // Turn on NeoPixels\n        basic.pause(250)\n        np.clear() // Turn off NeoPixels\n        np.show()\n        basic.pause(250)\n    }\n    flashingActive = false // Indicate flashing is complete\n    if (countdownActive) {\n        endCountdown() // Immediately transition to the end countdown\n    }\n}\n\n// Countdown Timer Function\nfunction startCountdown(seconds: number) {\n    countdownActive = true\n    control.runInBackground(() => runSnakePattern(seconds + 14)) // Run snake pattern for countdown + flashing + off\n    for (let i = seconds; i > 0; i--) {\n        if (i == 10) {\n            control.inBackground(() => flashNeoPixels()) // Flash in the last 10 seconds\n        }\n        basic.pause(1000) // 1-second delay\n    }\n    // Ensure the end sequence triggers after countdown\n    if (countdownActive) {\n        endCountdown()\n    }\n}\n\n// Run Snake Pattern\nfunction runSnakePattern(duration: number) {\n    let position = 0 // LED grid position\n    for (let i = 0; i < duration * 20; i++) { // Ensure it runs for the extended duration\n        if (!countdownActive) break // Stop if the countdown is no longer active\n        displaySnake(position)\n        position = (position + 1) % 25\n        basic.pause(50) // Speed up snake pattern\n    }\n}\n\n// Snake pattern for LED grid\nfunction displaySnake(position: number) {\n    let x = position % 5\n    let y = Math.floor(position / 5)\n    basic.clearScreen()\n    if (y % 2 == 0) {\n        // Even rows light up left-to-right\n        led.plot(x, y)\n    } else {\n        // Odd rows light up right-to-left\n        led.plot(4 - x, y)\n    }\n}\n\n// End Countdown: Turn off LEDs, display \"X\", and play buzzer\nfunction endCountdown() {\n    countdownActive = false // Stop the snake pattern\n    flashingActive = false // Ensure flashing stops\n    gameOver = true // Game is over, deactivate microswitch immediately\n    np.clear()\n    np.show() // Turn off NeoPixels\n    displayX() // Show \"X\" on the LED grid\n    control.inBackground(() => playGameOverSound()) // Play buzzer sound\n    basic.pause(4000) // Wait for buzzer to complete\n    np.setBrightness(64) // Set NeoPixels to low brightness (25%)\n    np.showColor(lastColor) // Restore NeoPixels to last color\n    np.show()\n}\n\n// Display \"X\" on the LED grid\nfunction displayX() {\n    basic.clearScreen()\n    for (let i = 0; i < 5; i++) {\n        led.plot(i, i) // Top-left to bottom-right diagonal\n        led.plot(i, 4 - i) // Top-right to bottom-left diagonal\n    }\n}\n\n// Laser sound effect for Red mode\nfunction playLaserSound() {\n    for (let freq = 1000; freq > 200; freq -= 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid descending tones\n    }\n}\n\n// Inverse laser sound effect for Blue mode\nfunction playInverseLaserSound() {\n    for (let freq = 200; freq <= 1000; freq += 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid ascending tones\n    }\n}\n\n// Play game-over dramatic buzzer sound\nfunction playGameOverSound() {\n    for (let i = 0; i < 3; i++) {\n        music.playTone(330, music.beat(BeatFraction.Quarter)) // Low E\n        music.playTone(440, music.beat(BeatFraction.Quarter)) // Middle A\n        music.playTone(554, music.beat(BeatFraction.Quarter)) // High C#\n        music.playTone(440, music.beat(BeatFraction.Half))    // Middle A held longer\n        basic.pause(200)\n    }\n    music.playTone(220, music.beat(BeatFraction.Double)) // Deep final tone (Low A)\n}\n\n// Initiate random purple mode periodically\nfunction initiateRandomPurple() {\n    while (true) {\n        if (!gameOver && countdownActive) {\n            basic.pause(Math.randomRange(15000, 30000)) // Random delay between 15-30 seconds\n            activatePurpleMode()\n        } else {\n            basic.pause(1000) // Check periodically if game is active\n        }\n    }\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"purple\") {\n        activatePurpleMode() // Activate Purple Mode when signal is received\n    } else if (receivedString == \"red\") {\n        lastColor = neopixel.colors(NeoPixelColors.Red)\n        np.showColor(lastColor)\n    } else if (receivedString == \"blue\") {\n        lastColor = neopixel.colors(NeoPixelColors.Blue)\n        np.showColor(lastColor)\n    } else if (receivedString == \"reset\") {\n        basic.showString(\"R\")\n        isRainbowMode = true\n        gameOver = false\n        countdownActive = false\n        flashingActive = false\n        purpleModeActive = false\n        control.inBackground(() => rainbowChase())\n    } else if (receivedString == \"start\" && countdownTime > 0 && !countdownActive) {\n        basic.showString(\"S\")\n        control.inBackground(() => startCountdown(countdownTime))\n    } else if (receivedString == \"one\") {\n        countdownTime = 60\n        basic.showNumber(1)\n    } else if (receivedString == \"two\") {\n        countdownTime = 120\n        basic.showNumber(2)\n    } else if (receivedString == \"three\") {\n        countdownTime = 180\n        basic.showNumber(3)\n    } else if (receivedString == \"four\") {\n        countdownTime = 240\n        basic.showNumber(4)\n    }\n})\n\n// Monitor the tilt switch\nbasic.forever(function () {\n    if (gameOver) return // Immediately exit if the game is over\n    if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        if (purpleModeActive) {\n            purpleModeActive = false // Disable Purple Mode\n            toggleColorFromPurple() // Handle Purple Mode toggle\n        } else if (isRainbowMode) {\n            setRandomColor() // First press: Random Red or Blue\n            isRainbowMode = false // Exit rainbow mode\n        } else {\n            toggleColor() // Subsequent presses: Toggle Red and Blue\n        }\n        basic.pause(500) // Debounce delay\n        while (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            // Wait for switch release\n        }\n    }\n})\n\n// Start the rainbow mode on startup\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB) // 16-LED ring\ncontrol.inBackground(() => rainbowChase())\ncontrol.inBackground(() => initiateRandomPurple()) // Periodically activate Purple Mode\nbasic.showIcon(IconNames.Heart) // Display heart on startup\n"]],"start1":0,"start2":0,"length1":10040,"length2":0}]}]},{"timestamp":1732556877587,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"radio.setGroup(1) // Ensure both micro:bits use the same group\nlet isRainbowMode = true // Start with rainbow mode\nlet isRedMode = Math.randomBoolean() // Randomly choose Red or Blue for the first switch press\nlet countdownTime = 0 // Tracks countdown time in seconds\nlet countdownActive = false // Tracks if countdown is active\nlet flashingActive = false // Tracks if flashing is active\nlet gameOver = false // Tracks if the game is over\nlet purpleModeActive = false // Tracks if Purple Mode is active\nlet lastColor = isRedMode ? neopixel.colors(NeoPixelColors.Red) : neopixel.colors(NeoPixelColors.Blue) // Default random color\nlet purpleColor = neopixel.hsl(270, 100, 50) // Adjusted more violet-like purple color\n\n// Setup pull-up resistor for the tilt switch on P2\npins.setPull(DigitalPin.P2, PinPullMode.PullUp)\n\n// Redirect audio to external speaker on P1\nmusic.setBuiltInSpeakerEnabled(false) // Disable internal speaker\npins.analogSetPitchPin(AnalogPin.P1) // Route sound to P1\n\nfunction applyBrightness(brightness: number) {\n    np.setBrightness(brightness) // Apply brightness\n    np.showColor(lastColor) // Set to the last selected color\n    np.show()\n}\n\n// Rainbow chasing effect\nfunction rainbowChase() {\n    while (isRainbowMode) {\n        for (let j = 0; j < 16; j++) {\n            if (!isRainbowMode) return // Exit if mode changes\n            np.clear()\n            for (let i = 0; i < 16; i++) {\n                let hue = ((i + j) * 360) / 16 // Calculate hue for each LED\n                np.setPixelColor(i, neopixel.hsl(hue, 100, 50))\n            }\n            np.show()\n            basic.pause(100) // Adjust speed of the rainbow\n        }\n    }\n}\n\n// Set NeoPixel ring to red and play laser sound\nfunction setRed() {\n    isRainbowMode = false\n    isRedMode = true\n    lastColor = neopixel.colors(NeoPixelColors.Red)\n    applyBrightness(255)\n    control.inBackground(() => playLaserSound())\n}\n\n// Set NeoPixel ring to blue and play inverse laser sound\nfunction setBlue() {\n    isRainbowMode = false\n    isRedMode = false\n    lastColor = neopixel.colors(NeoPixelColors.Blue)\n    applyBrightness(255)\n    control.inBackground(() => playInverseLaserSound())\n}\n\n// Activate Purple Mode\nfunction activatePurpleMode() {\n    purpleModeActive = true // Activate Purple Mode\n    np.showColor(purpleColor) // Set NeoPixels to violet\n    np.show()\n    basic.pause(10000) // Stay purple for 10 seconds\n    purpleModeActive = false // Exit Purple Mode after timeout\n    np.showColor(lastColor) // Revert to last color\n    np.show()\n}\n\n// Handle color change and play corresponding laser sound\nfunction toggleColorFromPurple() {\n    let newColor = Math.randomBoolean() ? neopixel.colors(NeoPixelColors.Red) : neopixel.colors(NeoPixelColors.Blue)\n    lastColor = newColor // Update the last color\n    np.showColor(newColor) // Set new color\n    radio.sendString(newColor === neopixel.colors(NeoPixelColors.Red) ? \"red\" : \"blue\") // Broadcast color to other receivers\n    np.show()\n    // Play appropriate laser sound\n    if (newColor === neopixel.colors(NeoPixelColors.Red)) {\n        control.inBackground(() => playLaserSound())\n    } else {\n        control.inBackground(() => playInverseLaserSound())\n    }\n}\n\n// Toggle between Red and Blue colors\nfunction toggleColor() {\n    if (isRedMode) {\n        setBlue()\n    } else {\n        setRed()\n    }\n}\n\n// Randomly choose between Red and Blue for the first press\nfunction setRandomColor() {\n    if (Math.randomBoolean()) {\n        setRed()\n    } else {\n        setBlue()\n    }\n}\n\n// Flashing NeoPixels for the last 10 seconds\nfunction flashNeoPixels() {\n    flashingActive = true // Indicate flashing is active\n    for (let i = 0; i < 20; i++) { // Flash for 10 seconds (20 cycles at 250ms each)\n        if (!countdownActive) return // Stop if countdown ends prematurely\n        np.showColor(lastColor) // Turn on NeoPixels\n        basic.pause(250)\n        np.clear() // Turn off NeoPixels\n        np.show()\n        basic.pause(250)\n    }\n    flashingActive = false // Indicate flashing is complete\n    if (countdownActive) {\n        endCountdown() // Immediately transition to the end countdown\n    }\n}\n\n// Countdown Timer Function\nfunction startCountdown(seconds: number) {\n    countdownActive = true\n    control.runInBackground(() => runSnakePattern(seconds + 14)) // Run snake pattern for countdown + flashing + off\n    for (let i = seconds; i > 0; i--) {\n        if (i == 10) {\n            control.inBackground(() => flashNeoPixels()) // Flash in the last 10 seconds\n        }\n        basic.pause(1000) // 1-second delay\n    }\n    // Ensure the end sequence triggers after countdown\n    if (countdownActive) {\n        endCountdown()\n    }\n}\n\n// Run Snake Pattern\nfunction runSnakePattern(duration: number) {\n    let position = 0 // LED grid position\n    for (let i = 0; i < duration * 20; i++) { // Ensure it runs for the extended duration\n        if (!countdownActive) break // Stop if the countdown is no longer active\n        displaySnake(position)\n        position = (position + 1) % 25\n        basic.pause(50) // Speed up snake pattern\n    }\n}\n\n// Snake pattern for LED grid\nfunction displaySnake(position: number) {\n    let x = position % 5\n    let y = Math.floor(position / 5)\n    basic.clearScreen()\n    if (y % 2 == 0) {\n        // Even rows light up left-to-right\n        led.plot(x, y)\n    } else {\n        // Odd rows light up right-to-left\n        led.plot(4 - x, y)\n    }\n}\n\n// End Countdown: Turn off LEDs, display \"X\", and play buzzer\nfunction endCountdown() {\n    countdownActive = false // Stop the snake pattern\n    flashingActive = false // Ensure flashing stops\n    gameOver = true // Game is over, deactivate microswitch immediately\n    np.clear()\n    np.show() // Turn off NeoPixels\n    displayX() // Show \"X\" on the LED grid\n    control.inBackground(() => playGameOverSound()) // Play buzzer sound\n    basic.pause(4000) // Wait for buzzer to complete\n    np.setBrightness(64) // Set NeoPixels to low brightness (25%)\n    np.showColor(lastColor) // Restore NeoPixels to last color\n    np.show()\n}\n\n// Display \"X\" on the LED grid\nfunction displayX() {\n    basic.clearScreen()\n    for (let i = 0; i < 5; i++) {\n        led.plot(i, i) // Top-left to bottom-right diagonal\n        led.plot(i, 4 - i) // Top-right to bottom-left diagonal\n    }\n}\n\n// Laser sound effect for Red mode\nfunction playLaserSound() {\n    for (let freq = 1000; freq > 200; freq -= 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid descending tones\n    }\n}\n\n// Inverse laser sound effect for Blue mode\nfunction playInverseLaserSound() {\n    for (let freq = 200; freq <= 1000; freq += 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid ascending tones\n    }\n}\n\n// Play game-over dramatic buzzer sound\nfunction playGameOverSound() {\n    for (let i = 0; i < 3; i++) {\n        music.playTone(330, music.beat(BeatFraction.Quarter)) // Low E\n        music.playTone(440, music.beat(BeatFraction.Quarter)) // Middle A\n        music.playTone(554, music.beat(BeatFraction.Quarter)) // High C#\n        music.playTone(440, music.beat(BeatFraction.Half))    // Middle A held longer\n        basic.pause(200)\n    }\n    music.playTone(220, music.beat(BeatFraction.Double)) // Deep final tone (Low A)\n}\n\n// Initiate random purple mode periodically\nfunction initiateRandomPurple() {\n    while (true) {\n        if (!gameOver && countdownActive) {\n            basic.pause(Math.randomRange(15000, 30000)) // Random delay between 15-30 seconds\n            activatePurpleMode()\n        } else {\n            basic.pause(1000) // Check periodically if game is active\n        }\n    }\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"purple\") {\n        activatePurpleMode() // Activate Purple Mode when signal is received\n    } else if (receivedString == \"red\") {\n        lastColor = neopixel.colors(NeoPixelColors.Red)\n        np.showColor(lastColor)\n    } else if (receivedString == \"blue\") {\n        lastColor = neopixel.colors(NeoPixelColors.Blue)\n        np.showColor(lastColor)\n    } else if (receivedString == \"reset\") {\n        basic.showString(\"R\")\n        isRainbowMode = true\n        gameOver = false\n        countdownActive = false\n        flashingActive = false\n        purpleModeActive = false\n        control.inBackground(() => rainbowChase())\n    } else if (receivedString == \"start\" && countdownTime > 0 && !countdownActive) {\n        basic.showString(\"S\")\n        control.inBackground(() => startCountdown(countdownTime))\n    } else if (receivedString == \"one\") {\n        countdownTime = 60\n        basic.showNumber(1)\n    } else if (receivedString == \"two\") {\n        countdownTime = 120\n        basic.showNumber(2)\n    } else if (receivedString == \"three\") {\n        countdownTime = 180\n        basic.showNumber(3)\n    } else if (receivedString == \"four\") {\n        countdownTime = 240\n        basic.showNumber(4)\n    }\n})\n\n// Monitor the tilt switch\nbasic.forever(function () {\n    if (gameOver) return // Immediately exit if the game is over\n    if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        if (purpleModeActive) {\n            purpleModeActive = false // Disable Purple Mode\n            toggleColorFromPurple() // Handle Purple Mode toggle\n        } else if (isRainbowMode) {\n            setRandomColor() // First press: Random Red or Blue\n            isRainbowMode = false // Exit rainbow mode\n        } else {\n            toggleColor() // Subsequent presses: Toggle Red and Blue\n        }\n        basic.pause(500) // Debounce delay\n        while (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            // Wait for switch release\n        }\n    }\n})\n\n// Start the rainbow mode on startup\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB) // 16-LED ring\ncontrol.inBackground(() => rainbowChase())\ncontrol.inBackground(() => initiateRandomPurple()) // Periodically activate Purple Mode\nbasic.showIcon(IconNames.Heart) // Display heart on startup"],[0,"\n"]],"start1":0,"start2":0,"length1":1,"length2":10040}]}]},{"timestamp":1732657518142,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"radio.setGroup(1) // Ensure both micro:bits use the same group\nlet brightnessLevel = 255 // Start at maximum brightness (100%)\nlet isRainbowMode = true // Start with rainbow mode\nlet isRedMode = Math.randomBoolean() // Randomly choose Red or Blue for the first switch press\nlet countdownTime = 0 // Tracks countdown time in seconds\nlet countdownActive = false // Tracks if countdown is active\nlet flashingActive = false // Tracks if flashing is active\nlet gameOver = false // Tracks if the game is over\nlet purpleModeActive = false // Tracks if Purple Mode is active\nlet lastColor = isRedMode ? neopixel.colors(NeoPixelColors.Red) : neopixel.colors(NeoPixelColors.Blue) // Default random color\nlet purpleColor = neopixel.hsl(270, 100, 50) // Adjusted more violet-like purple color\n\n// Setup NeoPixel ring\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB)\n\n// Apply brightness and update the NeoPixel ring\nfunction applyBrightness() {\n    np.setBrightness(brightnessLevel)\n    np.showColor(lastColor)\n    np.show()\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"reset\") {\n        isRainbowMode = true\n        countdownActive = false\n        gameOver = false\n        flashingActive = false\n        purpleModeActive = false\n        brightnessLevel = 255 // Reset brightness to max\n        control.inBackground(() => rainbowChase())\n    } else if (receivedString == \"start\" && countdownTime > 0 && !countdownActive) {\n        control.inBackground(() => startCountdown(countdownTime))\n    }\n})\n\n// Adjust brightness based on joystick input\nradio.onReceivedValue(function (name, value) {\n    if (name == \"brightness\") {\n        brightnessLevel = Math.map(value, 10, 100, 25, 255) // Scale brightness from 10% to 100%\n        applyBrightness()\n    }\n})\n\n// Rainbow chasing effect\nfunction rainbowChase() {\n    while (isRainbowMode) {\n        for (let j = 0; j < 16; j++) {\n            if (!isRainbowMode) return // Exit if mode changes\n            np.clear()\n            for (let i = 0; i < 16; i++) {\n                let hue = ((i + j) * 360) / 16 // Calculate hue for each LED\n                np.setPixelColor(i, neopixel.hsl(hue, 100, 50))\n            }\n            np.setBrightness(brightnessLevel) // Apply current brightness\n            np.show()\n            basic.pause(100) // Adjust speed of the rainbow\n        }\n    }\n}"],[0,"\n"]],"start1":0,"start2":0,"length1":2404,"length2":1}]}]},{"timestamp":1732657527173,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\nlet lastColor ="],[1," isRedMode ?"],[0," neopixel.colors"]],"start1":566,"start2":566,"length1":32,"length2":44},{"diffs":[[0,"ed) "],[-1,"// Default to Red initially"],[1,": neopixel.colors(NeoPixelColors.Blue) // Default random color"],[0,"\nlet"]],"start1":627,"start2":627,"length1":35,"length2":70},{"diffs":[[0,"\n// "],[-1,"Rainbow chasing effect\nfunction rainbowChase() {\n    while (isRainbowMode) {\n        for (let j = 0; j < 16; j++) {\n            if (!isRainbowMode) return // Exit if mode changes\n            np.clear()\n            for (let i = 0; i < 16; i++) {\n                let hue = ((i + j) * 360) / 16 // Calculate hue for each LED\n                np.setPixelColor(i, neopixel.hsl(hue, 100, 50))\n            }\n            np.setBrightness(brightnessLevel) // Apply current brightness\n            np.show()\n            basic.pause(100) // Adjust speed of the rainbow\n        }\n    }\n}\n\n// Set NeoPixel ring to red and play laser sound\nfunction setRed("],[1,"Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"reset\""],[0,") {\n    "],[1,"    "],[0,"isRa"]],"start1":1028,"start2":1028,"length1":656,"length2":135},{"diffs":[[0,"e = "],[-1,"false\n    isRedMode = true\n    lastColor = neopixel.colors(NeoPixelColors.Red)\n    applyBrightness()\n    control.inBackground(() => playLaserSound())\n}\n\n// Set NeoPixel ring to blue and play inverse laser sound\nfunction setBlue() {\n    isRainbowMode = false\n    isRedMode = false\n    lastColor = neopixel.colors(NeoPixelColors.Blue)\n    applyBrightness()\n    control.inBackground(() => playInverseLaserSound())\n}\n\n// Handle Purple Mode activation\nfunction activatePurpleMode() {\n    purpleModeActive = true\n    np.showColor(purpleColor)\n    np.show()\n    basic.pause(10000) // Stay in purple mode for 10 seconds\n    purpleModeActive = false\n    applyBrightness() // Revert to last color\n}\n\n// Handle toggle from Purple Mode\nfunction toggleColorFromPurple() {\n    let newColor = Math.randomBoolean() ? neopixel.colors(NeoPixelColors.Red) : neopixel.colors(NeoPixelColors.Blue)\n    lastColor = newColor\n    np.showColor(newColor)\n    radio.sendString(newColor === neopixel.colors(NeoPixelColors.Red) ? \"red\" : \"blue\")\n    np.show()\n    if (newColor === neopixel.colors(NeoPixelColors.Red)) {\n        control.inBackground(() => playLaserSound())\n    } else {\n"],[1,"true\n        countdownActive = false\n        gameOver = false\n        flashingActive = false\n        purpleModeActive = false\n        brightnessLevel = 255 // Reset brightness to max\n   "],[0,"     "],[-1,"   "],[0,"cont"]],"start1":1171,"start2":1171,"length1":1172,"length2":199},{"diffs":[[0," => "],[-1,"playInverseLaserSound())\n    }\n}\n\n// Toggle between Red and Blue colors\nfunction toggleColor() {\n    if (isRedMode) {\n        setBlue()\n    } else {\n        setRed()\n    }\n}\n\n// Randomly choose between Red and Blue for the first press\nfunction setRandomColor() {\n    if (Math.randomBoolean()) {\n        setRed()\n    } else {\n        setBlue()\n    }\n}\n\n// Flashing NeoPixels for the last 10 seconds\nfunction flashNeoPixels() {\n    flashingActive = true\n    for (let i = 0; i < 20; i++) {\n        if ("],[1,"rainbowChase())\n    } else if (receivedString == \"start\" && countdownTime > 0 && "],[0,"!cou"]],"start1":1389,"start2":1389,"length1":507,"length2":89},{"diffs":[[0,"Active) "],[-1,"return"],[1,"{"],[0,"\n       "]],"start1":1484,"start2":1484,"length1":22,"length2":17},{"diffs":[[0,"    "],[-1,"np.showColor(lastColor)\n        basic.pause(250)\n        np.clear()\n        np.show()\n        basic.pause(250)\n    }\n    flashingActive = false\n    if (countdownActive) {\n        endC"],[1,"control.inBackground(() => startCountdown(c"],[0,"ountdown"],[-1,"("],[1,"Time)"],[0,")\n  "]],"start1":1498,"start2":1498,"length1":200,"length2":64},{"diffs":[[0," }\n}"],[1,")"],[0,"\n\n// "],[-1,"Countdown Timer Function\nfunction startCountdown(seconds: number) {\n    countdownActive = true\n    control.runInBackground(() => runSnakePattern(seconds + 14))\n    for (let i = seconds; i > 0; i--) {\n        if (i == 10) {\n            control.inBackground(() => flashNeoPixels())\n        }\n        basic.pause(1000)\n    }\n    if (countdownActive) {\n        endCountdown()\n    }\n}\n\n// Snake pattern for LED grid\nfunction displaySnake(position: number) {\n    let x = position % 5\n    let y = Math.floor(position / 5)\n    basic.clearScreen()\n    if (y % 2 == 0) {\n        led.plot(x, y)\n    } else {\n        led.plot(4 - x, y)\n    }\n}\n\n// Run Snake Pattern\nfunction runSnakePattern(duration: number) {\n    let position = 0\n    for (let i = 0; i < duration * 20; i++) {\n        if (!countdownActive) break\n        displaySnake(position)\n        position = (position + 1) % 25\n        basic.pause(50"],[1,"Adjust brightness based on joystick input\nradio.onReceivedValue(function (name, value) {\n    if (name == \"brightness\") {\n        brightnessLevel = Math.map(value, 10, 100, 25, 255) // Scale brightness from 10% to 100%\n        applyBrightness("],[0,")\n  "]],"start1":1563,"start2":1563,"length1":907,"length2":256},{"diffs":[[0," }\n}"],[1,")"],[0,"\n\n// "],[-1,"End Countdown\nfunction endCountdown() {\n    countdownActive = false\n    flashingActive = false\n    gameOver = true\n    np.clear()\n    np.show()\n    displayX()\n    control.inBackground(() => playGameOverSound())\n    basic.pause(4000)\n    np.setBrightness(64)\n    np.showColor(lastColor)\n    np.show()\n}\n\n// Display \"X\" on LED grid\nfunction displayX() {\n    basic.clearScreen()\n"],[1,"Rainbow chasing effect\nfunction rainbowChase() {\n    while (isRainbowMode) {\n    "],[0,"    "]],"start1":1820,"start2":1820,"length1":389,"length2":95},{"diffs":[[0,"let "],[-1,"i"],[1,"j"],[0," = 0; "],[-1,"i < 5; i"],[1,"j < 16; j"],[0,"++) "]],"start1":1920,"start2":1920,"length1":23,"length2":24},{"diffs":[[0,"    "],[-1,"led.plot(i, i)\n        led.plot(i, 4 - i)\n    }\n}\n\n// Laser sound effect for Red mode\nfunction playLaserSound() {\n    for (let freq = 1000; freq > 200; freq -= 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth))\n    }\n}\n\n// Inverse laser sound effect for Blue mode\nfunction playInverseLaserSound() {\n    for (let freq = 200; freq <= 1000; freq += 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth))\n    }\n}\n\n// Game Over Buzzer\nfunction playGameOverSound() {\n"],[1,"    if (!isRainbowMode) return // Exit if mode changes\n            np.clear()\n        "],[0,"    "]],"start1":1950,"start2":1950,"length1":505,"length2":94},{"diffs":[[0," 0; i < "],[-1,"3"],[1,"16"],[0,"; i++) {"]],"start1":2056,"start2":2056,"length1":17,"length2":18},{"diffs":[[0,"    "],[-1,"music.playTone(330, music.beat(BeatFraction.Quarter))\n        music.playTone(440, music.beat(BeatFraction.Quarter))\n        music.playTone(554, music.beat(BeatFraction.Quarter))\n        music.playTone(440, music.beat(BeatFraction.Half))\n        basic.pause(200)\n    }\n    music.playTone(220, music.beat(BeatFraction.Double))\n}\n\n// Handle Radio Messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"purple\") {\n        activatePurpleMode()\n    } else if (receivedString == \"reset\") {\n        isRainbowMode = true\n        gameOver = false\n        flashingActive = false\n        countdownActive = false\n        control.inBackground(() => rainbowChase())\n    } else if (receivedString == \"start\" && countdownTime > 0 && !countdownActive) {\n        control.inBackground(() => startCountdown(countdownTime))\n    } else if (receivedString == \"one\") {\n        countdownTime = 60\n        basic.showNumber(1)\n    } else if (receivedString == \"two\") {\n        countdownTime = 120\n        basic.showNumber(2)\n    }\n})\n\n// Monitor Tilt Switch\nbasic.forever(function () {\n    if (gameOver) return\n    if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        if (purpleModeActi"],[1,"        let hue = ((i + j) * 360) / 16 // Calculate hue for each LED\n                np.setPixelColor(i, neopixel.hsl(hue, 100, 50))\n            }\n            np.setBrightness(brightnessLe"],[0,"ve"],[1,"l"],[0,") "],[-1,"{\n            purpleModeActive = false\n            toggleColorFromPurple()\n        } else if (isRainbowMode) {\n            setRandomColor()\n            isRainbowMode = false\n        } else {"],[1,"// Apply current brightness"],[0,"\n   "]],"start1":2079,"start2":2079,"length1":1394,"length2":228},{"diffs":[[0,"    "],[-1,"toggleColor"],[1,"np.show"],[0,"()\n "]],"start1":2312,"start2":2312,"length1":19,"length2":15},{"diffs":[[0,"\n       "],[-1," }\n"],[0,"     "],[-1,"   "],[0,"basic.pa"]],"start1":2325,"start2":2325,"length1":27,"length2":21},{"diffs":[[0,"use("],[-1,"500)\n        while (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            // Wait for release\n        }\n    }\n})\n\n// Start Rainbow Mode\ncontrol.inBackground(() => rainbowChase())\nbasic.showIcon(IconNames.Heart)"],[1,"100) // Adjust speed of the rainbow\n        }\n    }\n}"],[0,"\n"]],"start1":2346,"start2":2346,"length1":216,"length2":58}]}]},{"timestamp":1732657961722,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"or ="],[-1," isRedMode ?"],[0," neo"]],"start1":578,"start2":578,"length1":20,"length2":8},{"diffs":[[0,"ed) "],[-1,": neopixel.colors(NeoPixelColors.Blue) // Default random color"],[1,"// Default to Red initially"],[0,"\nlet"]],"start1":615,"start2":615,"length1":70,"length2":35}]}]},{"timestamp":1732658480619,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"e group\n"],[1,"let brightnessLevel = 255 // Start at maximum brightness (100%)\n"],[0,"let isRa"]],"start1":55,"start2":55,"length1":16,"length2":80},{"diffs":[[0,"tup "],[-1,"pull-up resistor for the tilt switch on P2\npins.setPull(DigitalPin.P2, PinPullMode.PullUp)\n\n// Redirect audio to external speaker on P1\nmusic.setBuiltInSpeakerEnabled(false) // Disable internal speaker\npins.analogSetPitchPin(AnalogPin.P1) // Route sound to P1\n"],[1,"NeoPixel ring\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB)\n\n// Apply brightness and update the NeoPixel ring"],[0,"\nfun"]],"start1":787,"start2":787,"length1":268,"length2":133},{"diffs":[[0,"ess("],[-1,"brightness: number"],[0,") {\n"]],"start1":938,"start2":938,"length1":26,"length2":8},{"diffs":[[0,"ness"],[-1,") // Apply brightness"],[1,"Level)"],[0,"\n   "]],"start1":973,"start2":973,"length1":29,"length2":14},{"diffs":[[0,"lor)"],[-1," // Set to the last selected color"],[0,"\n   "]],"start1":1007,"start2":1007,"length1":42,"length2":8},{"diffs":[[0,")\n            }\n"],[1,"            np.setBrightness(brightnessLevel) // Apply current brightness\n"],[0,"            np.s"]],"start1":1416,"start2":1416,"length1":32,"length2":106},{"diffs":[[0,"applyBrightness("],[-1,"255"],[0,")\n    control.in"]],"start1":1779,"start2":1779,"length1":35,"length2":32},{"diffs":[[0,"ghtness("],[-1,"255"],[0,")\n    co"]],"start1":2041,"start2":2041,"length1":19,"length2":16},{"diffs":[[0,")\n}\n\n// "],[-1,"Activat"],[1,"Handl"],[0,"e Purple"]],"start1":2105,"start2":2105,"length1":23,"length2":21},{"diffs":[[0,"ple Mode"],[1," activation"],[0,"\nfunctio"]],"start1":2123,"start2":2123,"length1":16,"length2":27},{"diffs":[[0,"true"],[-1," // Activate Purple Mode"],[0,"\n   "]],"start1":2198,"start2":2198,"length1":32,"length2":8},{"diffs":[[0,"lor)"],[-1," // Set NeoPixels to violet"],[0,"\n   "]],"start1":2228,"start2":2228,"length1":35,"length2":8},{"diffs":[[0,"// Stay "],[1,"in "],[0,"purple "],[1,"mode "],[0,"for 10 s"]],"start1":2270,"start2":2270,"length1":23,"length2":31},{"diffs":[[0,"alse"],[-1," // Exit Purple Mode after timeout\n    np.showColor(lastColor) // Revert to last color\n    np.show()\n}\n\n// Handle color change and play corresponding laser sound"],[1,"\n    applyBrightness() // Revert to last color\n}\n\n// Handle toggle from Purple Mode"],[0,"\nfun"]],"start1":2332,"start2":2332,"length1":169,"length2":91},{"diffs":[[0,"olor"],[-1," // Update the last color"],[0,"\n   "]],"start1":2592,"start2":2592,"length1":33,"length2":8},{"diffs":[[0,"lor)"],[-1," // Set new color"],[0,"\n   "]],"start1":2619,"start2":2619,"length1":25,"length2":8},{"diffs":[[0,"ue\")"],[-1," // Broadcast color to other receivers\n    np.show()\n    // Play appropriate laser sound"],[1,"\n    np.show()"],[0,"\n   "]],"start1":2707,"start2":2707,"length1":96,"length2":22},{"diffs":[[0,"true"],[-1," // Indicate flashing is active"],[0,"\n   "]],"start1":3334,"start2":3334,"length1":39,"length2":8},{"diffs":[[0,"+) {"],[-1," // Flash for 10 seconds (20 cycles at 250ms each)\n        if (!countdownActive) return // Stop if countdown ends prematurely"],[1,"\n        if (!countdownActive) return"],[0,"\n   "]],"start1":3369,"start2":3369,"length1":133,"length2":45},{"diffs":[[0,"lor)"],[-1," // Turn on NeoPixels"],[0,"\n   "]],"start1":3438,"start2":3438,"length1":29,"length2":8},{"diffs":[[0,".clear()"],[-1," // Turn off NeoPixels"],[0,"\n       "]],"start1":3478,"start2":3478,"length1":38,"length2":16},{"diffs":[[0,"alse"],[-1," // Indicate flashing is complete"],[0,"\n   "]],"start1":3558,"start2":3558,"length1":41,"length2":8},{"diffs":[[0,"wn()"],[-1," // Immediately transition to the end countdown"],[0,"\n   "]],"start1":3608,"start2":3608,"length1":55,"length2":8},{"diffs":[[0,"14))"],[-1," // Run snake pattern for countdown + flashing + off"],[0,"\n   "]],"start1":3780,"start2":3780,"length1":60,"length2":8},{"diffs":[[0,"s())"],[-1," // Flash in the last 10 seconds"],[0,"\n   "]],"start1":3900,"start2":3900,"length1":40,"length2":8},{"diffs":[[0,"000)"],[-1," // 1-second delay\n    }\n    // Ensure the end sequence triggers after countdown"],[1,"\n    }"],[0,"\n   "]],"start1":3936,"start2":3936,"length1":88,"length2":14},{"diffs":[[0,"\n\n//"],[-1," Run"],[0," Snake "],[-1,"P"],[1,"p"],[0,"attern"],[-1,"\nfunction runSnakePattern(duration: number) {\n    let position = 0 // LED grid position\n    for ("],[1," for LED grid\nfunction displaySnake(position: number) {\n    let x = position % 5\n    "],[0,"let "],[-1,"i = 0; i < duration * 20; i++) { // Ensure it runs for the extended duration\n        if (!countdownActive) break // Stop if the countdown is no longer active\n        displaySnake(position)\n        position = (position + 1) % 25\n        basic.pause(50) // Speed up snake pattern"],[1,"y = Math.floor(position / 5)\n    basic.clearScreen()\n    if (y % 2 == 0) {\n        led.plot(x, y)\n    } else {\n        led.plot(4 - x, y)"],[0,"\n   "]],"start1":4004,"start2":4004,"length1":404,"length2":248},{"diffs":[[0,"\n\n//"],[1," Run"],[0," Snake "],[-1,"p"],[1,"P"],[0,"attern"],[-1," for LED grid\nfunction displaySnake(posi"],[1,"\nfunction runSnakePattern(dura"],[0,"tion"]],"start1":4256,"start2":4256,"length1":62,"length2":56},{"diffs":[[0,"umber) {\n    let"],[-1," x ="],[0," position % 5\n  "]],"start1":4315,"start2":4315,"length1":36,"length2":32},{"diffs":[[0,"ion "],[-1,"% 5"],[1,"= 0"],[0,"\n    "],[-1,"let y = Math.floor(position / 5)\n    basic.clearScreen()\n    if (y % 2 == 0) {\n        // Even rows light up left-to-right\n        led.plot(x, y)\n    } else {\n        // Odd rows light up right-to-left\n        led.plot(4 - x, y)\n    }\n}\n\n// End Countdown: Turn off LEDs, display \"X\", and play buzzer"],[1,"for (let i = 0; i < duration * 20; i++) {\n        if (!countdownActive) break\n        displaySnake(position)\n        position = (position + 1) % 25\n        basic.pause(50)\n    }\n}\n\n// End Countdown"],[0,"\nfun"]],"start1":4337,"start2":4337,"length1":315,"length2":213},{"diffs":[[0,"alse"],[-1," // Stop the snake pattern"],[0,"\n   "]],"start1":4596,"start2":4596,"length1":34,"length2":8},{"diffs":[[0,"alse"],[-1," // Ensure flashing stops\n    gameOver = true // Game is over, deactivate microswitch immediately\n    np.clear()\n    np.show() // Turn off NeoPixels\n    displayX() // Show \"X\" on the LED grid"],[1,"\n    gameOver = true\n    np.clear()\n    np.show()\n    displayX()"],[0,"\n   "]],"start1":4623,"start2":4623,"length1":199,"length2":72},{"diffs":[[0,"d())"],[-1," // Play buzzer sound"],[0,"\n   "]],"start1":4739,"start2":4739,"length1":29,"length2":8},{"diffs":[[0,"000)"],[-1," // Wait for buzzer to complete\n    np.setBrightness(64) // Set NeoPixels to low brightness (25%)\n    np.showColor(lastColor) // Restore NeoPixels to last color"],[1,"\n    np.setBrightness(64)\n    np.showColor(lastColor)"],[0,"\n   "]],"start1":4761,"start2":4761,"length1":168,"length2":61},{"diffs":[[0," \"X\" on "],[-1,"the "],[0,"LED grid"]],"start1":4846,"start2":4846,"length1":20,"length2":16},{"diffs":[[0,", i)"],[-1," // Top-left to bottom-right diagonal\n        led.plot(i, 4 - i) // Top-right to bottom-left diagonal"],[1,"\n        led.plot(i, 4 - i)"],[0,"\n   "]],"start1":4961,"start2":4961,"length1":109,"length2":35},{"diffs":[[0,"th))"],[-1," // Rapid descending tones"],[0,"\n   "]],"start1":5177,"start2":5177,"length1":34,"length2":8},{"diffs":[[0,"th))"],[-1," // Rapid ascending tones"],[0,"\n   "]],"start1":5383,"start2":5383,"length1":33,"length2":8},{"diffs":[[0,"\n// "],[-1,"Play game-o"],[1,"Game O"],[0,"ver "],[-1,"dramatic buzzer sound"],[1,"Buzzer"],[0,"\nfun"]],"start1":5396,"start2":5396,"length1":44,"length2":24},{"diffs":[[0,"er))"],[-1," // Low E"],[0,"\n   "]],"start1":5539,"start2":5539,"length1":17,"length2":8},{"diffs":[[0,"uarter))"],[-1," // Middle A"],[0,"\n       "]],"start1":5597,"start2":5597,"length1":28,"length2":16},{"diffs":[[0,"er))"],[-1," // High C#"],[0,"\n   "]],"start1":5663,"start2":5663,"length1":19,"length2":8},{"diffs":[[0,"lf))"],[-1,"    // Middle A held longer"],[0,"\n   "]],"start1":5722,"start2":5722,"length1":35,"length2":8},{"diffs":[[0,"le))"],[-1," // Deep final tone (Low A)\n}\n\n// Initiate random purple mode periodically\nfunction initiateRandomPurple() {\n    while (true) {\n        if (!gameOver && countdownActive) {\n            basic.pause(Math.randomRange(15000, 30000)) // Random delay between 15-30 seconds\n            activatePurpleMode()\n        } else {\n            basic.pause(1000) // Check periodically if game is active\n        }\n    }\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"purple\") {\n        activatePurpleMode() // Activate Purple Mode when signal is received\n    } else if (receivedString == \"red\") {\n        lastColor = neopixel.colors(NeoPixelColors.Red)\n        np.showColor(lastColor)\n    } else if (receivedString == \"blue\") {\n        lastColor = neopixel.colors(NeoPixelColors.Blue)\n        np.showColor(lastColor"],[1,"\n}\n\n// Handle Radio Messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"purple\") {\n        activatePurpleMode("],[0,")\n  "]],"start1":5810,"start2":5810,"length1":873,"length2":153},{"diffs":[[0,") {\n"],[-1,"        basic.showString(\"R\")\n"],[0,"    "]],"start1":6001,"start2":6001,"length1":38,"length2":8},{"diffs":[[0,"lse\n"],[-1,"        countdownActive = false\n"],[0,"    "]],"start1":6055,"start2":6055,"length1":40,"length2":8},{"diffs":[[0,"lse\n        "],[-1,"purpleMode"],[1,"countdown"],[0,"Active = fal"]],"start1":6086,"start2":6086,"length1":34,"length2":33},{"diffs":[[0,") {\n"],[-1,"        basic.showString(\"S\")\n"],[0,"    "]],"start1":6254,"start2":6254,"length1":38,"length2":8},{"diffs":[[0,"(2)\n"],[-1,"    } else if (receivedString == \"three\") {\n        countdownTime = 180\n        basic.showNumber(3)\n    } else if (receivedString == \"four\") {\n        countdownTime = 240\n        basic.showNumber(4)\n"],[0,"    "]],"start1":6515,"start2":6515,"length1":207,"length2":8},{"diffs":[[0,"tor "],[-1,"the t"],[1,"T"],[0,"ilt "],[-1,"s"],[1,"S"],[0,"witc"]],"start1":6536,"start2":6536,"length1":18,"length2":14},{"diffs":[[0,"turn"],[-1," // Immediately exit if the game is over"],[0,"\n   "]],"start1":6600,"start2":6600,"length1":48,"length2":8},{"diffs":[[0,"alse"],[-1," // Disable Purple Mode"],[0,"\n   "]],"start1":6720,"start2":6720,"length1":31,"length2":8},{"diffs":[[0,"le()"],[-1," // Handle Purple Mode toggle"],[0,"\n   "]],"start1":6756,"start2":6756,"length1":37,"length2":8},{"diffs":[[0,"or()"],[-1," // First press: Random Red or Blue"],[0,"\n   "]],"start1":6821,"start2":6821,"length1":43,"length2":8},{"diffs":[[0,"alse"],[-1," // Exit rainbow mode"],[0,"\n   "]],"start1":6855,"start2":6855,"length1":29,"length2":8},{"diffs":[[0,"or()"],[-1," // Subsequent presses: Toggle Red and Blue"],[0,"\n   "]],"start1":6898,"start2":6898,"length1":51,"length2":8},{"diffs":[[0,"500)"],[-1," // Debounce delay"],[0,"\n   "]],"start1":6933,"start2":6933,"length1":26,"length2":8},{"diffs":[[0,"ait for "],[-1,"switch "],[0,"release\n"]],"start1":7012,"start2":7012,"length1":23,"length2":16},{"diffs":[[0,"art "],[-1,"the r"],[1,"R"],[0,"ainbow "],[-1,"mode on startup\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB) // 16-LED ring\ncontrol.inBackground(() => rainbowChase())\ncontrol.inBackground(() => initiateRandomPurple()) // Periodically activate Purple Mode"],[1,"Mode\ncontrol.inBackground(() => rainbowChase())"],[0,"\nbas"]],"start1":7053,"start2":7053,"length1":243,"length2":63},{"diffs":[[0,"art)"],[-1," // Display heart on startup"],[0,"\n"]],"start1":7140,"start2":7140,"length1":33,"length2":5}]}]},{"timestamp":1732658898490,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let selectedMinutes = 0\" numlines=\"1\" declaredvars=\"selectedMinutes\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Tracks the currently selected minutes</comment><next><block type=\"radio_set_group\"><comment pinned=\"false\" h=\"80\" w=\"160\">Ensure both micro:bits use the same group</comment><value name=\"ID\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">5</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Enable pull-up resistors for side buttons</comment><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P12</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P13</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P14</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P15</field></shadow></value><next><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Happy</field><comment pinned=\"false\" h=\"80\" w=\"160\">Display happy face on startup</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"function handleButton(pin: DigitalPin, minutes: number, label: string) {\" line1=\"    if (pins.digitalReadPin(pin) == 0) {\" line2=\"        selectedMinutes = minutes // Set minutes\" line3=\"        displayCharacter(label) // Display the label\" line4=\"        radio.sendString(label.toLowerCase()) // Send the corresponding string\" line5=\"        serial.writeLine(&quot;Sent: &quot; + label.toLowerCase()) // Log sent string\" line6=\"        vibrate() // Trigger vibration\" line7=\"        basic.pause(300) // Debounce delay\" line8=\"        while (pins.digitalReadPin(pin) == 0) {\" line9=\"            // Wait for button release\" line10=\"        }\" line11=\"    }\" line12=\"}\" numlines=\"13\"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_forever\" x=\"1574\" y=\"-28\"><comment pinned=\"false\" h=\"80\" w=\"160\">Continuously monitor side buttons for state changes</comment><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P12, 4, &quot;4&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button C</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P15, 2, &quot;2&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button F</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P14, 3, &quot;3&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button E</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P13, 1, &quot;1&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button D</comment></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"778\" y=\"124\"><field name=\"NAME\">Button.A</field><comment pinned=\"false\" h=\"80\" w=\"160\">Monitor Button A for \"Reset\"</comment><statement name=\"HANDLER\"><block type=\"function_call\"><mutation name=\"displayCharacter\" functionid=\"vZwQ+?gzH[w/|v+mnS-b\"><arg name=\"char\" id=\"69shrb8skgim7wqowxq6r\" type=\"string\"></arg></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Display \"R\" on the LED grid</comment><value name=\"69shrb8skgim7wqowxq6r\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><next><block type=\"radio_datagram_send_string\"><comment pinned=\"false\" h=\"80\" w=\"160\">Send \"Reset\" string</comment><value name=\"msg\"><shadow type=\"text\"><field name=\"TEXT\">Reset</field></shadow></value><next><block type=\"serial_writeline\"><comment pinned=\"false\" h=\"80\" w=\"160\">Log sent string</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Sent: reset</field></shadow></value><next><block type=\"function_call\"><mutation name=\"vibrate\" functionid=\"`T3;.,J,yR:!ArB(JNYn\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Trigger vibration</comment></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"1285\" y=\"270\"><field name=\"NAME\">Button.B</field><comment pinned=\"false\" h=\"80\" w=\"160\">Monitor Button B for \"Start\"</comment><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"II^y%5MArzV{E=2*)W],\">selectedMinutes</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"function_call\"><mutation name=\"displayCharacter\" functionid=\"vZwQ+?gzH[w/|v+mnS-b\"><arg name=\"char\" id=\"69shrb8skgim7wqowxq6r\" type=\"string\"></arg></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Display \"S\" on the LED grid</comment><value name=\"69shrb8skgim7wqowxq6r\"><shadow type=\"text\"><field name=\"TEXT\">S</field></shadow></value><next><block type=\"radio_datagram_send_string\"><comment pinned=\"false\" h=\"80\" w=\"160\">Send \"Start\" string</comment><value name=\"msg\"><shadow type=\"text\"><field name=\"TEXT\">Start</field></shadow></value><next><block type=\"serial_writeline\"><comment pinned=\"false\" h=\"80\" w=\"160\">Log sent string</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Sent: start</field></shadow></value><next><block type=\"function_call\"><mutation name=\"vibrate\" functionid=\"`T3;.,J,yR:!ArB(JNYn\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Trigger vibration</comment></block></next></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"393\" y=\"818\"><mutation name=\"displayCharacter\" functionid=\"vZwQ+?gzH[w/|v+mnS-b\"><arg name=\"char\" id=\"69shrb8skgim7wqowxq6r\" type=\"string\"></arg></mutation><field name=\"function_name\">displayCharacter</field><comment pinned=\"false\" h=\"80\" w=\"160\">Function to display a character on the LED grid</comment><value name=\"69shrb8skgim7wqowxq6r\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">char</field></block></value><statement name=\"STACK\"><block type=\"device_clear_display\"><next><block type=\"device_print_message\"><comment pinned=\"false\" h=\"80\" w=\"160\">Show the character</comment><value name=\"text\"><block type=\"argument_reporter_string\"><field name=\"VALUE\">char</field></block></value></block></next></block></statement></block><block type=\"input_logo_event\" x=\"-16\" y=\"983\"><field name=\"action\">TouchButtonEvent.Pressed</field><comment pinned=\"false\" h=\"80\" w=\"160\">Display happy face on reset or restart</comment><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Happy</field></block></statement></block><block type=\"function_definition\" x=\"657\" y=\"983\"><mutation name=\"vibrate\" functionid=\"`T3;.,J,yR:!ArB(JNYn\"></mutation><field name=\"function_name\">vibrate</field><comment pinned=\"false\" h=\"80\" w=\"160\">Function to activate vibration motor using joystickbit extension</comment><statement name=\"STACK\"><block type=\"Vibration_Motor\"><comment pinned=\"false\" h=\"80\" w=\"160\">Activate vibration motor for 150ms</comment><value name=\"time\"><shadow type=\"math_number\"><field name=\"NUM\">150</field></shadow></value></block></statement></block><"],[0,"/xml>"]],"start1":133,"start2":133,"length1":13,"length2":8192}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":374,"start2":374,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1732303387797,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Robot Topia Controller Code\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1732483334152,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"II^y%5MArzV{E=2*)W],\">selectedMinutes</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let selectedMinutes = 0\" numlines=\"1\" declaredvars=\"selectedMinutes\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Tracks the currently selected minutes</comment><next><block type=\"radio_set_group\"><comment pinned=\"false\" h=\"80\" w=\"160\">Ensure both micro:bits use the same group</comment><value name=\"ID\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">5</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Enable pull-up resistors for side buttons</comment><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P12</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P13</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P14</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P15</field></shadow></value><next><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Happy</field><comment pinned=\"false\" h=\"80\" w=\"160\">Display happy face on startup</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"function handleButton(pin: DigitalPin, minutes: number, label: string) {\" line1=\"    if (pins.digitalReadPin(pin) == 0) {\" line2=\"        selectedMinutes = minutes // Set minutes\" line3=\"        displayCharacter(label) // Display the label\" line4=\"        radio.sendString(label.toLowerCase()) // Send the corresponding string\" line5=\"        serial.writeLine(&quot;Sent: &quot; + label.toLowerCase()) // Log sent string\" line6=\"        vibrate() // Trigger vibration\" line7=\"        basic.pause(300) // Debounce delay\" line8=\"        while (pins.digitalReadPin(pin) == 0) {\" line9=\"            // Wait for button release\" line10=\"        }\" line11=\"    }\" line12=\"}\" numlines=\"13\"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_forever\" x=\"1574\" y=\"-28\"><comment pinned=\"false\" h=\"80\" w=\"160\">Continuously monitor side buttons for state changes</comment><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P12, 4, &quot;4&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button C</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P15, 2, &quot;2&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button F</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P14, 3, &quot;3&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button E</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P13, 1, &quot;1&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button D</comment></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"778\" y=\"124\"><field name=\"NAME\">Button.A</field><comment pinned=\"false\" h=\"80\" w=\"160\">Monitor Button A for \"Reset\"</comment><statement name=\"HANDLER\"><block type=\"function_call\"><mutation name=\"displayCharacter\" functionid=\"vZwQ+?gzH[w/|v+mnS-b\"><arg name=\"char\" id=\"69shrb8skgim7wqowxq6r\" type=\"string\"></arg></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Display \"R\" on the LED grid</comment><value name=\"69shrb8skgim7wqowxq6r\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><next><block type=\"radio_datagram_send_string\"><comment pinned=\"false\" h=\"80\" w=\"160\">Send \"Reset\" string</comment><value name=\"msg\"><shadow type=\"text\"><field name=\"TEXT\">Reset</field></shadow></value><next><block type=\"serial_writeline\"><comment pinned=\"false\" h=\"80\" w=\"160\">Log sent string</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Sent: reset</field></shadow></value><next><block type=\"function_call\"><mutation name=\"vibrate\" functionid=\"`T3;.,J,yR:!ArB(JNYn\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Trigger vibration</comment></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"1285\" y=\"270\"><field name=\"NAME\">Button.B</field><comment pinned=\"false\" h=\"80\" w=\"160\">Monitor Button B for \"Start\"</comment><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"II^y%5MArzV{E=2*)W],\">selectedMinutes</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"function_call\"><mutation name=\"displayCharacter\" functionid=\"vZwQ+?gzH[w/|v+mnS-b\"><arg name=\"char\" id=\"69shrb8skgim7wqowxq6r\" type=\"string\"></arg></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Display \"S\" on the LED grid</comment><value name=\"69shrb8skgim7wqowxq6r\"><shadow type=\"text\"><field name=\"TEXT\">S</field></shadow></value><next><block type=\"radio_datagram_send_string\"><comment pinned=\"false\" h=\"80\" w=\"160\">Send \"Start\" string</comment><value name=\"msg\"><shadow type=\"text\"><field name=\"TEXT\">Start</field></shadow></value><next><block type=\"serial_writeline\"><comment pinned=\"false\" h=\"80\" w=\"160\">Log sent string</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Sent: start</field></shadow></value><next><block type=\"function_call\"><mutation name=\"vibrate\" functionid=\"`T3;.,J,yR:!ArB(JNYn\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Trigger vibration</comment></block></next></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"393\" y=\"818\"><mutation name=\"displayCharacter\" functionid=\"vZwQ+?gzH[w/|v+mnS-b\"><arg name=\"char\" id=\"69shrb8skgim7wqowxq6r\" type=\"string\"></arg></mutation><field name=\"function_name\">displayCharacter</field><comment pinned=\"false\" h=\"80\" w=\"160\">Function to display a character on the LED grid</comment><value name=\"69shrb8skgim7wqowxq6r\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">char</field></block></value><statement name=\"STACK\"><block type=\"device_clear_display\"><next><block type=\"device_print_message\"><comment pinned=\"false\" h=\"80\" w=\"160\">Show the character</comment><value name=\"text\"><block type=\"argument_reporter_string\"><field name=\"VALUE\">char</field></block></value></block></next></block></statement></block><block type=\"input_logo_event\" x=\"-16\" y=\"983\"><field name=\"action\">TouchButtonEvent.Pressed</field><comment pinned=\"false\" h=\"80\" w=\"160\">Display happy face on reset or restart</comment><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Happy</field></block></statement></block><block type=\"function_definition\" x=\"657\" y=\"983\"><mutation name=\"vibrate\" functionid=\"`T3;.,J,yR:!ArB(JNYn\"></mutation><field name=\"function_name\">vibrate</field><comment pinned=\"false\" h=\"80\" w=\"160\">Function to activate vibration motor using joystickbit extension</comment><statement name=\"STACK\"><block type=\"Vibration_Motor\"><comment pinned=\"false\" h=\"80\" w=\"160\">Activate vibration motor for 150ms</comment><value name=\"time\"><shadow type=\"math_number\"><field name=\"NUM\">150</field></shadow></value></block></statement></block></xml>","main.ts":"radio.setGroup(1) // Ensure both micro:bits use the same group\nlet isRainbowMode = true // Start with rainbow mode\nlet isRedMode = true // First button press sets to RED\nlet countdownTime = 0 // Tracks countdown time in seconds\nlet countdownActive = false // Tracks if countdown is active\nlet gameOver = false // Tracks if the game is over\nlet lastColor = neopixel.colors(NeoPixelColors.Red) // Default to Red\n\n// Setup pull-up resistor for the tilt switch on P2\npins.setPull(DigitalPin.P2, PinPullMode.PullUp)\n\n// Redirect audio to external speaker on P1\nmusic.setBuiltInSpeakerEnabled(false) // Disable internal speaker\npins.analogSetPitchPin(AnalogPin.P1) // Route sound to P1\n\n// Function to apply brightness and update the LEDs\nfunction applyBrightness(brightness: number) {\n    np.setBrightness(brightness) // Apply brightness\n    np.showColor(lastColor)\n    np.show()\n}\n\n// Rainbow chasing effect\nfunction rainbowChase() {\n    while (isRainbowMode) {\n        for (let j = 0; j < 16; j++) {\n            if (!isRainbowMode) return // Exit if mode changes\n            np.clear()\n            for (let i = 0; i < 16; i++) {\n                let hue = ((i + j) * 360) / 16 // Calculate hue for each LED\n                np.setPixelColor(i, neopixel.hsl(hue, 100, 50))\n            }\n            np.show()\n            basic.pause(100) // Adjust speed of the rainbow\n        }\n    }\n}\n\n// Function to set LED ring to solid red and play laser sound\nfunction setRed() {\n    isRainbowMode = false\n    isRedMode = true\n    lastColor = neopixel.colors(NeoPixelColors.Red)\n    applyBrightness(255)\n    playLaserSound()\n}\n\n// Function to set LED ring to solid blue and play inverse laser sound\nfunction setBlue() {\n    isRainbowMode = false\n    isRedMode = false\n    lastColor = neopixel.colors(NeoPixelColors.Blue)\n    applyBrightness(255)\n    playInverseLaserSound()\n}\n\n// Laser sound effect for Red mode\nfunction playLaserSound() {\n    for (let freq = 1000; freq > 200; freq -= 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid descending tones\n    }\n}\n\n// Inverse laser sound effect for Blue mode\nfunction playInverseLaserSound() {\n    for (let freq = 200; freq <= 1000; freq += 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid ascending tones\n    }\n}\n\n// Flashing NeoPixels for the last 10 seconds\nfunction flashNeoPixels() {\n    for (let i = 0; i < 20; i++) { // Flash for 10 seconds (20 cycles at 250ms each)\n        if (!countdownActive) return // Stop if countdown ends prematurely\n        np.showColor(lastColor) // Turn on NeoPixels\n        basic.pause(250)\n        np.clear() // Turn off NeoPixels\n        np.show()\n        basic.pause(250)\n    }\n    // Ensure the flashing stops and transitions to the end countdown\n    if (countdownActive) {\n        endCountdown()\n    }\n}\n\n// Countdown Timer Function\nfunction startCountdown(seconds: number) {\n    countdownActive = true\n    gameOver = false\n    control.runInBackground(() => runSnakePattern(seconds + 14)) // Run snake pattern for countdown + flashing + off\n    for (let i = seconds; i > 0; i--) {\n        if (i == 10) {\n            control.inBackground(() => flashNeoPixels()) // Flash in the last 10 seconds\n        }\n        basic.pause(1000) // 1-second delay\n    }\n    // Ensure the end sequence triggers after countdown\n    if (countdownActive) {\n        endCountdown()\n    }\n}\n\n// Run Snake Pattern\nfunction runSnakePattern(duration: number) {\n    let position = 0 // LED grid position\n    for (let i = 0; i < duration * 20; i++) { // Ensure it runs for the extended duration\n        if (!countdownActive) break // Stop if the countdown is no longer active\n        displaySnake(position)\n        position = (position + 1) % 25\n        basic.pause(50) // Speed up snake pattern\n    }\n}\n\n// Snake pattern for LED grid\nfunction displaySnake(position: number) {\n    let x = position % 5\n    let y = Math.floor(position / 5)\n    basic.clearScreen()\n    if (y % 2 == 0) {\n        // Even rows light up left-to-right\n        led.plot(x, y)\n    } else {\n        // Odd rows light up right-to-left\n        led.plot(4 - x, y)\n    }\n}\n\n// End Countdown: Turn off LEDs, display \"X\", and play buzzer\nfunction endCountdown() {\n    countdownActive = false // Stop the snake pattern\n    gameOver = true // Game is over, deactivate microswitch immediately\n    np.clear()\n    np.show()\n    basic.pause(4000) // Wait for 4 seconds (NeoPixels off)\n    displayX() // Show \"X\" on the LED grid\n    playGameOverSound() // Play buzzer sound\n    np.setBrightness(64) // Set NeoPixels to low brightness (25%)\n    np.showColor(lastColor)\n}\n\n// Display \"X\" on the LED grid\nfunction displayX() {\n    basic.clearScreen()\n    for (let i = 0; i < 5; i++) {\n        led.plot(i, i) // Top-left to bottom-right diagonal\n        led.plot(i, 4 - i) // Top-right to bottom-left diagonal\n    }\n}\n\n// Play game-over dramatic buzzer sound\nfunction playGameOverSound() {\n    for (let i = 0; i < 3; i++) {\n        music.playTone(330, music.beat(BeatFraction.Quarter)) // Low E\n        music.playTone(440, music.beat(BeatFraction.Quarter)) // Middle A\n        music.playTone(554, music.beat(BeatFraction.Quarter)) // High C#\n        music.playTone(440, music.beat(BeatFraction.Half))    // Middle A held longer\n        basic.pause(200)\n    }\n    music.playTone(220, music.beat(BeatFraction.Double)) // Deep final tone (Low A)\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"one\") {\n        countdownTime = 60\n        basic.showNumber(1)\n    } else if (receivedString == \"two\") {\n        countdownTime = 120\n        basic.showNumber(2)\n    } else if (receivedString == \"three\") {\n        countdownTime = 180\n        basic.showNumber(3)\n    } else if (receivedString == \"four\") {\n        countdownTime = 240\n        basic.showNumber(4)\n    } else if (receivedString == \"reset\") {\n        basic.showString(\"R\")\n        isRainbowMode = true\n        gameOver = false\n        countdownActive = false\n        control.inBackground(function () {\n            rainbowChase()\n        })\n    } else if (receivedString == \"start\" && countdownTime > 0 && !countdownActive) {\n        basic.showString(\"S\")\n        control.inBackground(function () {\n            startCountdown(countdownTime)\n        })\n    }\n})\n\n// Monitor the tilt switch and toggle between red and blue\nbasic.forever(function () {\n    if (gameOver || countdownActive) return // Immediately exit if the game is over or countdown is active\n    if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        if (isRainbowMode) {\n            setRed()\n        } else {\n            if (isRedMode) {\n                setBlue()\n            } else {\n                setRed()\n            }\n        }\n        basic.pause(500) // Debounce delay\n        while (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            // Wait for switch release\n        }\n    }\n})\n\n// Start the rainbow mode on startup\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB) // 16-LED ring\ncontrol.inBackground(function () {\n    rainbowChase()\n})\nbasic.showIcon(IconNames.Heart) // Display heart on startup\n","README.md":"","pxt.json":"{\n    \"name\": \"Robotopia Controller\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"joystickbit\": \"github:tinkertanker/pxt-joystickbit#v1.0.4\",\n        \"neopixel\": \"github:microsoft/pxt-neopixel#v0.7.6\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1732556126294,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"II^y%5MArzV{E=2*)W],\">selectedMinutes</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let selectedMinutes = 0\" numlines=\"1\" declaredvars=\"selectedMinutes\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Tracks the currently selected minutes</comment><next><block type=\"radio_set_group\"><comment pinned=\"false\" h=\"80\" w=\"160\">Ensure both micro:bits use the same group</comment><value name=\"ID\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">5</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Enable pull-up resistors for side buttons</comment><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P12</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P13</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P14</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P15</field></shadow></value><next><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Happy</field><comment pinned=\"false\" h=\"80\" w=\"160\">Display happy face on startup</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"function handleButton(pin: DigitalPin, minutes: number, label: string) {\" line1=\"    if (pins.digitalReadPin(pin) == 0) {\" line2=\"        selectedMinutes = minutes // Set minutes\" line3=\"        displayCharacter(label) // Display the label\" line4=\"        radio.sendString(label.toLowerCase()) // Send the corresponding string\" line5=\"        serial.writeLine(&quot;Sent: &quot; + label.toLowerCase()) // Log sent string\" line6=\"        vibrate() // Trigger vibration\" line7=\"        basic.pause(300) // Debounce delay\" line8=\"        while (pins.digitalReadPin(pin) == 0) {\" line9=\"            // Wait for button release\" line10=\"        }\" line11=\"    }\" line12=\"}\" numlines=\"13\"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_forever\" x=\"1574\" y=\"-28\"><comment pinned=\"false\" h=\"80\" w=\"160\">Continuously monitor side buttons for state changes</comment><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P12, 4, &quot;4&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button C</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P15, 2, &quot;2&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button F</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P14, 3, &quot;3&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button E</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P13, 1, &quot;1&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button D</comment></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"778\" y=\"124\"><field name=\"NAME\">Button.A</field><comment pinned=\"false\" h=\"80\" w=\"160\">Monitor Button A for \"Reset\"</comment><statement name=\"HANDLER\"><block type=\"function_call\"><mutation name=\"displayCharacter\" functionid=\"vZwQ+?gzH[w/|v+mnS-b\"><arg name=\"char\" id=\"69shrb8skgim7wqowxq6r\" type=\"string\"></arg></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Display \"R\" on the LED grid</comment><value name=\"69shrb8skgim7wqowxq6r\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><next><block type=\"radio_datagram_send_string\"><comment pinned=\"false\" h=\"80\" w=\"160\">Send \"Reset\" string</comment><value name=\"msg\"><shadow type=\"text\"><field name=\"TEXT\">Reset</field></shadow></value><next><block type=\"serial_writeline\"><comment pinned=\"false\" h=\"80\" w=\"160\">Log sent string</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Sent: reset</field></shadow></value><next><block type=\"function_call\"><mutation name=\"vibrate\" functionid=\"`T3;.,J,yR:!ArB(JNYn\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Trigger vibration</comment></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"1285\" y=\"270\"><field name=\"NAME\">Button.B</field><comment pinned=\"false\" h=\"80\" w=\"160\">Monitor Button B for \"Start\"</comment><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"II^y%5MArzV{E=2*)W],\">selectedMinutes</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"function_call\"><mutation name=\"displayCharacter\" functionid=\"vZwQ+?gzH[w/|v+mnS-b\"><arg name=\"char\" id=\"69shrb8skgim7wqowxq6r\" type=\"string\"></arg></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Display \"S\" on the LED grid</comment><value name=\"69shrb8skgim7wqowxq6r\"><shadow type=\"text\"><field name=\"TEXT\">S</field></shadow></value><next><block type=\"radio_datagram_send_string\"><comment pinned=\"false\" h=\"80\" w=\"160\">Send \"Start\" string</comment><value name=\"msg\"><shadow type=\"text\"><field name=\"TEXT\">Start</field></shadow></value><next><block type=\"serial_writeline\"><comment pinned=\"false\" h=\"80\" w=\"160\">Log sent string</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Sent: start</field></shadow></value><next><block type=\"function_call\"><mutation name=\"vibrate\" functionid=\"`T3;.,J,yR:!ArB(JNYn\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Trigger vibration</comment></block></next></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"393\" y=\"818\"><mutation name=\"displayCharacter\" functionid=\"vZwQ+?gzH[w/|v+mnS-b\"><arg name=\"char\" id=\"69shrb8skgim7wqowxq6r\" type=\"string\"></arg></mutation><field name=\"function_name\">displayCharacter</field><comment pinned=\"false\" h=\"80\" w=\"160\">Function to display a character on the LED grid</comment><value name=\"69shrb8skgim7wqowxq6r\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">char</field></block></value><statement name=\"STACK\"><block type=\"device_clear_display\"><next><block type=\"device_print_message\"><comment pinned=\"false\" h=\"80\" w=\"160\">Show the character</comment><value name=\"text\"><block type=\"argument_reporter_string\"><field name=\"VALUE\">char</field></block></value></block></next></block></statement></block><block type=\"input_logo_event\" x=\"-16\" y=\"983\"><field name=\"action\">TouchButtonEvent.Pressed</field><comment pinned=\"false\" h=\"80\" w=\"160\">Display happy face on reset or restart</comment><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Happy</field></block></statement></block><block type=\"function_definition\" x=\"657\" y=\"983\"><mutation name=\"vibrate\" functionid=\"`T3;.,J,yR:!ArB(JNYn\"></mutation><field name=\"function_name\">vibrate</field><comment pinned=\"false\" h=\"80\" w=\"160\">Function to activate vibration motor using joystickbit extension</comment><statement name=\"STACK\"><block type=\"Vibration_Motor\"><comment pinned=\"false\" h=\"80\" w=\"160\">Activate vibration motor for 150ms</comment><value name=\"time\"><shadow type=\"math_number\"><field name=\"NUM\">150</field></shadow></value></block></statement></block></xml>","main.ts":"radio.setGroup(1) // Ensure both micro:bits use the same group\nlet isRainbowMode = true // Start with rainbow mode\nlet isRedMode = Math.randomBoolean() // Randomly choose Red or Blue for the first switch press\nlet countdownTime = 0 // Tracks countdown time in seconds\nlet countdownActive = false // Tracks if countdown is active\nlet flashingActive = false // Tracks if flashing is active\nlet gameOver = false // Tracks if the game is over\nlet purpleModeActive = false // Tracks if Purple Mode is active\nlet lastColor = isRedMode ? neopixel.colors(NeoPixelColors.Red) : neopixel.colors(NeoPixelColors.Blue) // Default random color\n\n// Setup pull-up resistor for the tilt switch on P2\npins.setPull(DigitalPin.P2, PinPullMode.PullUp)\n\n// Redirect audio to external speaker on P1\nmusic.setBuiltInSpeakerEnabled(false) // Disable internal speaker\npins.analogSetPitchPin(AnalogPin.P1) // Route sound to P1\n\nfunction applyBrightness(brightness: number) {\n    np.setBrightness(brightness) // Apply brightness\n    np.showColor(lastColor) // Set to the last selected color\n    np.show()\n}\n\n// Rainbow chasing effect\nfunction rainbowChase() {\n    while (isRainbowMode) {\n        for (let j = 0; j < 16; j++) {\n            if (!isRainbowMode) return // Exit if mode changes\n            np.clear()\n            for (let i = 0; i < 16; i++) {\n                let hue = ((i + j) * 360) / 16 // Calculate hue for each LED\n                np.setPixelColor(i, neopixel.hsl(hue, 100, 50))\n            }\n            np.show()\n            basic.pause(100) // Adjust speed of the rainbow\n        }\n    }\n}\n\nfunction setRandomColor() {\n    isRedMode = Math.randomBoolean() // Randomly set the initial mode\n    if (isRedMode) {\n        lastColor = neopixel.colors(NeoPixelColors.Red)\n        applyBrightness(255)\n        control.inBackground(() => playLaserSound())\n    } else {\n        lastColor = neopixel.colors(NeoPixelColors.Blue)\n        applyBrightness(255)\n        control.inBackground(() => playInverseLaserSound())\n    }\n}\n\nfunction toggleColor() {\n    isRedMode = !isRedMode // Alternate between Red and Blue\n    if (isRedMode) {\n        lastColor = neopixel.colors(NeoPixelColors.Red)\n        applyBrightness(255)\n        control.inBackground(() => playLaserSound())\n    } else {\n        lastColor = neopixel.colors(NeoPixelColors.Blue)\n        applyBrightness(255)\n        control.inBackground(() => playInverseLaserSound())\n    }\n}\n\nfunction activatePurpleMode() {\n    purpleModeActive = true // Activate Purple Mode\n    np.showColor(neopixel.colors(NeoPixelColors.Purple)) // Turn NeoPixels purple\n    np.show()\n    basic.pause(10000) // Stay purple for 10 seconds\n    purpleModeActive = false // Exit Purple Mode after timeout\n    np.showColor(lastColor) // Revert to last color\n    np.show()\n}\n\nfunction toggleColorFromPurple() {\n    let newColor = Math.randomBoolean() ? neopixel.colors(NeoPixelColors.Red) : neopixel.colors(NeoPixelColors.Blue)\n    lastColor = newColor // Update the last color\n    np.showColor(newColor) // Set new color\n    radio.sendString(newColor === neopixel.colors(NeoPixelColors.Red) ? \"red\" : \"blue\") // Broadcast color to other receivers\n    np.show()\n}\n\n// Flashing NeoPixels for the last 10 seconds\nfunction flashNeoPixels() {\n    flashingActive = true // Indicate flashing is active\n    for (let i = 0; i < 20; i++) { // Flash for 10 seconds (20 cycles at 250ms each)\n        if (!countdownActive) return // Stop if countdown ends prematurely\n        np.showColor(lastColor) // Turn on NeoPixels\n        basic.pause(250)\n        np.clear() // Turn off NeoPixels\n        np.show()\n        basic.pause(250)\n    }\n    flashingActive = false // Indicate flashing is complete\n    if (countdownActive) {\n        endCountdown() // Immediately transition to the end countdown\n    }\n}\n\n// Countdown Timer Function\nfunction startCountdown(seconds: number) {\n    countdownActive = true\n    control.runInBackground(() => runSnakePattern(seconds + 14)) // Run snake pattern for countdown + flashing + off\n    for (let i = seconds; i > 0; i--) {\n        if (i == 10) {\n            control.inBackground(() => flashNeoPixels()) // Flash in the last 10 seconds\n        }\n        basic.pause(1000) // 1-second delay\n    }\n    // Ensure the end sequence triggers after countdown\n    if (countdownActive) {\n        endCountdown()\n    }\n}\n\n// Run Snake Pattern\nfunction runSnakePattern(duration: number) {\n    let position = 0 // LED grid position\n    for (let i = 0; i < duration * 20; i++) { // Ensure it runs for the extended duration\n        if (!countdownActive) break // Stop if the countdown is no longer active\n        displaySnake(position)\n        position = (position + 1) % 25\n        basic.pause(50) // Speed up snake pattern\n    }\n}\n\n// Snake pattern for LED grid\nfunction displaySnake(position: number) {\n    let x = position % 5\n    let y = Math.floor(position / 5)\n    basic.clearScreen()\n    if (y % 2 == 0) {\n        // Even rows light up left-to-right\n        led.plot(x, y)\n    } else {\n        // Odd rows light up right-to-left\n        led.plot(4 - x, y)\n    }\n}\n\n// End Countdown: Turn off LEDs, display \"X\", and play buzzer\nfunction endCountdown() {\n    countdownActive = false // Stop the snake pattern\n    flashingActive = false // Ensure flashing stops\n    gameOver = true // Game is over, deactivate microswitch immediately\n    np.clear()\n    np.show() // Turn off NeoPixels\n    displayX() // Show \"X\" on the LED grid\n    control.inBackground(() => playGameOverSound()) // Play buzzer sound\n    basic.pause(4000) // Wait for buzzer to complete\n    np.setBrightness(64) // Set NeoPixels to low brightness (25%)\n    np.showColor(lastColor) // Restore NeoPixels to last color\n    np.show()\n}\n\n// Display \"X\" on the LED grid\nfunction displayX() {\n    basic.clearScreen()\n    for (let i = 0; i < 5; i++) {\n        led.plot(i, i) // Top-left to bottom-right diagonal\n        led.plot(i, 4 - i) // Top-right to bottom-left diagonal\n    }\n}\n\n// Periodically activate Purple Mode\nfunction initiateRandomPurple() {\n    while (true) {\n        basic.pause(Math.randomRange(20000, 60000)) // Wait 20-60 seconds\n        if (!countdownActive && !purpleModeActive && !gameOver) {\n            radio.sendString(\"purple\") // Broadcast Purple Mode signal\n            activatePurpleMode() // Trigger Purple Mode locally\n        }\n    }\n}\n\n// Laser sound effect for Red mode\nfunction playLaserSound() {\n    for (let freq = 1000; freq > 200; freq -= 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid descending tones\n    }\n}\n\n// Inverse laser sound effect for Blue mode\nfunction playInverseLaserSound() {\n    for (let freq = 200; freq <= 1000; freq += 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid ascending tones\n    }\n}\n\n// Play game-over dramatic buzzer sound\nfunction playGameOverSound() {\n    for (let i = 0; i < 3; i++) {\n        music.playTone(330, music.beat(BeatFraction.Quarter)) // Low E\n        music.playTone(440, music.beat(BeatFraction.Quarter)) // Middle A\n        music.playTone(554, music.beat(BeatFraction.Quarter)) // High C#\n        music.playTone(440, music.beat(BeatFraction.Half))    // Middle A held longer\n        basic.pause(200)\n    }\n    music.playTone(220, music.beat(BeatFraction.Double)) // Deep final tone (Low A)\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"purple\") {\n        activatePurpleMode() // Activate Purple Mode when signal is received\n    } else if (receivedString == \"red\") {\n        lastColor = neopixel.colors(NeoPixelColors.Red)\n        np.showColor(lastColor)\n    } else if (receivedString == \"blue\") {\n        lastColor = neopixel.colors(NeoPixelColors.Blue)\n        np.showColor(lastColor)\n    } else if (receivedString == \"reset\") {\n        basic.showString(\"R\")\n        isRainbowMode = true\n        gameOver = false\n        countdownActive = false\n        flashingActive = false\n        purpleModeActive = false\n        control.inBackground(function () {\n            rainbowChase()\n        })\n    } else if (receivedString == \"start\" && countdownTime > 0 && !countdownActive) {\n        basic.showString(\"S\")\n        control.inBackground(function () {\n            startCountdown(countdownTime)\n        })\n    } else if (receivedString == \"one\") {\n        countdownTime = 60\n        basic.showNumber(1)\n    } else if (receivedString == \"two\") {\n        countdownTime = 120\n        basic.showNumber(2)\n    } else if (receivedString == \"three\") {\n        countdownTime = 180\n        basic.showNumber(3)\n    } else if (receivedString == \"four\") {\n        countdownTime = 240\n        basic.showNumber(4)\n    }\n})\n\n// Monitor the tilt switch\nbasic.forever(function () {\n    if (gameOver) return // Immediately exit if the game is over\n    if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        if (purpleModeActive) {\n            purpleModeActive = false // Disable Purple Mode\n            toggleColorFromPurple() // Handle Purple Mode toggle\n        } else if (isRainbowMode) {\n            setRandomColor() // First press: Random Red or Blue\n            isRainbowMode = false // Exit rainbow mode\n        } else {\n            toggleColor() // Subsequent presses: Toggle Red and Blue\n        }\n        basic.pause(500) // Debounce delay\n        while (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            // Wait for switch release\n        }\n    }\n})\n\n// Start the rainbow mode on startup\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB) // 16-LED ring\ncontrol.inBackground(function () {\n    rainbowChase()\n})\ncontrol.inBackground(function () {\n    initiateRandomPurple() // Periodically activate Purple Mode\n})\nbasic.showIcon(IconNames.Heart) // Display heart on startup\n","README.md":"","pxt.json":"{\n    \"name\": \"Robotopia Receiver (Final)\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"joystickbit\": \"github:tinkertanker/pxt-joystickbit#v1.0.4\",\n        \"neopixel\": \"github:microsoft/pxt-neopixel#v0.7.6\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1732657518142,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"II^y%5MArzV{E=2*)W],\">selectedMinutes</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let selectedMinutes = 0\" numlines=\"1\" declaredvars=\"selectedMinutes\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Tracks the currently selected minutes</comment><next><block type=\"radio_set_group\"><comment pinned=\"false\" h=\"80\" w=\"160\">Ensure both micro:bits use the same group</comment><value name=\"ID\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">5</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Enable pull-up resistors for side buttons</comment><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P12</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P13</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P14</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P15</field></shadow></value><next><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Happy</field><comment pinned=\"false\" h=\"80\" w=\"160\">Display happy face on startup</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"function handleButton(pin: DigitalPin, minutes: number, label: string) {\" line1=\"    if (pins.digitalReadPin(pin) == 0) {\" line2=\"        selectedMinutes = minutes // Set minutes\" line3=\"        displayCharacter(label) // Display the label\" line4=\"        radio.sendString(label.toLowerCase()) // Send the corresponding string\" line5=\"        serial.writeLine(&quot;Sent: &quot; + label.toLowerCase()) // Log sent string\" line6=\"        vibrate() // Trigger vibration\" line7=\"        basic.pause(300) // Debounce delay\" line8=\"        while (pins.digitalReadPin(pin) == 0) {\" line9=\"            // Wait for button release\" line10=\"        }\" line11=\"    }\" line12=\"}\" numlines=\"13\"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_forever\" x=\"1574\" y=\"-28\"><comment pinned=\"false\" h=\"80\" w=\"160\">Continuously monitor side buttons for state changes</comment><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P12, 4, &quot;4&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button C</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P15, 2, &quot;2&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button F</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P14, 3, &quot;3&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button E</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P13, 1, &quot;1&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button D</comment></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"778\" y=\"124\"><field name=\"NAME\">Button.A</field><comment pinned=\"false\" h=\"80\" w=\"160\">Monitor Button A for \"Reset\"</comment><statement name=\"HANDLER\"><block type=\"function_call\"><mutation name=\"displayCharacter\" functionid=\"vZwQ+?gzH[w/|v+mnS-b\"><arg name=\"char\" id=\"69shrb8skgim7wqowxq6r\" type=\"string\"></arg></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Display \"R\" on the LED grid</comment><value name=\"69shrb8skgim7wqowxq6r\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><next><block type=\"radio_datagram_send_string\"><comment pinned=\"false\" h=\"80\" w=\"160\">Send \"Reset\" string</comment><value name=\"msg\"><shadow type=\"text\"><field name=\"TEXT\">Reset</field></shadow></value><next><block type=\"serial_writeline\"><comment pinned=\"false\" h=\"80\" w=\"160\">Log sent string</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Sent: reset</field></shadow></value><next><block type=\"function_call\"><mutation name=\"vibrate\" functionid=\"`T3;.,J,yR:!ArB(JNYn\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Trigger vibration</comment></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"1285\" y=\"270\"><field name=\"NAME\">Button.B</field><comment pinned=\"false\" h=\"80\" w=\"160\">Monitor Button B for \"Start\"</comment><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"II^y%5MArzV{E=2*)W],\">selectedMinutes</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"function_call\"><mutation name=\"displayCharacter\" functionid=\"vZwQ+?gzH[w/|v+mnS-b\"><arg name=\"char\" id=\"69shrb8skgim7wqowxq6r\" type=\"string\"></arg></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Display \"S\" on the LED grid</comment><value name=\"69shrb8skgim7wqowxq6r\"><shadow type=\"text\"><field name=\"TEXT\">S</field></shadow></value><next><block type=\"radio_datagram_send_string\"><comment pinned=\"false\" h=\"80\" w=\"160\">Send \"Start\" string</comment><value name=\"msg\"><shadow type=\"text\"><field name=\"TEXT\">Start</field></shadow></value><next><block type=\"serial_writeline\"><comment pinned=\"false\" h=\"80\" w=\"160\">Log sent string</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Sent: start</field></shadow></value><next><block type=\"function_call\"><mutation name=\"vibrate\" functionid=\"`T3;.,J,yR:!ArB(JNYn\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Trigger vibration</comment></block></next></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"393\" y=\"818\"><mutation name=\"displayCharacter\" functionid=\"vZwQ+?gzH[w/|v+mnS-b\"><arg name=\"char\" id=\"69shrb8skgim7wqowxq6r\" type=\"string\"></arg></mutation><field name=\"function_name\">displayCharacter</field><comment pinned=\"false\" h=\"80\" w=\"160\">Function to display a character on the LED grid</comment><value name=\"69shrb8skgim7wqowxq6r\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">char</field></block></value><statement name=\"STACK\"><block type=\"device_clear_display\"><next><block type=\"device_print_message\"><comment pinned=\"false\" h=\"80\" w=\"160\">Show the character</comment><value name=\"text\"><block type=\"argument_reporter_string\"><field name=\"VALUE\">char</field></block></value></block></next></block></statement></block><block type=\"input_logo_event\" x=\"-16\" y=\"983\"><field name=\"action\">TouchButtonEvent.Pressed</field><comment pinned=\"false\" h=\"80\" w=\"160\">Display happy face on reset or restart</comment><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Happy</field></block></statement></block><block type=\"function_definition\" x=\"657\" y=\"983\"><mutation name=\"vibrate\" functionid=\"`T3;.,J,yR:!ArB(JNYn\"></mutation><field name=\"function_name\">vibrate</field><comment pinned=\"false\" h=\"80\" w=\"160\">Function to activate vibration motor using joystickbit extension</comment><statement name=\"STACK\"><block type=\"Vibration_Motor\"><comment pinned=\"false\" h=\"80\" w=\"160\">Activate vibration motor for 150ms</comment><value name=\"time\"><shadow type=\"math_number\"><field name=\"NUM\">150</field></shadow></value></block></statement></block></xml>","main.ts":"radio.setGroup(1) // Ensure both micro:bits use the same group\nlet isRainbowMode = true // Start with rainbow mode\nlet isRedMode = Math.randomBoolean() // Randomly choose Red or Blue for the first switch press\nlet countdownTime = 0 // Tracks countdown time in seconds\nlet countdownActive = false // Tracks if countdown is active\nlet flashingActive = false // Tracks if flashing is active\nlet gameOver = false // Tracks if the game is over\nlet purpleModeActive = false // Tracks if Purple Mode is active\nlet lastColor = isRedMode ? neopixel.colors(NeoPixelColors.Red) : neopixel.colors(NeoPixelColors.Blue) // Default random color\nlet purpleColor = neopixel.hsl(270, 100, 50) // Adjusted more violet-like purple color\n\n// Setup pull-up resistor for the tilt switch on P2\npins.setPull(DigitalPin.P2, PinPullMode.PullUp)\n\n// Redirect audio to external speaker on P1\nmusic.setBuiltInSpeakerEnabled(false) // Disable internal speaker\npins.analogSetPitchPin(AnalogPin.P1) // Route sound to P1\n\nfunction applyBrightness(brightness: number) {\n    np.setBrightness(brightness) // Apply brightness\n    np.showColor(lastColor) // Set to the last selected color\n    np.show()\n}\n\n// Rainbow chasing effect\nfunction rainbowChase() {\n    while (isRainbowMode) {\n        for (let j = 0; j < 16; j++) {\n            if (!isRainbowMode) return // Exit if mode changes\n            np.clear()\n            for (let i = 0; i < 16; i++) {\n                let hue = ((i + j) * 360) / 16 // Calculate hue for each LED\n                np.setPixelColor(i, neopixel.hsl(hue, 100, 50))\n            }\n            np.show()\n            basic.pause(100) // Adjust speed of the rainbow\n        }\n    }\n}\n\n// Set NeoPixel ring to red and play laser sound\nfunction setRed() {\n    isRainbowMode = false\n    isRedMode = true\n    lastColor = neopixel.colors(NeoPixelColors.Red)\n    applyBrightness(255)\n    control.inBackground(() => playLaserSound())\n}\n\n// Set NeoPixel ring to blue and play inverse laser sound\nfunction setBlue() {\n    isRainbowMode = false\n    isRedMode = false\n    lastColor = neopixel.colors(NeoPixelColors.Blue)\n    applyBrightness(255)\n    control.inBackground(() => playInverseLaserSound())\n}\n\n// Activate Purple Mode\nfunction activatePurpleMode() {\n    purpleModeActive = true // Activate Purple Mode\n    np.showColor(purpleColor) // Set NeoPixels to violet\n    np.show()\n    basic.pause(10000) // Stay purple for 10 seconds\n    purpleModeActive = false // Exit Purple Mode after timeout\n    np.showColor(lastColor) // Revert to last color\n    np.show()\n}\n\n// Handle color change and play corresponding laser sound\nfunction toggleColorFromPurple() {\n    let newColor = Math.randomBoolean() ? neopixel.colors(NeoPixelColors.Red) : neopixel.colors(NeoPixelColors.Blue)\n    lastColor = newColor // Update the last color\n    np.showColor(newColor) // Set new color\n    radio.sendString(newColor === neopixel.colors(NeoPixelColors.Red) ? \"red\" : \"blue\") // Broadcast color to other receivers\n    np.show()\n    // Play appropriate laser sound\n    if (newColor === neopixel.colors(NeoPixelColors.Red)) {\n        control.inBackground(() => playLaserSound())\n    } else {\n        control.inBackground(() => playInverseLaserSound())\n    }\n}\n\n// Toggle between Red and Blue colors\nfunction toggleColor() {\n    if (isRedMode) {\n        setBlue()\n    } else {\n        setRed()\n    }\n}\n\n// Randomly choose between Red and Blue for the first press\nfunction setRandomColor() {\n    if (Math.randomBoolean()) {\n        setRed()\n    } else {\n        setBlue()\n    }\n}\n\n// Flashing NeoPixels for the last 10 seconds\nfunction flashNeoPixels() {\n    flashingActive = true // Indicate flashing is active\n    for (let i = 0; i < 20; i++) { // Flash for 10 seconds (20 cycles at 250ms each)\n        if (!countdownActive) return // Stop if countdown ends prematurely\n        np.showColor(lastColor) // Turn on NeoPixels\n        basic.pause(250)\n        np.clear() // Turn off NeoPixels\n        np.show()\n        basic.pause(250)\n    }\n    flashingActive = false // Indicate flashing is complete\n    if (countdownActive) {\n        endCountdown() // Immediately transition to the end countdown\n    }\n}\n\n// Countdown Timer Function\nfunction startCountdown(seconds: number) {\n    countdownActive = true\n    control.runInBackground(() => runSnakePattern(seconds + 14)) // Run snake pattern for countdown + flashing + off\n    for (let i = seconds; i > 0; i--) {\n        if (i == 10) {\n            control.inBackground(() => flashNeoPixels()) // Flash in the last 10 seconds\n        }\n        basic.pause(1000) // 1-second delay\n    }\n    // Ensure the end sequence triggers after countdown\n    if (countdownActive) {\n        endCountdown()\n    }\n}\n\n// Run Snake Pattern\nfunction runSnakePattern(duration: number) {\n    let position = 0 // LED grid position\n    for (let i = 0; i < duration * 20; i++) { // Ensure it runs for the extended duration\n        if (!countdownActive) break // Stop if the countdown is no longer active\n        displaySnake(position)\n        position = (position + 1) % 25\n        basic.pause(50) // Speed up snake pattern\n    }\n}\n\n// Snake pattern for LED grid\nfunction displaySnake(position: number) {\n    let x = position % 5\n    let y = Math.floor(position / 5)\n    basic.clearScreen()\n    if (y % 2 == 0) {\n        // Even rows light up left-to-right\n        led.plot(x, y)\n    } else {\n        // Odd rows light up right-to-left\n        led.plot(4 - x, y)\n    }\n}\n\n// End Countdown: Turn off LEDs, display \"X\", and play buzzer\nfunction endCountdown() {\n    countdownActive = false // Stop the snake pattern\n    flashingActive = false // Ensure flashing stops\n    gameOver = true // Game is over, deactivate microswitch immediately\n    np.clear()\n    np.show() // Turn off NeoPixels\n    displayX() // Show \"X\" on the LED grid\n    control.inBackground(() => playGameOverSound()) // Play buzzer sound\n    basic.pause(4000) // Wait for buzzer to complete\n    np.setBrightness(64) // Set NeoPixels to low brightness (25%)\n    np.showColor(lastColor) // Restore NeoPixels to last color\n    np.show()\n}\n\n// Display \"X\" on the LED grid\nfunction displayX() {\n    basic.clearScreen()\n    for (let i = 0; i < 5; i++) {\n        led.plot(i, i) // Top-left to bottom-right diagonal\n        led.plot(i, 4 - i) // Top-right to bottom-left diagonal\n    }\n}\n\n// Laser sound effect for Red mode\nfunction playLaserSound() {\n    for (let freq = 1000; freq > 200; freq -= 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid descending tones\n    }\n}\n\n// Inverse laser sound effect for Blue mode\nfunction playInverseLaserSound() {\n    for (let freq = 200; freq <= 1000; freq += 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid ascending tones\n    }\n}\n\n// Play game-over dramatic buzzer sound\nfunction playGameOverSound() {\n    for (let i = 0; i < 3; i++) {\n        music.playTone(330, music.beat(BeatFraction.Quarter)) // Low E\n        music.playTone(440, music.beat(BeatFraction.Quarter)) // Middle A\n        music.playTone(554, music.beat(BeatFraction.Quarter)) // High C#\n        music.playTone(440, music.beat(BeatFraction.Half))    // Middle A held longer\n        basic.pause(200)\n    }\n    music.playTone(220, music.beat(BeatFraction.Double)) // Deep final tone (Low A)\n}\n\n// Initiate random purple mode periodically\nfunction initiateRandomPurple() {\n    while (true) {\n        if (!gameOver && countdownActive) {\n            basic.pause(Math.randomRange(15000, 30000)) // Random delay between 15-30 seconds\n            activatePurpleMode()\n        } else {\n            basic.pause(1000) // Check periodically if game is active\n        }\n    }\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"purple\") {\n        activatePurpleMode() // Activate Purple Mode when signal is received\n    } else if (receivedString == \"red\") {\n        lastColor = neopixel.colors(NeoPixelColors.Red)\n        np.showColor(lastColor)\n    } else if (receivedString == \"blue\") {\n        lastColor = neopixel.colors(NeoPixelColors.Blue)\n        np.showColor(lastColor)\n    } else if (receivedString == \"reset\") {\n        basic.showString(\"R\")\n        isRainbowMode = true\n        gameOver = false\n        countdownActive = false\n        flashingActive = false\n        purpleModeActive = false\n        control.inBackground(() => rainbowChase())\n    } else if (receivedString == \"start\" && countdownTime > 0 && !countdownActive) {\n        basic.showString(\"S\")\n        control.inBackground(() => startCountdown(countdownTime))\n    } else if (receivedString == \"one\") {\n        countdownTime = 60\n        basic.showNumber(1)\n    } else if (receivedString == \"two\") {\n        countdownTime = 120\n        basic.showNumber(2)\n    } else if (receivedString == \"three\") {\n        countdownTime = 180\n        basic.showNumber(3)\n    } else if (receivedString == \"four\") {\n        countdownTime = 240\n        basic.showNumber(4)\n    }\n})\n\n// Monitor the tilt switch\nbasic.forever(function () {\n    if (gameOver) return // Immediately exit if the game is over\n    if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        if (purpleModeActive) {\n            purpleModeActive = false // Disable Purple Mode\n            toggleColorFromPurple() // Handle Purple Mode toggle\n        } else if (isRainbowMode) {\n            setRandomColor() // First press: Random Red or Blue\n            isRainbowMode = false // Exit rainbow mode\n        } else {\n            toggleColor() // Subsequent presses: Toggle Red and Blue\n        }\n        basic.pause(500) // Debounce delay\n        while (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            // Wait for switch release\n        }\n    }\n})\n\n// Start the rainbow mode on startup\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB) // 16-LED ring\ncontrol.inBackground(() => rainbowChase())\ncontrol.inBackground(() => initiateRandomPurple()) // Periodically activate Purple Mode\nbasic.showIcon(IconNames.Heart) // Display heart on startup\n","README.md":"","pxt.json":"{\n    \"name\": \"Robotopia Receiver (Final)\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"joystickbit\": \"github:tinkertanker/pxt-joystickbit#v1.0.4\",\n        \"neopixel\": \"github:microsoft/pxt-neopixel#v0.7.6\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1732659440490,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"II^y%5MArzV{E=2*)W],\">selectedMinutes</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let selectedMinutes = 0\" numlines=\"1\" declaredvars=\"selectedMinutes\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Tracks the currently selected minutes</comment><next><block type=\"radio_set_group\"><comment pinned=\"false\" h=\"80\" w=\"160\">Ensure both micro:bits use the same group</comment><value name=\"ID\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">5</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><comment pinned=\"false\" h=\"80\" w=\"160\">Enable pull-up resistors for side buttons</comment><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P12</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P13</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P14</field></shadow></value><next><block type=\"device_set_pull\"><field name=\"pull\">PinPullMode.PullUp</field><value name=\"pin\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P15</field></shadow></value><next><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Happy</field><comment pinned=\"false\" h=\"80\" w=\"160\">Display happy face on startup</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"function handleButton(pin: DigitalPin, minutes: number, label: string) {\" line1=\"    if (pins.digitalReadPin(pin) == 0) {\" line2=\"        selectedMinutes = minutes // Set minutes\" line3=\"        displayCharacter(label) // Display the label\" line4=\"        radio.sendString(label.toLowerCase()) // Send the corresponding string\" line5=\"        serial.writeLine(&quot;Sent: &quot; + label.toLowerCase()) // Log sent string\" line6=\"        vibrate() // Trigger vibration\" line7=\"        basic.pause(300) // Debounce delay\" line8=\"        while (pins.digitalReadPin(pin) == 0) {\" line9=\"            // Wait for button release\" line10=\"        }\" line11=\"    }\" line12=\"}\" numlines=\"13\"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_forever\" x=\"1574\" y=\"-28\"><comment pinned=\"false\" h=\"80\" w=\"160\">Continuously monitor side buttons for state changes</comment><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P12, 4, &quot;4&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button C</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P15, 2, &quot;2&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button F</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P14, 3, &quot;3&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button E</comment><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"handleButton(DigitalPin.P13, 1, &quot;1&quot;)\" numlines=\"1\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Button D</comment></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"778\" y=\"124\"><field name=\"NAME\">Button.A</field><comment pinned=\"false\" h=\"80\" w=\"160\">Monitor Button A for \"Reset\"</comment><statement name=\"HANDLER\"><block type=\"function_call\"><mutation name=\"displayCharacter\" functionid=\"vZwQ+?gzH[w/|v+mnS-b\"><arg name=\"char\" id=\"69shrb8skgim7wqowxq6r\" type=\"string\"></arg></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Display \"R\" on the LED grid</comment><value name=\"69shrb8skgim7wqowxq6r\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><next><block type=\"radio_datagram_send_string\"><comment pinned=\"false\" h=\"80\" w=\"160\">Send \"Reset\" string</comment><value name=\"msg\"><shadow type=\"text\"><field name=\"TEXT\">Reset</field></shadow></value><next><block type=\"serial_writeline\"><comment pinned=\"false\" h=\"80\" w=\"160\">Log sent string</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Sent: reset</field></shadow></value><next><block type=\"function_call\"><mutation name=\"vibrate\" functionid=\"`T3;.,J,yR:!ArB(JNYn\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Trigger vibration</comment></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"1285\" y=\"270\"><field name=\"NAME\">Button.B</field><comment pinned=\"false\" h=\"80\" w=\"160\">Monitor Button B for \"Start\"</comment><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"II^y%5MArzV{E=2*)W],\">selectedMinutes</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"function_call\"><mutation name=\"displayCharacter\" functionid=\"vZwQ+?gzH[w/|v+mnS-b\"><arg name=\"char\" id=\"69shrb8skgim7wqowxq6r\" type=\"string\"></arg></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Display \"S\" on the LED grid</comment><value name=\"69shrb8skgim7wqowxq6r\"><shadow type=\"text\"><field name=\"TEXT\">S</field></shadow></value><next><block type=\"radio_datagram_send_string\"><comment pinned=\"false\" h=\"80\" w=\"160\">Send \"Start\" string</comment><value name=\"msg\"><shadow type=\"text\"><field name=\"TEXT\">Start</field></shadow></value><next><block type=\"serial_writeline\"><comment pinned=\"false\" h=\"80\" w=\"160\">Log sent string</comment><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Sent: start</field></shadow></value><next><block type=\"function_call\"><mutation name=\"vibrate\" functionid=\"`T3;.,J,yR:!ArB(JNYn\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">Trigger vibration</comment></block></next></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"393\" y=\"818\"><mutation name=\"displayCharacter\" functionid=\"vZwQ+?gzH[w/|v+mnS-b\"><arg name=\"char\" id=\"69shrb8skgim7wqowxq6r\" type=\"string\"></arg></mutation><field name=\"function_name\">displayCharacter</field><comment pinned=\"false\" h=\"80\" w=\"160\">Function to display a character on the LED grid</comment><value name=\"69shrb8skgim7wqowxq6r\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">char</field></block></value><statement name=\"STACK\"><block type=\"device_clear_display\"><next><block type=\"device_print_message\"><comment pinned=\"false\" h=\"80\" w=\"160\">Show the character</comment><value name=\"text\"><block type=\"argument_reporter_string\"><field name=\"VALUE\">char</field></block></value></block></next></block></statement></block><block type=\"input_logo_event\" x=\"-16\" y=\"983\"><field name=\"action\">TouchButtonEvent.Pressed</field><comment pinned=\"false\" h=\"80\" w=\"160\">Display happy face on reset or restart</comment><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Happy</field></block></statement></block><block type=\"function_definition\" x=\"657\" y=\"983\"><mutation name=\"vibrate\" functionid=\"`T3;.,J,yR:!ArB(JNYn\"></mutation><field name=\"function_name\">vibrate</field><comment pinned=\"false\" h=\"80\" w=\"160\">Function to activate vibration motor using joystickbit extension</comment><statement name=\"STACK\"><block type=\"Vibration_Motor\"><comment pinned=\"false\" h=\"80\" w=\"160\">Activate vibration motor for 150ms</comment><value name=\"time\"><shadow type=\"math_number\"><field name=\"NUM\">150</field></shadow></value></block></statement></block></xml>","main.ts":"radio.setGroup(1) // Ensure both micro:bits use the same group\nlet isRainbowMode = true // Start with rainbow mode\nlet isRedMode = Math.randomBoolean() // Randomly choose Red or Blue for the first switch press\nlet countdownTime = 0 // Tracks countdown time in seconds\nlet countdownActive = false // Tracks if countdown is active\nlet flashingActive = false // Tracks if flashing is active\nlet gameOver = false // Tracks if the game is over\nlet purpleModeActive = false // Tracks if Purple Mode is active\nlet lastColor = isRedMode ? neopixel.colors(NeoPixelColors.Red) : neopixel.colors(NeoPixelColors.Blue) // Default random color\nlet purpleColor = neopixel.hsl(270, 100, 50) // Adjusted more violet-like purple color\n\n// Setup pull-up resistor for the tilt switch on P2\npins.setPull(DigitalPin.P2, PinPullMode.PullUp)\n\n// Redirect audio to external speaker on P1\nmusic.setBuiltInSpeakerEnabled(false) // Disable internal speaker\npins.analogSetPitchPin(AnalogPin.P1) // Route sound to P1\n\nfunction applyBrightness(brightness: number) {\n    np.setBrightness(brightness) // Apply brightness\n    np.showColor(lastColor) // Set to the last selected color\n    np.show()\n}\n\n// Rainbow chasing effect\nfunction rainbowChase() {\n    while (isRainbowMode) {\n        for (let j = 0; j < 16; j++) {\n            if (!isRainbowMode) return // Exit if mode changes\n            np.clear()\n            for (let i = 0; i < 16; i++) {\n                let hue = ((i + j) * 360) / 16 // Calculate hue for each LED\n                np.setPixelColor(i, neopixel.hsl(hue, 100, 50))\n            }\n            np.show()\n            basic.pause(100) // Adjust speed of the rainbow\n        }\n    }\n}\n\n// Set NeoPixel ring to red and play laser sound\nfunction setRed() {\n    isRainbowMode = false\n    isRedMode = true\n    lastColor = neopixel.colors(NeoPixelColors.Red)\n    applyBrightness(255)\n    control.inBackground(() => playLaserSound())\n}\n\n// Set NeoPixel ring to blue and play inverse laser sound\nfunction setBlue() {\n    isRainbowMode = false\n    isRedMode = false\n    lastColor = neopixel.colors(NeoPixelColors.Blue)\n    applyBrightness(255)\n    control.inBackground(() => playInverseLaserSound())\n}\n\n// Activate Purple Mode\nfunction activatePurpleMode() {\n    purpleModeActive = true // Activate Purple Mode\n    np.showColor(purpleColor) // Set NeoPixels to violet\n    np.show()\n    basic.pause(10000) // Stay purple for 10 seconds\n    purpleModeActive = false // Exit Purple Mode after timeout\n    np.showColor(lastColor) // Revert to last color\n    np.show()\n}\n\n// Handle color change and play corresponding laser sound\nfunction toggleColorFromPurple() {\n    let newColor = Math.randomBoolean() ? neopixel.colors(NeoPixelColors.Red) : neopixel.colors(NeoPixelColors.Blue)\n    lastColor = newColor // Update the last color\n    np.showColor(newColor) // Set new color\n    radio.sendString(newColor === neopixel.colors(NeoPixelColors.Red) ? \"red\" : \"blue\") // Broadcast color to other receivers\n    np.show()\n    // Play appropriate laser sound\n    if (newColor === neopixel.colors(NeoPixelColors.Red)) {\n        control.inBackground(() => playLaserSound())\n    } else {\n        control.inBackground(() => playInverseLaserSound())\n    }\n}\n\n// Toggle between Red and Blue colors\nfunction toggleColor() {\n    if (isRedMode) {\n        setBlue()\n    } else {\n        setRed()\n    }\n}\n\n// Randomly choose between Red and Blue for the first press\nfunction setRandomColor() {\n    if (Math.randomBoolean()) {\n        setRed()\n    } else {\n        setBlue()\n    }\n}\n\n// Flashing NeoPixels for the last 10 seconds\nfunction flashNeoPixels() {\n    flashingActive = true // Indicate flashing is active\n    for (let i = 0; i < 20; i++) { // Flash for 10 seconds (20 cycles at 250ms each)\n        if (!countdownActive) return // Stop if countdown ends prematurely\n        np.showColor(lastColor) // Turn on NeoPixels\n        basic.pause(250)\n        np.clear() // Turn off NeoPixels\n        np.show()\n        basic.pause(250)\n    }\n    flashingActive = false // Indicate flashing is complete\n    if (countdownActive) {\n        endCountdown() // Immediately transition to the end countdown\n    }\n}\n\n// Countdown Timer Function\nfunction startCountdown(seconds: number) {\n    countdownActive = true\n    control.runInBackground(() => runSnakePattern(seconds + 14)) // Run snake pattern for countdown + flashing + off\n    for (let i = seconds; i > 0; i--) {\n        if (i == 10) {\n            control.inBackground(() => flashNeoPixels()) // Flash in the last 10 seconds\n        }\n        basic.pause(1000) // 1-second delay\n    }\n    // Ensure the end sequence triggers after countdown\n    if (countdownActive) {\n        endCountdown()\n    }\n}\n\n// Run Snake Pattern\nfunction runSnakePattern(duration: number) {\n    let position = 0 // LED grid position\n    for (let i = 0; i < duration * 20; i++) { // Ensure it runs for the extended duration\n        if (!countdownActive) break // Stop if the countdown is no longer active\n        displaySnake(position)\n        position = (position + 1) % 25\n        basic.pause(50) // Speed up snake pattern\n    }\n}\n\n// Snake pattern for LED grid\nfunction displaySnake(position: number) {\n    let x = position % 5\n    let y = Math.floor(position / 5)\n    basic.clearScreen()\n    if (y % 2 == 0) {\n        // Even rows light up left-to-right\n        led.plot(x, y)\n    } else {\n        // Odd rows light up right-to-left\n        led.plot(4 - x, y)\n    }\n}\n\n// End Countdown: Turn off LEDs, display \"X\", and play buzzer\nfunction endCountdown() {\n    countdownActive = false // Stop the snake pattern\n    flashingActive = false // Ensure flashing stops\n    gameOver = true // Game is over, deactivate microswitch immediately\n    np.clear()\n    np.show() // Turn off NeoPixels\n    displayX() // Show \"X\" on the LED grid\n    control.inBackground(() => playGameOverSound()) // Play buzzer sound\n    basic.pause(4000) // Wait for buzzer to complete\n    np.setBrightness(64) // Set NeoPixels to low brightness (25%)\n    np.showColor(lastColor) // Restore NeoPixels to last color\n    np.show()\n}\n\n// Display \"X\" on the LED grid\nfunction displayX() {\n    basic.clearScreen()\n    for (let i = 0; i < 5; i++) {\n        led.plot(i, i) // Top-left to bottom-right diagonal\n        led.plot(i, 4 - i) // Top-right to bottom-left diagonal\n    }\n}\n\n// Laser sound effect for Red mode\nfunction playLaserSound() {\n    for (let freq = 1000; freq > 200; freq -= 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid descending tones\n    }\n}\n\n// Inverse laser sound effect for Blue mode\nfunction playInverseLaserSound() {\n    for (let freq = 200; freq <= 1000; freq += 50) {\n        music.playTone(freq, music.beat(BeatFraction.Sixteenth)) // Rapid ascending tones\n    }\n}\n\n// Play game-over dramatic buzzer sound\nfunction playGameOverSound() {\n    for (let i = 0; i < 3; i++) {\n        music.playTone(330, music.beat(BeatFraction.Quarter)) // Low E\n        music.playTone(440, music.beat(BeatFraction.Quarter)) // Middle A\n        music.playTone(554, music.beat(BeatFraction.Quarter)) // High C#\n        music.playTone(440, music.beat(BeatFraction.Half))    // Middle A held longer\n        basic.pause(200)\n    }\n    music.playTone(220, music.beat(BeatFraction.Double)) // Deep final tone (Low A)\n}\n\n// Initiate random purple mode periodically\nfunction initiateRandomPurple() {\n    while (true) {\n        if (!gameOver && countdownActive) {\n            basic.pause(Math.randomRange(15000, 30000)) // Random delay between 15-30 seconds\n            activatePurpleMode()\n        } else {\n            basic.pause(1000) // Check periodically if game is active\n        }\n    }\n}\n\n// Handle received radio messages\nradio.onReceivedString(function (receivedString) {\n    if (receivedString == \"purple\") {\n        activatePurpleMode() // Activate Purple Mode when signal is received\n    } else if (receivedString == \"red\") {\n        lastColor = neopixel.colors(NeoPixelColors.Red)\n        np.showColor(lastColor)\n    } else if (receivedString == \"blue\") {\n        lastColor = neopixel.colors(NeoPixelColors.Blue)\n        np.showColor(lastColor)\n    } else if (receivedString == \"reset\") {\n        basic.showString(\"R\")\n        isRainbowMode = true\n        gameOver = false\n        countdownActive = false\n        flashingActive = false\n        purpleModeActive = false\n        control.inBackground(() => rainbowChase())\n    } else if (receivedString == \"start\" && countdownTime > 0 && !countdownActive) {\n        basic.showString(\"S\")\n        control.inBackground(() => startCountdown(countdownTime))\n    } else if (receivedString == \"one\") {\n        countdownTime = 60\n        basic.showNumber(1)\n    } else if (receivedString == \"two\") {\n        countdownTime = 120\n        basic.showNumber(2)\n    } else if (receivedString == \"three\") {\n        countdownTime = 180\n        basic.showNumber(3)\n    } else if (receivedString == \"four\") {\n        countdownTime = 240\n        basic.showNumber(4)\n    }\n})\n\n// Monitor the tilt switch\nbasic.forever(function () {\n    if (gameOver) return // Immediately exit if the game is over\n    if (pins.digitalReadPin(DigitalPin.P2) == 0) {\n        if (purpleModeActive) {\n            purpleModeActive = false // Disable Purple Mode\n            toggleColorFromPurple() // Handle Purple Mode toggle\n        } else if (isRainbowMode) {\n            setRandomColor() // First press: Random Red or Blue\n            isRainbowMode = false // Exit rainbow mode\n        } else {\n            toggleColor() // Subsequent presses: Toggle Red and Blue\n        }\n        basic.pause(500) // Debounce delay\n        while (pins.digitalReadPin(DigitalPin.P2) == 0) {\n            // Wait for switch release\n        }\n    }\n})\n\n// Start the rainbow mode on startup\nlet np = neopixel.create(DigitalPin.P0, 16, NeoPixelMode.RGB) // 16-LED ring\ncontrol.inBackground(() => rainbowChase())\ncontrol.inBackground(() => initiateRandomPurple()) // Periodically activate Purple Mode\nbasic.showIcon(IconNames.Heart) // Display heart on startup\n","README.md":"","pxt.json":"{\n    \"name\": \"Robotopia Receiver (Final)\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"joystickbit\": \"github:tinkertanker/pxt-joystickbit#v1.0.4\",\n        \"neopixel\": \"github:microsoft/pxt-neopixel#v0.7.6\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1732659440503}